<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>俄罗斯-格鲁吉亚网络冲突事件</title>
    <url>//post/2008%E4%BF%84%E7%BD%97%E6%96%AF-%E6%A0%BC%E9%B2%81%E5%90%89%E4%BA%9A%E7%BD%91%E7%BB%9C%E5%86%B2%E7%AA%81%E4%BA%8B%E4%BB%B6.html</url>
    <content><![CDATA[<h1 id="俄罗斯-格鲁吉亚网络冲突事件"><a href="#俄罗斯-格鲁吉亚网络冲突事件" class="headerlink" title="俄罗斯-格鲁吉亚网络冲突事件"></a>俄罗斯-格鲁吉亚网络冲突事件</h1><p>“正如你所看到的，看似平静的世界，硝烟弥漫。” ——点我试试</p>
<h2 id="事件简介"><a href="#事件简介" class="headerlink" title="事件简介"></a>事件简介</h2><p>2008 年 8 月，为了把格鲁吉亚从南奥塞梯驱逐出去，俄罗斯军队进攻格鲁吉亚。此次军事行动开展的同时，也伴随了大量经过协调的网络攻击行动。这是第一次与大规模地面作战行动配合的大规模网络攻击，对格鲁吉亚展开了全面的“蜂群”式网络阻瘫攻击，致使格方电视媒体、金融和交通等重要系统瘫痪，机场、物流和通信等信息网络崩溃，急需的战争物资无法及时运达指定位置，战争潜力被严重削弱，直接影响了格鲁吉亚的社会秩序以及军队的作战指挥和调度。</p>
<h2 id="网络攻击阶段"><a href="#网络攻击阶段" class="headerlink" title="网络攻击阶段"></a>网络攻击阶段</h2><p>一位安全专家将俄罗斯对格鲁吉亚的网络攻击分为两个阶段。</p>
<h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>在第一阶段中，俄罗斯黑客发起的攻击类型主要是<strong>分布式拒绝服务（DDoS）攻击</strong>。</p>
<p><img src="https://vinsep.com/wp-content/uploads/2020/12/What-is-a-DDoS-attack.png"></p>
<p>此阶段的DDoS主要通过<strong>僵尸网络</strong>开展。</p>
<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP.IoiJwYnib7wq7fFUU6gOowHaFO?pid=ImgDet&rs=1">俄罗斯商业网络（Russian Business Network ，RBN)这类犯罪组织出于各种目的使用并租赁僵尸网络。攻击格鲁吉亚网站中所使用的僵尸网络都隶属于俄罗斯的犯罪组织，其中就有包括 RBN。</p>
<p><img src="https://cdn.medcom.id/dynamic/content/2015/08/12/156965/dJb2yGIKj8.jpg?w=1024"></p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>注：RBN是一种专门为违法犯罪分子进行网络犯罪提供庇护的自治域。</p></blockquote>
<p>第一阶段的攻击主要针对格鲁吉亚政府和媒体网站。俄罗斯的僵尸网络依靠强力的 DDoS 对这些目标采取行动。爱沙尼亚的网络在一年前受到俄罗斯黑客攻击，而格鲁吉亚的网络，由于其本身脆弱，比起前者更容易受到数据洪流包的影响 </p>
<h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>格鲁吉亚媒体和政府网站持续受到 DDoS 攻击的同时，俄罗斯第二阶段的网络作战力求对更多目标进行破坏，其破坏目标名单上包括金融机构企业教育机构西方媒体（英国广播公司和美国有线电视新闻网络）以及一处格鲁吉亚黑客网站 （图 3.1）。对这些服务器的攻击不仅包括 DDoS 攻击，还包括篡改服务器的网站（如：在政府网站上添加将格鲁吉亚总统米哈伊尔·萨卡什维利比作阿道夫·希特勒的亲俄涂鸦）。此外，一些俄罗斯黑客利用格鲁吉亚政治人物公开可用的电子邮件地址，发起垃圾邮件攻击。</p>
<p>同时，俄罗斯黑客利用BGP劫持，通过俄罗斯的服务器重新路由了格鲁吉亚的互联网流量，借机破坏政府网站，入侵电视和广播电台。</p>
<p><img src="https://th.bing.com/th/id/Rd683502377568ecde40b05694d1209ab?rik=85rCIN7iXtnnpA&pid=ImgRaw"></p>
<h2 id="对格鲁吉亚网络攻击的特点"><a href="#对格鲁吉亚网络攻击的特点" class="headerlink" title="对格鲁吉亚网络攻击的特点"></a>对格鲁吉亚网络攻击的特点</h2><h3 id="攻击目标"><a href="#攻击目标" class="headerlink" title="攻击目标"></a>攻击目标</h3><p>俄罗斯网络攻击的目标是“隔离和压制”格鲁吉亚人。攻击有效地使（1）格鲁吉亚媒体沉默并（2）使格鲁吉亚从国际社会孤立开来。</p>
<h3 id="与常规部队的配合"><a href="#与常规部队的配合" class="headerlink" title="与常规部队的配合"></a><strong>与常规部队的配合</strong></h3><p>网络攻击与常规部队的协调是非常有限的。</p>
<h3 id="侦察和准备"><a href="#侦察和准备" class="headerlink" title="侦察和准备"></a><strong>侦察和准备</strong></h3><p>许多安全专家认为，在 8 月 7 日最初的网络攻击之前，俄罗斯黑客已经准备好行动。</p>
<h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>2008 年 8 月俄罗斯对格鲁吉亚发动的网络攻击是第一次与主要常规军事行动同时发生的大规模网络攻击。这些网络攻击削弱了格鲁吉亚人与外界沟通的能力，在信息和心理上对媒体、政府以及公众产生了重大影响。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="网络武器库"><a href="#网络武器库" class="headerlink" title="网络武器库"></a>网络武器库</h3><p>2017年，NSA网络武器库的泄露[2]更是像世界展示了美国在网络战领域的狼子野心。僵尸网络，DDoS是发动网络攻击中非常有效的工具和手段。</p>
<h3 id="好用又廉价，网络战是未来战争不可缺少的一环"><a href="#好用又廉价，网络战是未来战争不可缺少的一环" class="headerlink" title="好用又廉价，网络战是未来战争不可缺少的一环"></a>好用又廉价，网络战是未来战争不可缺少的一环</h3><p>1991年海湾战争让世界眼前一亮。现在网络战、网络武器也进入人民的视野。网络战具有隐蔽、攻击范围大，对信息基础设施影响大（甚至是物理基础设施，见震网、美东部输油管道中断等），容易制造舆论压力等特点，<strong>好用又廉价。</strong>未来战争，网络战是其中必不可少的一部分。</p>
<h3 id="“网络人民战争”"><a href="#“网络人民战争”" class="headerlink" title="“网络人民战争”"></a>“网络人民战争”</h3><p>有意思的是，在网络攻击期间，俄罗斯网民可以从网站上下载黑客软件，安装之后点击“开始攻击”按钮即可进行网络攻击。媒体评论俄罗斯打了一场名副其实的“网络人民战争”。</p>
<p>正如你所看到的，看似平静的世界，硝烟弥漫。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]<strong>《网络战》中文第三章：2008 年俄罗斯对格鲁吉亚的网络</strong>，<a href="https://blog.51cto.com/tasnrh/1908672">https://blog.51cto.com/tasnrh/1908672</a></p>
<p>[2] 2017 NSA网络武器库泄露工具总结分析,<a href="https://zhuanlan.zhihu.com/p/31793688">https://zhuanlan.zhihu.com/p/31793688</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>网络战</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)Cyber-Kill-Chain-网络杀伤链</title>
    <url>//post/Cyber-Kill-Chain-%E7%BD%91%E7%BB%9C%E6%9D%80%E4%BC%A4%E9%93%BE.html</url>
    <content><![CDATA[<h1 id="转载-Cyber-Kill-Chain-网络杀伤链"><a href="#转载-Cyber-Kill-Chain-网络杀伤链" class="headerlink" title="(转载)Cyber-Kill-Chain-网络杀伤链"></a>(转载)Cyber-Kill-Chain-网络杀伤链</h1><h2 id="网络杀伤链"><a href="#网络杀伤链" class="headerlink" title="网络杀伤链"></a>网络杀伤链</h2><p>“网络杀伤链”，是美国国防承包商洛克希德·马丁公司（Lockheed Martin）提出的网络安全威胁的杀伤链模型[2]（普遍适用的网络攻击流程与防御概念，参考军事上的杀伤链(Kill Chain)概念）。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>杀伤链源自军事领域，它是一个描述攻击环节的模型，理论上也可以用来预防此类攻击（即反杀伤链）。杀伤链共有发现-定位-跟踪-瞄准-打击-达成目标六个环节，每一环节都是对攻击做出侦测和反应的机会。</p></blockquote>
<p>内容包括成功的网络攻击所需的七个阶段：侦察跟踪、武器构建、载荷投递、漏洞利用、安装植入、命令与控制、目标达成。</p>
<p><img src="https://img2020.cnblogs.com/blog/1073473/202008/1073473-20200827125455160-2135375247.png"></p>
<h2 id="针对网络杀伤链的防御对策"><a href="#针对网络杀伤链的防御对策" class="headerlink" title="针对网络杀伤链的防御对策"></a>针对网络杀伤链的防御对策</h2><p>洛克希德·马丁公司在2015年发布的白皮书中提出预防措施，以降低上述每个阶段的影响程度。</p>
<h3 id="1、侦察跟踪"><a href="#1、侦察跟踪" class="headerlink" title="1、侦察跟踪"></a>1、侦察跟踪</h3><p>　　描述：攻击者进行探测、识别及确定攻击对象（目标）的阶段。信息一般通过互联网进行收集（内容包括网站、邮箱、电话、社会工程学等一切可能相关的情报）</p>
<p>　　预防：侦察跟踪阶段往往是防守方感知比较少的阶段；应关注于日常异常流量、日志和数据（特别是已经泄露的数据），将其存储备查是必要的，更重要的是建立和优化分析模型。</p>
<h3 id="2、武器构建"><a href="#2、武器构建" class="headerlink" title="2、武器构建"></a>2、武器构建</h3><p>　　描述：攻击者通过侦察跟踪阶段确定目标、收集足够的信息后，准备网络武器的阶段。网络武器一般由攻击者直接构建或使用自动化工具构建等。</p>
<p>　　预防：武器构建行为本身对于防守方来说几乎无感知，但又与防守方的“资源”密切相关，武器的构建需要基于“资源”的漏洞或缺陷（包括操作系统、应用软件、甚至社会工程）；应关注“资产”相关漏洞、补丁、修复流程是否完备。</p>
<h3 id="3、载荷投递"><a href="#3、载荷投递" class="headerlink" title="3、载荷投递"></a>3、载荷投递</h3><p>　　描述：攻击者将构建完成的网络武器向目标投递的阶段。投递方式一般包括钓鱼邮件、物理USB投递等。</p>
<p>　　预防：防护策略在该阶段尤为重要，云防护、边界防护、区域防护、系统防护、应用防护等，应关注是否具备且有效防护措施，另外安全意识也同样重要，人的弱点往往比设备的弱点更容易被利用。</p>
<h3 id="4、漏洞利用"><a href="#4、漏洞利用" class="headerlink" title="4、漏洞利用"></a>4、漏洞利用</h3><p>　　描述：攻击者将网络武器投递到目标系统后，启动恶意代码的阶段。一般会利用应用程序或操作系统的漏洞或缺陷等。</p>
<p>　　预防：安全检测、安全监测、阻断+审计，这就是日常的安全监控工作（看大门的工作，重要！）</p>
<h3 id="5、安装植入"><a href="#5、安装植入" class="headerlink" title="5、安装植入"></a>5、安装植入</h3><p>　　描述：攻击者在目标系统设置木马、后门等，一定期限内在目标系统营造活动环境的阶段。</p>
<p>　　预防：在最短的时间内发现并隔离，关注终端&#x2F;服务器安全管理策略、防病毒。</p>
<h3 id="6、命令与控制"><a href="#6、命令与控制" class="headerlink" title="6、命令与控制"></a>6、命令与控制</h3><p>　　描述：攻击者建立目标系统攻击路径的阶段。一般使用自动和手工相结合的方式进行，一旦攻击路径确立后，攻击者将能够控制目标系统。</p>
<p>　　预防：洛克希德·马丁公司描述此阶段为“防御者阻止攻击的最后机会……如果对手无法发出命令，防御者便可控制影响”，此阶段正是考验响应策略的最后一次尝试，所以更应关注访问控制。</p>
<h3 id="7、目标达成"><a href="#7、目标达成" class="headerlink" title="7、目标达成"></a>7、目标达成</h3><p>　　描述：攻击者达到预期目标的阶段。攻击目标呈现多样化，可能包括侦察、敏感信息收集、数据破坏、系统摧毁等。</p>
<p>　　预防：虽然木已成舟，但仍需要集中精力把损失降低到最小，吸取教训、改进措施，才能避免在同一个地方摔倒两次。</p>
<p><img src="https://img2020.cnblogs.com/blog/1073473/202008/1073473-20200827121907246-1035985227.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现阶段大部分的攻击者可能都在遵循上述的步骤， 但APT（高级可持续攻击）趋势正在迅速增长，甚至未知威胁，所以防御对策也必须要不断的更新迭代来应对这潜移默化的威胁。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>[1] 原文，Cyber-Kill-Chain-网络杀伤链，<a href="https://www.cnblogs.com/Michael-Scofields/p/13570827.html">https://www.cnblogs.com/Michael-Scofields/p/13570827.html</a></p>
<p>[2] Intelligence-Driven Computer Network Defense Informed by Analysis of Adversary Campaigns and Intrusion Kill Chains, <a href="https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/LM-White-Paper-Intel-Driven-Defense.pdf">https://www.lockheedmartin.com/content/dam/lockheed-martin/rms/documents/cyber/LM-White-Paper-Intel-Driven-Defense.pdf</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>网络战</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言回头看--诡异的i++和++i</title>
    <url>//post/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E5%A4%B4%E7%9C%8B--%E5%8F%8C%E8%83%9E%E8%83%8Ei++%E5%92%8C++i%E7%9A%84%E6%95%85%E4%BA%8B.html</url>
    <content><![CDATA[<h1 id="C语言回头看–诡异的i-和-i"><a href="#C语言回头看–诡异的i-和-i" class="headerlink" title="C语言回头看–诡异的i++和++i"></a>C语言回头看–诡异的i++和++i</h1><p>C语言中的<code>i++</code>和<code>++i</code>使用非常的方便，简单明了。但是很多人在学习C语言的过程中，对这两个语句还是存在恐惧，因为这两条语句会引起不必要的麻烦。例如：到底是先用再加，还是先加再用？ 同时在一些程序语句中也会出现一些令人意想不到的结果，例如<code>i=1,((++i)+(++i))=6</code>的情况，非常的诡异。</p>
<p>因此本文针对这个问题，深入到汇编层面，理解双胞胎i++和++i的故事。相信通过本文，你能够更加深刻的理解C语言中的自加自减等操作。</p>
<h2 id="例子介绍"><a href="#例子介绍" class="headerlink" title="例子介绍"></a>例子介绍</h2><h3 id="本文所用程序"><a href="#本文所用程序" class="headerlink" title="本文所用程序"></a>本文所用程序</h3><p>C语言文件如下所示，逻辑为：分别输出<code>i++</code>和<code>++i</code>的结果。</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">#include &lt;stdio.h&gt;

int main()&#123;
	int i &#x3D; 0;
	printf(&quot;i &#x3D; 0,++i &#x3D; %d\n&quot;, ++i);
	i &#x3D; 0;
	
	printf(&quot;i &#x3D; 0,i++ &#x3D; %d\n&quot;, i++);



	i &#x3D; 1;
	printf(&quot;i &#x3D; 1,(i++)+(++i) &#x3D; %d\n&quot;, (i++)+(++i));


	i &#x3D; 1;
	printf(&quot;i &#x3D; 1,(++i)+(i++) &#x3D; %d\n&quot;, (++i)+(i++));

	i &#x3D; 1;
	printf(&quot;i &#x3D; 1,(++i)+(++i) &#x3D; %d\n&quot;, (++i)+(++i));

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用<code>make</code>进行构建，<code>makefile</code>如下所示</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">OBJ<span class="token operator">=</span>selfincre

<span class="token symbol"><span class="token variable">$</span>(OBJ)</span><span class="token punctuation">:</span>
	g++ -Wall main.c -o <span class="token variable">$@</span>

<span class="token symbol">clean</span><span class="token punctuation">:</span>
	-rm -rf <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本机所用的环境如下所示：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Ubuntu 16.04 (64位，内核版本4.15.0-142-generic）
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)
make：GNU Make 4.1，Built for x86_64-pc-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>结果如下：</p>
<p><img src="/post/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E5%A4%B4%E7%9C%8B--%E5%8F%8C%E8%83%9E%E8%83%8Ei++%E5%92%8C++i%E7%9A%84%E6%95%85%E4%BA%8B/image-20210726110945317.png" alt="image-20210726110945317"></p>
<h2 id="汇编分析"><a href="#汇编分析" class="headerlink" title="汇编分析"></a>汇编分析</h2><p>在ubuntu中我们使用<code>objdump ~d ./selfincre &gt; objdump.txt</code>，将程序进行反汇编，我们将不重要的信息剔除，只保留<code>main</code>函数，如下所示，在部分汇编语句中进行了注释，可以结合‘餐食’。</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">
.&#x2F;selfincre:     file format elf64-x86-64

0000000000400526 &lt;main&gt;:
  400526:	55                   	push   %rbp
  400527:	48 89 e5             	mov    %rsp,%rbp
  40052a:	48 83 ec 10          	sub    $0x10,%rsp
  40052e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp) # -0x4(%rbp) 是局部变量i，本操作为赋值为0
  400535:	83 45 fc 01          	addl   $0x1,-0x4(%rbp) # i + 1
  400539:	8b 45 fc             	mov    -0x4(%rbp),%eax # 将i放入eax
  40053c:	89 c6                	mov    %eax,%esi				# 将eax复制给esi，作为printf的第一个参数
  40053e:	bf 04 06 40 00       	mov    $0x400604,%edi
  400543:	b8 00 00 00 00       	mov    $0x0,%eax
  400548:	e8 b3 fe ff ff       	callq  400400 &lt;printf@plt&gt;
  40054d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)	## -0x4(%rbp) 是局部变量i，本操作为赋值为0
  400554:	8b 45 fc             	mov    -0x4(%rbp),%eax	## i赋值给eax
  400557:	8d 50 01             	lea    0x1(%rax),%edx					## 取rax的值加一（注意：rax本身并没有+1)，并赋值给edx
  40055a:	89 55 fc             	mov    %edx,-0x4(%rbp)				## 将edx赋值给局部变量i
  40055d:	89 c6                	mov    %eax,%esi				## 注意这里的eax并没有进行+1操作，所以值自赋值为0后并未改变，作为printf的第一个参数
  40055f:	bf 0e 06 40 00       	mov    $0x40060e,%edi
  400564:	b8 00 00 00 00       	mov    $0x0,%eax
  400569:	e8 92 fe ff ff       	callq  400400 &lt;printf@plt&gt;
  40056e:	b8 00 00 00 00       	mov    $0x0,%eax
  400573:	c9                   	leaveq 
  400574:	c3                   	retq   
  400575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40057c:	00 00 00 
  40057f:	90                   	nop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="分析-i"><a href="#分析-i" class="headerlink" title="分析++i"></a>分析++i</h3><p>主要分析一下C代码</p>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">++i;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>汇编如下所示：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">40052e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp) # -0x4(%rbp) 是局部变量i，本操作为赋值为0
 400535:	83 45 fc 01          	addl   $0x1,-0x4(%rbp) # i + 1
 400539:	8b 45 fc             	mov    -0x4(%rbp),%eax # 将i放入eax
 40053c:	89 c6                	mov    %eax,%esi				# 将eax复制给esi，作为printf的第一个参数
 40053e:	bf 04 06 40 00       	mov    $0x400604,%edi
 400543:	b8 00 00 00 00       	mov    $0x0,%eax
 400548:	e8 b3 fe ff ff       	callq  400400 &lt;printf@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>++i正如字面的意思一样，先加后用！</strong></p>
<p>其加一汇编操作，均在<code>-0x4(%rbp)</code>进行，加一操作为<code>addl   $0x1,-0x4(%rbp)</code>，<strong>因此++i直接造成的结果就是i的改变。</strong></p>
<h3 id="分析i"><a href="#分析i" class="headerlink" title="分析i++"></a>分析i++</h3><p>C代码如下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">i<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>汇编如下所示：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">40054d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)	## -0x4(%rbp) 是局部变量i，本操作为赋值为0
400554:	8b 45 fc             	mov    -0x4(%rbp),%eax	## i赋值给eax
400557:	8d 50 01             	lea    0x1(%rax),%edx					## 取rax的值加一（注意：rax本身并没有+1)，并赋值给edx
40055a:	89 55 fc             	mov    %edx,-0x4(%rbp)				## 将edx赋值给局部变量i
40055d:	89 c6                	mov    %eax,%esi				## 注意这里的eax并没有进行+1操作，所以值自赋值为0后并未改变，作为printf的第一个参数
40055f:	bf 0e 06 40 00       	mov    $0x40060e,%edi
400564:	b8 00 00 00 00       	mov    $0x0,%eax
400569:	e8 92 fe ff ff       	callq  400400 &lt;printf@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>i++正如字面的意思一样，先用后加！</strong></p>
<p>其加一汇编操作，在寄存器<code>eax</code>的值的基础上进行，加一操作为<code>lea    0x1(%rax),%edx；mov    %edx,-0x4(%rbp)</code>。</p>
<p>我们可以如下理解i++， 拆分为两句：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">i<span class="token operator">++</span> 	<span class="token operator">--</span><span class="token operator">></span> 	i<span class="token punctuation">;</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>i++</code>相当于：先使用<code>i</code>，在对<code>i</code>进行加一操作。</p>
<ul>
<li><p>先使用i：操作为将i的值存储在eax以便在后面使用，<code>eax</code>代表了<code>i++</code>这条语句的结果</p>
</li>
<li><p>对i进行加一操作：<code>lea    0x1(%rax),%edx；mov    %edx,-0x4(%rbp)</code>，加一操作并不影响eax寄存器。</p>
</li>
</ul>
<p>因此<code>i++</code>的结果是<code>i</code>，使用的方法是<code>eax寄存器</code>。只不过在使用完<code>i</code>，会有一个加一的操作而已。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>++i，先加后用！</strong></p>
<p><strong>i++，先用后加！</strong></p>
<p>出现<code>i++</code>，<code>++i</code>这样语句的目的可能在于减少语句操作吧。通过上述字面理解，其实是最快的。</p>
<h2 id="i-i-x3D-6？？？"><a href="#i-i-x3D-6？？？" class="headerlink" title="(i++)+(++i)&#x3D;6？？？"></a>(i++)+(++i)&#x3D;6？？？</h2><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>使用如下代码进行分析</p>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">i &#x3D; 1;
printf(&quot;i &#x3D; 1,(i++)+(++i) &#x3D; %d\n&quot;, (i++)+(++i));


i &#x3D; 1;
printf(&quot;i &#x3D; 1,(++i)+(++i) &#x3D; %d\n&quot;, (++i)+(++i));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="分析-i-i"><a href="#分析-i-i" class="headerlink" title="分析(i++)+(++i)"></a>分析(i++)+(++i)</h3><p>首先我们先进行一个简单一些的分析，<code>i = 1;(i++)+(++i)</code> 的结果是多少呢？</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># (i++)+(++i)
# i &#x3D; 1
40056e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)		## -0x4(%rbp) 就是局部变量i，本操作为赋值为1,i &#x3D; 1
# i++
400575:	8b 45 fc             	mov    -0x4(%rbp),%eax		## eax &#x3D; i &#x3D; 1
400578:	8d 50 01             	lea    0x1(%rax),%edx			## 取rax的值加一，赋值给edx
40057b:	89 55 fc             	mov    %edx,-0x4(%rbp)		## i &#x3D; edx, 此时i &#x3D; 2
# ++i
40057e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)		## i+ 1 &#x3D; i,此时i &#x3D; 3
# $1 + $2
400582:	8b 55 fc             	mov    -0x4(%rbp),%edx		## i的值赋给edx，也就是3
400585:	01 d0                	add    %edx,%eax					## 执行eax + edx &#x3D; eax 也就是1 + 3 &#x3D; 4
400587:	89 c6                	mov    %eax,%esi					## eax赋给esi，作为printf的第一个参数，也就是4
400589:	bf 74 06 40 00       	mov    $0x400674,%edi
40058e:	b8 00 00 00 00       	mov    $0x0,%eax
400593:	e8 68 fe ff ff       	callq  400400 &lt;printf@plt&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过第二节的分析，我们知道，其实<code>(i++)+(++i) </code>的可以看做<code>(i_1 + (++i_2))</code>（<code>i_1</code>是因为此时<code>i_1</code>的值是eax的值，<code>i_1</code> 不等同于<code>i_2</code>，并不随<code>i</code>的值变化）， <del>再由C语言中表达式的计算是由右到左，所以会先计算<code>++i</code>，然后是</del>再相加。那么结果应该是1 + 2 &#x3D; 3。</p>
<p>但是，实际结果却是4.为什么呢？</p>
<p>原因就是在进行<code>++i</code>的时候，虽然后续用的是<code>eax</code>的值，但是这句话（第5行）随后进行的操作改变了<code>-0x4(%rbp)</code>的值（第6、7行）。其本意是<code>-0x4(%rbp)+1</code>，但是此时<code>-0x4(%rbp)</code>的值已经被<code>i++</code>修改过了，为2，所以<code>++i</code>的结果就成为了3。最终两式一加，结果为4.</p>
<h3 id="分析-i-i-1"><a href="#分析-i-i-1" class="headerlink" title="分析(++i)+(++i)"></a>分析(++i)+(++i)</h3><p>下面我们分析<code>(++i)+(++i) = 6？</code></p>
<p>汇编代码如下所示：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">
# (++i)+(++i)
# i &#x3D; 1
400598:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)		# -0x4(%rbp) &#x3D; i &#x3D; 1
#(++i)
40059f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)		# -0x4(%rbp) &#x3D; i &#x3D; 2
#(++i)
4005a3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)		# -0x4(%rbp) &#x3D; i &#x3D; 3
# $1 + $2
4005a7:	8b 45 fc             	mov    -0x4(%rbp),%eax		# -0x4(%rbp)赋值给eax， eax &#x3D; 3
4005aa:	01 c0                	add    %eax,%eax					# eax + eax &#x3D; 6
4005ac:	89 c6                	mov    %eax,%esi
4005ae:	bf 8c 06 40 00       	mov    $0x40068c,%edi
4005b3:	b8 00 00 00 00       	mov    $0x0,%eax
4005b8:	e8 43 fe ff ff       	callq  400400 &lt;printf@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>经过上一小节的分析，其实这里已经非常简单了，因为两次<code>++i</code>不断的改变<code>-0x4(%rbp)</code>的值，使得<code>-0x4(%rbp)</code>在使用时变成了3，最终两式相加为6.</p>
<h3 id="练手题目"><a href="#练手题目" class="headerlink" title="练手题目"></a>练手题目</h3><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">i &#x3D; 1;
printf(&quot;i &#x3D; 1,(++i)+(i++) &#x3D; %d\n&quot;, (++i)+(i++));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">400598:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
40059f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
4005a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
4005a6:	8d 50 01             	lea    0x1(%rax),%edx
4005a9:	89 55 fc             	mov    %edx,-0x4(%rbp)
4005ac:	8b 55 fc             	mov    -0x4(%rbp),%edx
4005af:	01 d0                	add    %edx,%eax
4005b1:	89 c6                	mov    %eax,%esi
4005b3:	bf ac 06 40 00       	mov    $0x4006ac,%edi
4005b8:	b8 00 00 00 00       	mov    $0x0,%eax
4005bd:	e8 3e fe ff ff       	callq  400400 &lt;printf@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>他的结果是5，通过上述分析，你算对了吗？</p>
<p>关键提示：</p>
<ul>
<li><del>C语言中运行由右至左，所以先算<code>i++</code>，再算<code>++i</code></del></li>
<li><code>i++</code>和<code>++i</code>的运算过程改变了<code>-0x4(%rbp)</code>的值，所以出现了非预期的结果。</li>
</ul>
<h2 id="未定义行为"><a href="#未定义行为" class="headerlink" title="未定义行为"></a>未定义行为</h2><p>虽然这有点复杂，感觉确定性非常的不高。但是不用担心，在C语言的编译过程中，会警告我们，这样的语句中i没有定义。如果你发现这样的问题后，就需要注意了。</p>
<p><img src="/post/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E5%A4%B4%E7%9C%8B--%E5%8F%8C%E8%83%9E%E8%83%8Ei++%E5%92%8C++i%E7%9A%84%E6%95%85%E4%BA%8B/image-20210726111037526.png" alt="image-20210726111037526"></p>
<p>下面文章中对这个问题进行了解释，不再赘述。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>i＝1，为什么 (++i)+(++i)＝6？ - CWKSC的回答 - 知乎 <a href="https://www.zhihu.com/question/347864795/answer/836263029">https://www.zhihu.com/question/347864795/answer/836263029</a></p></blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>从汇编角度理解++i和i++，可以更好的得出一些奇奇怪怪的语句的结果，让我们更好的理解C语言，理解编译器。</li>
<li>一定不建议写这样的语句！一定不建议写这样的语句！一定不建议写这样的语句！请用<code>i += 1</code>这样代替。多写一个字符而已。如果一定要写i++或++i，请将其单独为一个语句，不要进行组合！不要进行组合！不要进行组合！这样，你好我好大家好，不然当某一天你维护的代码出现灵异事件时，就只有祷告了。</li>
</ul>
<p>&#x3D;&#x3D;&#x3D;&#x3D;</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	d <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token operator">+</span> c <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">
0000000000400526 &lt;_Z1fv&gt;:
  400526:	55                   	push   %rbp
  400527:	48 89 e5             	mov    %rsp,%rbp
  40052a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  400531:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400534:	8d 50 01             	lea    0x1(%rax),%edx
  400537:	89 55 fc             	mov    %edx,-0x4(%rbp)
  40053a:	5d                   	pop    %rbp
  40053b:	c3                   	retq   

000000000040053c &lt;_Z1gv&gt;:
  40053c:	55                   	push   %rbp
  40053d:	48 89 e5             	mov    %rsp,%rbp
  400540:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  400547:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40054a:	8d 50 01             	lea    0x1(%rax),%edx
  40054d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  400550:	5d                   	pop    %rbp
  400551:	c3                   	retq   

0000000000400552 &lt;main&gt;:
  400552:	55                   	push   %rbp
  400553:	48 89 e5             	mov    %rsp,%rbp
  400556:	53                   	push   %rbx
  400557:	48 83 ec 28          	sub    $0x28,%rsp
  40055b:	e8 c6 ff ff ff       	callq  400526 &lt;_Z1fv&gt;		#f()
  400560:	89 c3                	mov    %eax,%ebx
  400562:	e8 d5 ff ff ff       	callq  40053c &lt;_Z1gv&gt;		#g()
  400567:	01 d8                	add    %ebx,%eax
  400569:	89 45 dc             	mov    %eax,-0x24(%rbp)
  40056c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40056f:	89 c6                	mov    %eax,%esi
  400571:	bf 74 06 40 00       	mov    $0x400674,%edi
  400576:	b8 00 00 00 00       	mov    $0x0,%eax
  40057b:	e8 80 fe ff ff       	callq  400400 &lt;printf@plt&gt;
  400580:	e8 a1 ff ff ff       	callq  400526 &lt;_Z1fv&gt;		#f()
  400585:	89 c3                	mov    %eax,%ebx
  400587:	e8 b0 ff ff ff       	callq  40053c &lt;_Z1gv&gt;		#g()
  40058c:	01 d8                	add    %ebx,%eax
  40058e:	89 c6                	mov    %eax,%esi
  400590:	bf 74 06 40 00       	mov    $0x400674,%edi
  400595:	b8 00 00 00 00       	mov    $0x0,%eax
  40059a:	e8 61 fe ff ff       	callq  400400 &lt;printf@plt&gt;
  40059f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp) #a
  4005a6:	c7 45 e4 02 00 00 00 	movl   $0x2,-0x1c(%rbp)	#b
  4005ad:	c7 45 e8 03 00 00 00 	movl   $0x3,-0x18(%rbp)	#c
  4005b4:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%rbp) #d
  4005bb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  4005be:	0f af 45 e4          	imul   -0x1c(%rbp),%eax # a * b
  4005c2:	8b 55 e8             	mov    -0x18(%rbp),%edx 
  4005c5:	01 d2                	add    %edx,%edx				# c + c &#x3D; c*2
  4005c7:	01 d0                	add    %edx,%eax				# 相加
  4005c9:	89 45 ec             	mov    %eax,-0x14(%rbp)
  4005cc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4005cf:	89 c6                	mov    %eax,%esi
  4005d1:	bf 74 06 40 00       	mov    $0x400674,%edi
  4005d6:	b8 00 00 00 00       	mov    $0x0,%eax
  4005db:	e8 20 fe ff ff       	callq  400400 &lt;printf@plt&gt;
  4005e0:	b8 00 00 00 00       	mov    $0x0,%eax
  4005e5:	48 83 c4 28          	add    $0x28,%rsp
  4005e9:	5b                   	pop    %rbx
  4005ea:	5d                   	pop    %rbp
  4005eb:	c3                   	retq   
  4005ec:	0f 1f 40 00          	nopl   0x0(%rax)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从汇编代码可以看出，实际上<code>f()+g()</code> 和<code>a * b + c *2</code>的顺序均为从左向右。</p>
<p>实际上，之前自己记忆中一直是以下这句：</p>
<ul>
<li><strong>复合赋值运算的优先级符合C语言运算符的优先级表，结合方向为从右到左。</strong> C语言中可以进行连续赋值,如a&#x3D;b&#x3D;c&#x3D;1,“&#x3D;”运算符是从右至左结合</li>
<li><strong>函数参数：</strong>主要是函数参数入栈的方式造成有，入栈从右向左，运算也就从右向左。 i&#x3D;1; printf(“%d%d”,i,i++);&#x2F;&#x2F;输出2 1</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>C语言回头看</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>IT、制造业和医疗卫生部门成为网络攻击的重点目标</title>
    <url>//post/IT%E3%80%81%E5%88%B6%E9%80%A0%E4%B8%9A%E5%92%8C%E5%8C%BB%E7%96%97%E5%8D%AB%E7%94%9F%E9%83%A8%E9%97%A8%E6%88%90%E4%B8%BA%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E7%9A%84%E9%87%8D%E7%82%B9%E7%9B%AE%E6%A0%87.html</url>
    <content><![CDATA[<h1 id="IT、制造业和医疗卫生部门成为网络攻击的重点目标"><a href="#IT、制造业和医疗卫生部门成为网络攻击的重点目标" class="headerlink" title="IT、制造业和医疗卫生部门成为网络攻击的重点目标"></a>IT、制造业和医疗卫生部门成为网络攻击的重点目标</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/shutterstock_178125287.jpg" alt="IT, Manufacturing, and Healthcare Sectors Need to Stay Away from Cyberattacks"></p>
<p>医疗保健和制造业受到主动的网络攻击，这已经不是什么秘密。威胁形势已经发生了巨大的变化，而且事情正在变得越来越糟糕。除了这两个行业，IT行业也已成为网络攻击的最主要目标之一。</p>
<h2 id="一些统计数字"><a href="#一些统计数字" class="headerlink" title="一些统计数字"></a>一些统计数字</h2><p>Avanan公司最近的一份报告对今年上半年的网络攻击趋势作了说明。</p>
<ul>
<li>IT行业的公司见证了9000多封钓鱼邮件，其次是医疗保健和制造业，每10,000名用户每30天大约有6000封钓鱼邮件。</li>
<li>在所有网络钓鱼攻击中，凭证收集占54%，BEC攻击占20.7%，敲诈占2.2%。</li>
<li>黑客已经开始瞄准非行政人员，而不是C级行政人员，占据了77%的份额。</li>
</ul>
<h2 id="为什么这很重要？"><a href="#为什么这很重要？" class="headerlink" title="为什么这很重要？"></a>为什么这很重要？</h2><p>当医疗机构受到勒索软件攻击者的攻击，制造业公司不断遭受供应链中断的影响时，黑客已经诉诸于最基本的战术–钓鱼邮件来进行未经授权的访问。这些行业非常容易受到网络攻击，因为它们管理着有价值的信息，而这些信息在暗网市场上需求很大。此外，设施设备仍然使用过时的技术，再加上缺乏适当的员工培训和基本的网络安全防护知识，使这些部门被攻击者盯上。</p>
<h2 id="底线"><a href="#底线" class="headerlink" title="底线"></a>底线</h2><p>现在，我们已经意识到网络犯罪分子为实现其邪恶的意图会不惜一切代价。诸如网络钓鱼和社会工程等经久不衰的方法，以及诸如供应链攻击等独特而复杂的方法，都被用来获得对未受保护或保护不力的系统的访问。如果没有适当的防御措施，这些部门将继续成为网络攻击的目标。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux下从汇编手撕c++-值传递和引用传递e</title>
    <url>//post/Linux%E4%B8%8B%E6%89%8B%E6%92%95c++-%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92.html</url>
    <content><![CDATA[<h1 id="Linux下从汇编手撕c-值传递和引用传递"><a href="#Linux下从汇编手撕c-值传递和引用传递" class="headerlink" title="Linux下从汇编手撕c++-值传递和引用传递"></a>Linux下从汇编手撕c++-值传递和引用传递</h1><h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p><code>main.c</code></p>
<p>主要分为两个部分，每个部分使用一个display函数，函数内使得传入的参数自加1，然后打印到标准输出上。不同的地方在于，display1使用了值传递，display2使用了引用传递</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;

void display1(int num)&#123; &#x2F;&#x2F;int num，属于值传递
	num++;
	printf(&quot;display1: %d\n&quot;, num);
&#125;

void display2(int &amp; num)&#123; &#x2F;&#x2F;int &amp; num ，属于引用传递
	num++;
	printf(&quot;display2: %d\n&quot;, num);
&#125;

int main()&#123;
	int num1 &#x3D; 0, num2 &#x3D; 0;
	display1(num1);
	printf(&quot;num1:%d\n&quot;, num1);
	printf(&quot;--------------------\n&quot;);
	display2(num2);
	printf(&quot;num2:%d\n&quot;, num2);
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>makefile</code></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OBJ&#x3D;reference

$(OBJ):
	g++ main.c -o $@

clean:
	-rm -rf $(OBJ)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在ubuntu中使用<code>make</code>命令进行编译并运行，结果如下图所示。</p>
<p><img src="/post/Linux%E4%B8%8B%E6%89%8B%E6%92%95c++-%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/image-20210724002053895.png" alt="image-20210724002053895"></p>
<p>通过上述结果我们可以看出，虽然仅仅一个<code>&amp;</code>符号的差异，但通过参数传递和通过值传递获得的<strong>结果不一样</strong>。</p>
<ul>
<li><p>值传递中的num虽然进行了自加操作(输出display:1可以看出)，但是<strong>并没有影响</strong>到main函数中的num1（num1:0可以看出)</p>
</li>
<li><p>但是引用传递中的num进行了自加1(输出display:1可以看出)，并且<strong>影响到</strong>了main函数中的num2(num2:1可以看出).</p>
</li>
</ul>
<h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>是什么原因造成了仅仅一个<code>&amp;</code>符号的差异，导致函数内值传递和引用传递的差别呢？</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><code>objdump -d ./reference &gt; objdump.txt</code></p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">
.&#x2F;reference:     file format elf64-x86-64

00000000004005d6 &lt;_Z8display1i&gt;:
  4005d6:	55                   	push   %rbp
  4005d7:	48 89 e5             	mov    %rsp,%rbp
  4005da:	48 83 ec 10          	sub    $0x10,%rsp
  4005de:	89 7d fc             	mov    %edi,-0x4(%rbp) #将值取出到%rbp-0x4
  4005e1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)	# +1运算
  4005e5:	8b 45 fc             	mov    -0x4(%rbp),%eax	#写回%rbp-0x4, 仍然是局部变量，生命周期在函数内
  4005e8:	89 c6                	mov    %eax,%esi
  4005ea:	bf 44 07 40 00       	mov    $0x400744,%edi
  4005ef:	b8 00 00 00 00       	mov    $0x0,%eax
  4005f4:	e8 b7 fe ff ff       	callq  4004b0 &lt;printf@plt&gt;
  4005f9:	90                   	nop
  4005fa:	c9                   	leaveq 
  4005fb:	c3                   	retq   

00000000004005fc &lt;_Z8display2Ri&gt;:
  4005fc:	55                   	push   %rbp
  4005fd:	48 89 e5             	mov    %rsp,%rbp
  400600:	48 83 ec 10          	sub    $0x10,%rsp
  400604:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)#将值取出到%rbp-0x8， 注意此时%rdi为地址
  400608:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40060c:	8b 00                	mov    (%rax),%eax
  40060e:	8d 50 01             	lea    0x1(%rax),%edx  #加一
  400611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400615:	89 10                	mov    %edx,(%rax) # 将结果放入原地址所指的内存当中，
  400617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40061b:	8b 00                	mov    (%rax),%eax
  40061d:	89 c6                	mov    %eax,%esi
  40061f:	bf 52 07 40 00       	mov    $0x400752,%edi
  400624:	b8 00 00 00 00       	mov    $0x0,%eax
  400629:	e8 82 fe ff ff       	callq  4004b0 &lt;printf@plt&gt;
  40062e:	90                   	nop
  40062f:	c9                   	leaveq 
  400630:	c3                   	retq   

0000000000400631 &lt;main&gt;:
  400631:	55                   	push   %rbp
  400632:	48 89 e5             	mov    %rsp,%rbp
  400635:	48 83 ec 10          	sub    $0x10,%rsp
  400639:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400640:	00 00 
  400642:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400646:	31 c0                	xor    %eax,%eax
  400648:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40064f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  400656:	8b 45 f4             	mov    -0xc(%rbp),%eax # 将%rbp-0xc的值放入%eax，相当于复制了一份
  400659:	89 c7                	mov    %eax,%edi
  40065b:	e8 76 ff ff ff       	callq  4005d6 &lt;_Z8display1i&gt;
  400660:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400663:	89 c6                	mov    %eax,%esi
  400665:	bf 60 07 40 00       	mov    $0x400760,%edi
  40066a:	b8 00 00 00 00       	mov    $0x0,%eax
  40066f:	e8 3c fe ff ff       	callq  4004b0 &lt;printf@plt&gt;
  400674:	bf 69 07 40 00       	mov    $0x400769,%edi
  400679:	e8 12 fe ff ff       	callq  400490 &lt;puts@plt&gt;
  40067e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax # 将%rbp-0xc的地址放入%eax，想到与对原地址进行操作
  400682:	48 89 c7             	mov    %rax,%rdi
  400685:	e8 72 ff ff ff       	callq  4005fc &lt;_Z8display2Ri&gt;
  40068a:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40068d:	89 c6                	mov    %eax,%esi
  40068f:	bf 7e 07 40 00       	mov    $0x40077e,%edi
  400694:	b8 00 00 00 00       	mov    $0x0,%eax
  400699:	e8 12 fe ff ff       	callq  4004b0 &lt;printf@plt&gt;
  40069e:	b8 00 00 00 00       	mov    $0x0,%eax
  4006a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4006a7:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4006ae:	00 00 
  4006b0:	74 05                	je     4006b7 &lt;main+0x86&gt;
  4006b2:	e8 e9 fd ff ff       	callq  4004a0 &lt;__stack_chk_fail@plt&gt;
  4006b7:	c9                   	leaveq 
  4006b8:	c3                   	retq   
  4006b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>通过上述汇编代码（相关关键步骤已经使用注释进行了说明）。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">display1(num1);
display2(num2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">400656:	8b 45 f4             	mov    -0xc(%rbp),%eax # 注意mov操作！！将%rbp-0xc的值（也就是局部变量num1）放入%eax，相当于复制了一份
400659:	89 c7                	mov    %eax,%edi
40065b:	e8 76 ff ff ff       	callq  4005d6 &lt;_Z8display1i&gt;  

40067e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax # 注意lea 操作！！将%rbp-0xc（也就是局部变量num2）的地址放入%eax，想当于对原地址进行操作
400682:	48 89 c7             	mov    %rax,%rdi
400685:	e8 72 ff ff ff       	callq  4005fc &lt;_Z8display2Ri&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看出：</p>
<ul>
<li><p>对于值传递，使用<code>mov</code>指令，相当于<strong>复制</strong>了一份；</p>
</li>
<li><p>对于引用，使用<code>lea</code>指令，得到了地址，随后的操作都在<strong>地址上</strong>进行，相当于直接对该地址的数进行操作。</p>
</li>
</ul>
<p>因此，我们知道，虽然传递的都是传递的一个变量名，但display1使用的值传递，display2使用的是引用传递：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">display1(num1);&#x2F;&#x2F;虽然进行了自加1，但是是对num1的副本进行的操作，作用范围在display函数内
display2(num2);&#x2F;&#x2F;使用引用传递，相当于指针操作，作用范围在main函数当中。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><p>当使用值传递时，在函数内对参数的操作，参数作用范围只在函数内，跳出函数后该是啥还是啥，在原函数(这里是main)里就是进入函数前的状态。因为值传递方式，在函数中只改变的是值的副本。</p>
</li>
<li><p>在使用引用传递时，引用的本质使用的是指针。因此在函数中的操作，都会直接作用于该地址的值。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过对值传递和引用传递的汇编代码的分析，我们清晰的看出值传递本是上是传递了一个原值的副本，其变化并不影响调用函数的值；引用传递的本质是指针，其变化，直接作用于调用函数的值。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C语言回头看</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT学习笔记</title>
    <url>//post/MQTT%E5%8D%8F%E8%AE%AE.html</url>
    <content><![CDATA[<p>大家好，我是明说网络的小明同学。今天我们来聊一聊物联网通协议MQTT。</p>
<h2 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h2><p>消息队列最原始的模型：生产者先将消息投递一个叫做「队列」的容器中，然后再从这个容器中取出消息，最后再转发给消费者</p>
<p><img src="https://pic2.zhimg.com/80/v2-c38c2609bee9a1f9a638a38ef503d604_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="消息队列有什么优势呢？"><a href="#消息队列有什么优势呢？" class="headerlink" title="消息队列有什么优势呢？"></a>消息队列有什么优势呢？</h3><p>MQ 解决的最核心的问题：系统解耦和异步：</p>
<p><img src="https://pic3.zhimg.com/80/v2-b0b81fcf533970cd71d23a85ec266e5b_720w.jpg?source=1940ef5c" alt="img"></p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>参考：<a href="https://www.zhihu.com/question/54152397">https://www.zhihu.com/question/54152397</a></p></blockquote>
<h3 id="从MQ的角度去理解MQTT"><a href="#从MQ的角度去理解MQTT" class="headerlink" title="从MQ的角度去理解MQTT"></a>从MQ的角度去理解MQTT</h3><p><strong>而MQTT是专门针对物联网设计的消息队列</strong>！实际上使用的是MQ其中的<strong>发布&#x2F;订阅模式</strong></p>
<p><img src="https://images2018.cnblogs.com/blog/1355489/201808/1355489-20180823155237825-1191723728.png" alt="img"></p>
<h2 id="MQTT简介"><a href="#MQTT简介" class="headerlink" title="MQTT简介"></a>MQTT简介</h2><p>随着 5G 时代的来临，万物互联的伟大构想正在成为现实。海量的设备接入和设备管理对网络带宽、通信协议以及平台服务架构都带来了很大挑战。尤其对于物联网设备来说，电量消耗，资源控制等都尤为重要。在此背景下MQTT应运而生。</p>
<p><img src="https://pic3.zhimg.com/v2-55ba5fc5be6df6ec686e9d149e24fc6b_1440w.jpg?source=172ae18b" alt="物联网MQTT协议简易入门教程"></p>
<p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布&#x2F;订阅（publish&#x2F;subscribe）模式的”轻量级”通讯协议，该协议构建于TCP&#x2F;IP协议上，由IBM在1999年发布（由 IBM 的 Andy Stanford-Clark 和 Arcom 的 Arlen Nipper 为了一个通过卫星网络连接输油管道的项目开发，之后 IBM 一直将 MQTT 作为一个内部协议在其产品中使用，直到 2010 年，IBM 公开发布了 MQTT 3.1 版本。在 2014 年，MQTT 协议正式成为了 OASIS（结构化信息标准促进组织）的标准协议，<a href="https://zhuanlan.zhihu.com/p/79455828">来源</a>）。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。MQTT 3 （当前版本3.1.1）是目前使用的最为广泛的 MQTT 协议标准。</p>
<h3 id="为什么选择MQTT"><a href="#为什么选择MQTT" class="headerlink" title="为什么选择MQTT"></a>为什么选择MQTT</h3><p>它的设计思想是轻巧、开放、简单、规范，易于实现。这些特点使得它对很多场景来说都是很好的选择，特别是对于受限的环境如机器与机器的通信（M2M）以及物联网环境（IoT）。</p>
<p><img src="/post/MQTT%E5%8D%8F%E8%AE%AE/image-20210721090551290.png" alt="image-20210721090551290"></p>
<h3 id="MQTT的应用场景"><a href="#MQTT的应用场景" class="headerlink" title="MQTT的应用场景"></a>MQTT的应用场景</h3><p>MQTT 协议广泛应用于物联网、移动互联网、智能硬件、车联网、电力、能源等领域。</p>
<p><img src="/post/MQTT%E5%8D%8F%E8%AE%AE/image-20210721090656372.png" alt="image-20210721090656372"></p>
<h3 id="相关参考资料"><a href="#相关参考资料" class="headerlink" title="相关参考资料"></a>相关参考资料</h3><p><a href="https://www.emqx.cn/mqtt">https://www.emqx.cn/mqtt</a></p>
<p><a href="https://www.runoob.com/w3cnote/mqtt-intro.html">https://www.runoob.com/w3cnote/mqtt-intro.html</a></p>
<p><a href="https://www.jianshu.com/p/ecde412d2eeb">https://www.jianshu.com/p/ecde412d2eeb</a></p>
<p>MQTT协议中文版，<a href="https://mcxiaoke.gitbooks.io/mqtt-cn/content/">https://mcxiaoke.gitbooks.io/mqtt-cn/content/</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/158145940">https://zhuanlan.zhihu.com/p/158145940</a></p>
<h2 id="MQTT通信模型"><a href="#MQTT通信模型" class="headerlink" title="MQTT通信模型"></a>MQTT通信模型</h2><p>有别于传统的客户端&#x2F;服务器通讯协议，MQTT协议并不是端到端的，消息传递通过代理，包括会话（session）也不是建立在发布者和订阅者之间，而是建立在端和代理之间。代理解除了发布者和订阅者之间的耦合。这对理解MQTT很重要</p>
<p>通过下面两个图理解MQTT</p>
<p><img src="https://pic1.zhimg.com/v2-1c26fc1a94a6fe3da6982d7e699c5ce8_r.jpg" alt="preview"></p>
<p><img src="/post/MQTT%E5%8D%8F%E8%AE%AE/mqtt-fidge-2.svg" alt="img"></p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>在MQTT中，有三个主要的角色：</p>
<ul>
<li>发布者（Publish）：类似于报纸发布者</li>
<li>代理（Broker）（服务器）：MQTT服务器以称为”消息代理”（Broker），可以是一个应用程序或一台设备。它是位于消息发布者和订阅者之间。类似于以前的报刊亭，会有很多人向报亭发布报纸，报停会更具不同的订阅分发报纸。</li>
<li>订阅者（Subscribe）：类似于报纸订阅者。</li>
</ul>
<p>需要注意的是，这里的发布者和订阅者并不是绝对的。发布者可以变成订阅者，订阅者也可以变成发布者，甚至是同一台设备既可以是发布者也可以是订阅者，甚至是broker。这是与现实中报亭的例子有些区别的地方，人们可以订报纸，同时还能发报纸，甚至是自己给自己卖报纸！</p>
<h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>这三个角色之间通过消息进行通信：MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p>
<ul>
<li><p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）</p>
<ul>
<li>连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。一个主题可以有多个级别，级别之间用斜杠字符分隔。例如，<code>/world</code> 和 <code>emq/emqtt/emqx</code> 是有效的主题。订阅者的Topic name支持通配符<code>#</code>和<code>+</code> ：<ul>
<li># 支持一个主题内任意级别话题</li>
<li>+只匹配一个主题级别的通配符</li>
</ul>
</li>
</ul>
</li>
<li><p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p>
<ul>
<li><p>Payload&#96;消息体</p>
<p>&#96;CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE四种类型的消息 有消息体：</p>
<ul>
<li><code>CONNECT</code>，消息体内容主要是：客户端的ClientID、订阅的Topic、Message以及用户名和密码</li>
<li><code>SUBSCRIBE</code>，消息体内容是一系列的要订阅的主题以及<code>QoS</code>。</li>
<li><code>SUBACK</code>，消息体内容是服务器对于<code>SUBSCRIBE</code>所申请的主题及<code>QoS</code>进行确认和回复。</li>
<li><code>UNSUBSCRIBE</code>，消息体内容是要订阅的主题。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="mosquitto使用"><a href="#mosquitto使用" class="headerlink" title="mosquitto使用"></a>mosquitto使用</h2><p>Mosquitto是一个实现了MQTT3.1协议的代理服务器，由MQTT协议创始人之一的Andy Stanford-Clark开发</p>
<p>学习网址：</p>
<p>libmosquitto编程：<a href="https://blog.csdn.net/dancer__sky/article/details/77855249">https://blog.csdn.net/dancer__sky/article/details/77855249</a></p>
<p> <a href="https://www.cnblogs.com/chen1-kerr/p/7258487.html">MQTT的学习之Mosquitto安装&amp;使用</a></p>
<p>MQTT服务端软件使用：<a href="https://zhuanlan.zhihu.com/p/56727359">https://zhuanlan.zhihu.com/p/56727359</a></p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>MQTT安全篇：为何以及如何运用MQTT提供的安全特性来保证物联网项目的顺利实施 <a href="https://zhuanlan.zhihu.com/p/21421094">https://zhuanlan.zhihu.com/p/21421094</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>物联网</tag>
        <tag>协议</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Unit 8200 世界上最强的网络部队之一</title>
    <url>//post/Unit%208200%20%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%BC%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%83%A8%E9%98%9F%E4%B9%8B%E4%B8%80.html</url>
    <content><![CDATA[<h1 id="Unit-8200-世界上最强的网络部队之一"><a href="#Unit-8200-世界上最强的网络部队之一" class="headerlink" title="Unit 8200 世界上最强的网络部队之一"></a>Unit 8200 世界上最强的网络部队之一</h1><h2 id="神秘的Unit-8200"><a href="#神秘的Unit-8200" class="headerlink" title="神秘的Unit 8200"></a>神秘的Unit 8200</h2><p>2014年，以色列出口的网络安全产品（即公司、银行和政府购买使自己免受黑客、病毒攻击的产品）总值达60亿美金，首次超越了以色列军事硬件的出口值，占领了全球10%的网络安全市场。2014-2016年，微软用3.2亿美元买下数据隐私公司Adallom；Facebook花了1.5亿美元收购移动端数据分析公司Onavo；PayPal以6千万美元收下CyActive, 一家能预判黑客进攻行为的公司；谷歌更是斥11亿美元收购Waze ，一款通过众包形式更新地图数据的导航应用</p>
<p><strong>而这些被高价收购的公司都有一个共同点：初创者均为以色列国防军（IDF，Israel Defense Forces）下属部队Unit 8200的退伍士兵。</strong></p>
<p>不仅如此，Unit 8200还盛产纳斯达克上市公司：Wix（WIX），目前世界上领先的建立在云架构基础上的网页开发平台；CheckPoint（CHKP）， 全球首屈一指的 Internet 安全解决方案供应商；Imperva（IMPV）, 全球领先的新型数据应用公司，提供数据库安全和审计解决方案；NICE（NICE），企业级安全解决方案公司； 卫星应用企业Gilat Network（GILT）</p>
<p><strong>被称为创业之国的以色列，是平均出产科学家、技术大拿、风投机构最多的国家，这其中 Unit 8200是个绕不过去的存在。</strong></p>
<h2 id="Unit-8200历史沿革"><a href="#Unit-8200历史沿革" class="headerlink" title="Unit 8200历史沿革"></a>Unit 8200历史沿革</h2><p><img src="https://th.bing.com/th/id/R3310ad320151d0dfdc1b035c822d5821?rik=6XHVm7zqDM4MZw&riu=http://s3.amazonaws.com/zweb-s3.uploads/visiontv/2017/04/21152853/Unit8200_Website_600.jpg&ehk=B3HZyvIE/+EfiwTJ8YDtVAjaQk8h6E4dlJ217jy7kh8=&risl=&pid=ImgRaw"></p>
<p><em>Unit 8200 是以色列情报部队的一部分，以培养世界上一些受欢迎的网络安全公司的创始人而闻名。</em></p>
<p>它的前身始于20世纪30年代的英国托管时期（British Mandate Period）, 最开始被称为“Shin Mem 2”，即希伯来语的“第二信息服务部门”, 负责窃听阿拉伯部落的电话线，提前获取暴动的消息。</p>
<p>1948年以色列建国时，它被称为515部队，这个随意想出来的数字为的是在公开谈话中无需特意避讳。1952年，它正式成为单独的情报部门，1956年，第二次中东战争时，它又变成848部队。 1973年第四次中东战争后， 改名为Unit 8200，沿用至今。</p>
<p>根据一些情报专家的分析，Unit 8200可以与美国国家安全局 （NSA，National Security Agency）或英国政府通讯总部（ GCHQ，Britain’s Government Communications Headquarters）相提并论，在某些领域甚至更强。它负责综合协调军队的情报工作，以色列之外的所有地区都属于它的势力范围（包括巴勒斯坦）。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>Unit 8200参与过的行动：</p>
<blockquote>
<p>1967年，“8200部队”获得了当年最成功的情报——在“<a href="https://baike.baidu.com/item/%E5%85%AD%E6%97%A5%E6%88%98%E4%BA%89">六日战争</a>”的第一天，就成功截获埃及总统<a href="https://baike.baidu.com/item/%E7%BA%B3%E8%B5%9B%E5%B0%94">纳赛尔</a>和约旦国王<a href="https://baike.baidu.com/item/%E4%BE%AF%E8%B5%9B%E5%9B%A0">侯赛因</a>的高保密专线电话，从而详尽地了解己方战果以及敌方下一步计划。</p>
<p>1985年，Unit 8200提供了一份电话监听记录，证实了阿拉法特与1973年发生在苏丹的美外交官被劫、被杀事件有关；</p>
<p>2007年，根据Unit 8200提供的情报，以色列炸掉了一个叙利亚核反应堆；</p>
<p>2010年，伊朗核反应堆中了Stuxnet电脑病毒， 五分之一的离心器被摧毁，伊朗拥有核武器的时间因此延迟了好几年，而“据说”这是Unit 8200和CIA联手的成果（IDF拒不承认）</p>
<p>相关资料：<a href="http://paranoidechochamber.com/unit-8200/">http://paranoidechochamber.com/unit-8200/</a></p>
<p><img src="http://paranoidechochamber.com/wp-content/uploads/2017/05/download-8.jpeg"></p></blockquote>
</blockquote>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>根据以色列国防军的序列</p>
<p><img src="https://s.secrss.com/anquanneican/875e8cb619cc40f44518b7cf0d7a136a.jpg"></p>
<p>8200部队隶属于以色列国防军军事情报部(简写：AMAN，而AMAN隶属于国防军总参谋部)的。</p>
<h2 id="Unit8200组成序列（补充）"><a href="#Unit8200组成序列（补充）" class="headerlink" title="Unit8200组成序列（补充）"></a>Unit8200组成序列（补充）</h2><ul>
<li><p>Unit Hatzav</p>
<p>开源情报部队，主要面向全世界的媒体：电视，广播，新闻报纸，Internet，甚至是社交网络。</p>
</li>
<li><p>Unit81</p>
<p>AMAN 的技术部队，主要是搜集和支持最先进的技术（通常结合软硬件产品），大约有1000人。</p>
</li>
<li><p>Gedasim</p>
<p>信息作战团。主要是实时获取地面情报并实时传输战场。</p>
</li>
</ul>
<h2 id="以色列人才孵化器"><a href="#以色列人才孵化器" class="headerlink" title="以色列人才孵化器"></a>以色列人才孵化器</h2><p>以色列最优秀的人才集中在部队。军事部门可以直接对优秀的高中毕业生选召，如果能被8200部队选上，对犹太人来讲，则是一生的荣誉。</p>
<p>以色列强制兵役规定，犹太人满18岁需服兵役。一般情况下，他们会被随机分配到不同的部队。但一批天资聪颖，最具培养前途的孩子则被Unit 8200经过严格筛选后挑走。这是一支专攻网络安全及情报收集的秘密部队，是顶尖的以色列高科技情报部门。当然8200部队选拔过程极其严格，每年挑选50-100人。同龄人中智力水平最高，最有培养前途，品格正直敢于承担责任的那些人才有可能被安排进入代表以色列最高水平的高科技情报部门在实战中学习与服役。进入Unit 8200后，这些大部分刚满18岁的孩子马上就被投入实战，边服役边学习。<em>加入该单位的年轻人会接触到真实的计算机黑客和网络间谍活动任务</em>。服役完毕后，他们可以选择加入高科技公司，也可以选择继续深造。</p>
<p>目前，Unit 8200集情报部门、人才训练营、科技孵化器为一体，是以色列国防军中最大且发展速度最快的部门，据估有5000人。每时每刻，它都处理着海量电子数据，数据来源包括移动端、网络、微波信号发生器和卫星。以色列国防军中最重要的信号情报（signals intelligence, SIGINT）部门Urim SIGINIT Base也是Unit 8200的一部分。</p>
<p>美国《福布斯》报道说，以色列的高科技领域的精英大多来自神秘的8200部队。这些人要么是企业家，要么是公司的创立人或者是中高级主管。以色列的三大高科技公司Nice、Comverse和Check Point的很多技术都来自这个神秘的8200部队。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>Unit 8200: How NSA of Israel Has One Of The Most Powerful Cyber Armies In The World，<a href="https://fossbytes.com/unit-8200-israel-cyber-army/">https://fossbytes.com/unit-8200-israel-cyber-army/</a></p>
<p><a href="https://www.sohu.com/a/119924768_464003">https://www.sohu.com/a/119924768_464003</a></p>
<p>The Israeli Unit 8200 An OSINT-based study，<a href="https://www.research-collection.ethz.ch/handle/20.500.11850/389135">https://www.research-collection.ethz.ch/handle/20.500.11850/389135</a></p>
<p>以色列网电空间作战力量浅析, <a href="https://www.secrss.com/articles/29670">https://www.secrss.com/articles/29670</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>网络战</category>
      </categories>
      <tags>
        <tag>网络空间</tag>
      </tags>
  </entry>
  <entry>
    <title>Watering Hole Attack 水坑攻击</title>
    <url>//post/Watering%20Hole%20Attack%20%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB.html</url>
    <content><![CDATA[<h1 id="Watering-Hole-Attack-水坑攻击"><a href="#Watering-Hole-Attack-水坑攻击" class="headerlink" title="Watering Hole Attack 水坑攻击"></a>Watering Hole Attack 水坑攻击</h1><p><img src="https://mlv4zfjisxd7.i.optimole.com/2lVZDuw-V-hqZl6Z/w:auto/h:auto/q:90/https://freelearningtech.in/wp-content/uploads/2020/01/watering-hole-attacks.png"></p>
<h2 id="什么是水坑攻击"><a href="#什么是水坑攻击" class="headerlink" title="什么是水坑攻击"></a>什么是水坑攻击</h2><p>水坑攻击时一种看似简单但成功率较高的网络攻击方式。攻击目标多为特定的团体（组织、行业、地区等）。攻击者首先通过猜测（或观察）确定这组目标经常访问的网站，然后入侵其中一个或多个网站，植入恶意软件。在目标访问该网站时，会被重定向到恶意网址或触发恶意软件执行，导致该组目标中部分成员甚至全部成员被感染。按照这个思路，水坑攻击其实也可以算是鱼叉式钓鱼的一种延伸。</p>
<p><img src="https://mk0cybersecuritxhwmn.kinstacdn.com/wp-content/uploads/2020/02/Watering-Hole-Attack.jpg" alt="查看源图像"></p>
<p><img src="https://blog.authentic8.com/content/images/2019/03/watering-hole-attack-infographic-GoldPhish.jpg" alt="img"></p>
<p>早在 2012 年，国外就有研究人员提出了“水坑攻击”的概念。这种攻击方式的命名受狮子等猛兽的狩猎方式启发。在捕猎时，狮子并不总是会主动出击，他们有时会埋伏水坑边上，等目标路过水坑停下来喝水的时候，就抓住时机展开攻击。这样的攻击成功率就很高，因为目标总是要到水坑“喝水”的。</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170823/283a4924a17b4a66a5023a9d7cfd578d.jpeg"></p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>水坑攻击主要呈现出两个特征：</p>
<ol>
<li><p>多属于 APT 攻击，目标多为是大型、重要企业的员工或网站；</p>
</li>
<li><p>多利用 0-day 漏洞。</p>
</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>水坑攻击的案例不时会有出现。2012 年底，美国外交关系委员会的网站遭遇水坑攻击；2013 年初，苹果、微软、纽约时报、Facebook、Twitter 等知名大流量网站也相继中招。国内网站也难以幸免：2013 年，西藏政府网站遭遇水坑攻击；2015 年，百度、阿里等国内知名网站也因为 JSONP 漏洞而遭受水坑攻击。</p>
<h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>针对这类攻击，重要的一点也是对用户进行教育，让他们意识到这类攻击及其危害性，遇到点击链接的要求时越谨慎越好。其次企业组织本身也要提高警惕，采取更高级的手段检测并对抗攻击。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.sohu.com/a/166589989_472906">https://www.sohu.com/a/166589989_472906</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>科普</category>
      </categories>
      <tags>
        <tag>Attack</tag>
      </tags>
  </entry>
  <entry>
    <title>网络电子身份标识(eID) -你的网络空间身份证</title>
    <url>//post/eID%20%E6%95%B0%E5%AD%97%E8%BA%AB%E4%BB%BD%E4%BD%93%E7%B3%BB.html</url>
    <content><![CDATA[<h1 id="网络电子身份标识-eID-你的网络空间身份证"><a href="#网络电子身份标识-eID-你的网络空间身份证" class="headerlink" title="网络电子身份标识(eID) -你的网络空间身份证"></a>网络电子身份标识(eID) -你的网络空间身份证</h1><p>在现实世界中，你的唯一身份由身份证标识。那么网络空间中呢？一起来看看吧</p>
<h2 id="什么是身份标识"><a href="#什么是身份标识" class="headerlink" title="什么是身份标识"></a>什么是身份标识</h2><p>在物理世界中，《居民身份证法》的规定 ，“公民身份号码是每个公民唯一的、终身不变的身份代 码，由公安机关按照公民身份号码国家标准编制。”</p>
<h2 id="什么是网络电子身份标识eID"><a href="#什么是网络电子身份标识eID" class="headerlink" title="什么是网络电子身份标识eID"></a>什么是网络电子身份标识eID</h2><p>数字身份是实体社会中的自然人身份在数字空间的映射。在网络空间，数字身份同样具有唯一性特征，其作用是要在一定范围内识别某 一主体，使之与其他主体区分开来。</p>
<p>国际上，eID通常是由政府颁发给公民用于线上和线下识别身份的证件。欧盟多个国家已经颁发了eID来替代传统的身份证件，使eID既具备了线下身份识别的功能，又具备了网络远程身份识别功能。目前已经发行eID的国家有德国、法国、西班牙、意大利、俄罗斯、比利时、爱沙尼亚、奥地利、丹麦、芬兰、葡萄牙、斯洛文尼亚、立陶宛、马耳他、卢森堡、荷兰、瑞典、冰岛、阿联酋以及我国香港特别行政区等。其中，德国、西班牙、意大利、比利时、爱沙尼亚和奥地利已经普及，广泛用于电子政务、电子商务、社交网络等各个领域。</p>
<p><img src="https://eid.cn/images/whatiseid/6.png"></p>
<h2 id="为什么需要数字身份证"><a href="#为什么需要数字身份证" class="headerlink" title="为什么需要数字身份证"></a>为什么需要数字身份证</h2><p>我国网络发展至今，一直延用了物理空间的公民身份号码作为线上公民数字身 份的区分职能。但是存在诸多问题</p>
<ul>
<li>容易造成个人信息泄露。</li>
</ul>
<p>，由于公民身份号码隐含了个人户籍所在地、出生日期、性别 等个人信息，在开放的互联网上直接使用公民身份号码，无疑会对个人信息安全带 来极大的隐患和危害。多年来的实践反复证明，仅仅使用姓名＋公民身份号码代表公民的线 上身份，造成了大量的个人信息泄露。</p>
<ul>
<li>个人信息比对正确并不能代表本人真实意愿，无法防范个人身份被冒用或盗用的风险</li>
</ul>
<p>与线下环 境身份认证方式（身份证要求本人出示，由核验方查实证件真伪及判断是否“人证 合一”）不同的是，在线上填写公民身份号码既无法验证身份的真伪、也难以证明 是出自本人意愿。</p>
<p>作为个人信息的重要代表，公民身份号 码不宜直接作为数字身份来使用：它只起到了唯一区分的作用，而无法对个人信息 进行保护。因此，结合我国现有身份管理的成就以及网络社会个人信息保护的现实 需求，有必要以公民身份号码为根（唯一性），建设既能保护个人信息安全又能适 应网络社会数据开放和流通需求的统一数字身份体系。</p>
<p><strong>公安部第三研究所于十二五期间承担了国家863计划“网域空间身份管理”等信息安全重大专项，研发了“网络电子身份标识（elD）”技术并形成了相关标准体系。</strong></p>
<h2 id="eID-数字身份基本概念"><a href="#eID-数字身份基本概念" class="headerlink" title="eID 数字身份基本概念"></a>eID 数字身份基本概念</h2><h3 id="eID-数字身份"><a href="#eID-数字身份" class="headerlink" title="eID 数字身份"></a>eID 数字身份</h3><p>eID 数字身份是以公民身份号码为根，由“公民网络身份识别系统”基于密码算法(国密sm2，公钥密码体制)统一为中国公民生成的数字标记。 eID 数字身份既可以保证签发给每个公民的数字标记的唯一识别性，又可以减 少公民身份明文信息在互联网上的传播，又可以实现不同应用中公民 eID 数字身份 有条件的互通。</p>
<h2 id="eID-数字身份特性"><a href="#eID-数字身份特性" class="headerlink" title="eID 数字身份特性"></a>eID 数字身份特性</h2><p>eID依据《居民身份证法》《电子签名法》和《网络安全法》等相关法律要求，既可以解决数字空间由于数据的虚拟性、易复制性、易重构性等特性所带来的主体识别、数据确权授权、行为抗抵赖和隐私保护等难题，也可以在物理空间解决传统离线证件难以有效挂失的缺陷，具备便捷、安全、唯一、规范和跨域的特点。</p>
<ul>
<li><p>便捷性：分钟级空中开通、秒级认证，兼具线上身份认证和线下身份证明功能；</p>
</li>
<li><p>安全性：基于国密算法、智能安全芯片，借助现场活体人脸检测和身份证内置照片识别保证人证同一；</p>
</li>
<li><p>唯一性：一人同时只能有一个eID，可有效挂失或注销；</p>
</li>
<li><p>规范性：相关格式、载体、机具和验证等国家标准已于2019年5月起正式实施；</p>
</li>
<li><p>跨域性：可实现跨应用、跨行业、跨地区的无差别使用。</p>
</li>
</ul>
<h2 id="eID-数字身份特点"><a href="#eID-数字身份特点" class="headerlink" title="eID 数字身份特点"></a>eID 数字身份特点</h2><p>eID 数字身份有以下特点： </p>
<ul>
<li><p>eID 数字身份以公民身份号码为根生成；</p>
</li>
<li><p>eID 数字身份基于密码算法产生，从 eID 数字身份无法逆推出公民身份号码原文； </p>
</li>
<li><p>eID 数字身份采用碎片化方法生成：对于不同的 CSP，同一注册用户的 eID 数字身份并不相同；对于同一 CSP 的不同 RP，同一注册用户的 eID 数字 身份也不相同；</p>
</li>
<li><p>eID 数字身份由“公民网络身份识别系统”统一管理，碎片化处理后的 eID 数字身份在“公民网络身份识别系统”内可实现与公民身份号码的关联。</p>
</li>
<li></li>
</ul>
<h2 id="eID功能"><a href="#eID功能" class="headerlink" title="eID功能"></a>eID功能</h2><p>eID具有</p>
<ul>
<li>在线身份认证</li>
<li>签名验签</li>
<li>线下身份认证</li>
</ul>
<p>等功能，能够在保护公民个人信息安全的前提下准确识别自然人主体身份，可以运用在网上签约授权、交易支付、航旅服务、酒店住宿等多种场景。</p>
<h2 id="数字身份的认证"><a href="#数字身份的认证" class="headerlink" title="数字身份的认证"></a>数字身份的认证</h2><p>如何认证数字身份，既是一个技术问题也是一个法律问题。技术上，目前通用 的数字身份认证技术有许多，例如，基于口令的认证方式，OTP（One Time Password） 和银行 U 盾的认证技术等。世界各国基于各自的电子签名相关法律推广可靠的数字身份认证，大多采用基于 PKI 的数字签名技术。</p>
<h3 id="eID的技术原理"><a href="#eID的技术原理" class="headerlink" title="eID的技术原理"></a>eID的技术原理</h3><p>eID以智能安全芯片为载体，芯片内部拥有独立的处理器、安全存储单元和密码运算协处理器，只能运行专用安全芯片操作系统，其内建芯片安全机制可以抵抗各种物理和逻辑攻击，确保芯片内部数据无法被非法读取、篡改或使用。</p>
<p>用户开通eID时，智能安全芯片内部会采用非对称密钥算法(国密SM2)生成一组公私钥对，这组公私钥对可用于电子签名，基本原理是：用户可以使用自己的eID私钥对信息进行电子签名后发送给其他人，其他人可以使用用户的eID公钥对签名信息进行验签。</p>
<p>用户使用eID私钥签名的功能受eID签名密码保护，在开通eID时需要用户本人设置eID签名密码，连续输错多次eID签名密码eID功能将被锁定，确保了使用eID完成的电子签名不可抵赖。</p>
<p>用户使用eID通过网络向应用方自证身份时，应用方会向连接“公民网络身份识别系统”的服务机构发出请求，以核实用户网络身份的真实性和有效性。一旦用户网络身份通过验证，应用方得到用户在当前应用上的网络身份应用标识。由于用户在不同的线上应用上所使用的网络身份应用标识编码不同，可以避免用户在不同线上应用中的行为数据被汇聚、分析和追踪。</p>
<h3 id="eID数字身份模型"><a href="#eID数字身份模型" class="headerlink" title="eID数字身份模型"></a>eID数字身份模型</h3><p>![eID数字身份模型](eID 数字身份体系&#x2F;image-20210622194227808.png)</p>
<h2 id="申领与开通"><a href="#申领与开通" class="headerlink" title="申领与开通"></a>申领与开通</h2><p>公安部第三研究所与智能手机厂家开展合作，将eID载入手机安全芯片。目前已支持直接申领eID的智能手机品牌及型号如下：</p>
<p>![image-20210622193305876](eID 数字身份体系&#x2F;image-20210622193305876.png)</p>
<h2 id="eID数字身份体系特点"><a href="#eID数字身份体系特点" class="headerlink" title="eID数字身份体系特点"></a>eID数字身份体系特点</h2><ul>
<li><p>● 以个人信息保护为首要原则，将公民身份信息转化成去身份化和碎片化的个人标记，防止公民个人信息泄露和大数据精准画像，保障公民的生活安宁、财产和人身安全；</p>
</li>
<li><p>● 在全面研究分析我国主流身份认证技术及应用的基础上，通过引入eID数字身份构建全国统一数字身份体系，包容各种数字身份认证技术并实现认证互通；</p>
</li>
<li><p>● 分别对eID数字身份颁发过程和eID数字身份认证过程的安全可靠程度分级，构建eID数字身份体系框架；</p>
</li>
<li><p>● 旨在推动我国数据的开放和流通，促进我国数字政府、数字经济发展，建设网络强国。</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://eid.cn/knoweid/whatiseid.html">https://eid.cn/knoweid/whatiseid.html</a></p>
<p><a href="https://eid.cn/eid2018.pdf">https://eid.cn/eid2018.pdf</a></p>
]]></content>
  </entry>
  <entry>
    <title>favicon 图标被黑客用来加载后门程序</title>
    <url>//post/favicon%20%E5%9B%BE%E6%A0%87%E8%A2%AB%E9%BB%91%E5%AE%A2%E7%94%A8%E6%9D%A5%E5%8A%A0%E8%BD%BD%E5%90%8E%E9%97%A8%E7%A8%8B%E5%BA%8F.html</url>
    <content><![CDATA[<h1 id="favicon-图标被黑客用来加载后门程序"><a href="#favicon-图标被黑客用来加载后门程序" class="headerlink" title="favicon 图标被黑客用来加载后门程序"></a>favicon 图标被黑客用来加载后门程序</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2021/05/magecart-640x400.jpg" alt="img"></p>
<p>网络犯罪分子正在分发伪装成favicon的恶意PHP web shells，以实现对被攻击服务器的远程访问，并将JavaScript skimmers注入在线购物平台，目的是窃取用户的财务信息。</p>
<p>Malwarebytes Jérôme Segura表示，这些被称为Smilodon或Megalodon的Web shells被用来通过服务器端请求动态加载JavaScript skimming代码到在线商店。这种技术很有趣，因为大多数客户端的安全工具将无法检测或阻挡盗取者。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Magecart，针对在线购物网站的黑客组织使用在电子商务网站上注入网络盗取器(web skimmers)的技术来窃取信用卡的详细信息。盗取器(skimmers )也被称为形式劫持攻击，盗取器采取JavaScript代码的形式，操作者秘密插入电子商务网站，通常是在支付页面，目的是实时捕捉客户的银行卡信息，并将其传输到远程服务器。</p>
<p>注入式盗刷器的工作原理是，当客户访问网店时，向托管在攻击者控制的域名上的外部JavaScript资源发出客户端请求。然而，最新的攻击有点不同，因为盗取代码是在服务器端动态引入商家网站的。</p>
<p>基于PHP的网络外壳恶意软件伪装成favicon（”Magento.png”），通过篡改HTML代码中的快捷图标标签指向假的PNG图像文件，将恶意软件插入到被攻击的网站。这个网络shell又被配置为从外部主机-获取下一阶段的有效载荷:一个信用卡盗刷器。</p>
<h2 id="恶意活动关联"><a href="#恶意活动关联" class="headerlink" title="恶意活动关联"></a>恶意活动关联</h2><p>基于TTPs( tactics, techniques, and procedures)的重叠，最新的活动被归结为Magecart Group 12。Malwarebytes补充说，他们发现的最新域名（zolo[.]pw）恰好与recaptcha-in[.]pw和google-statik[.]pw托管在同一个IP地址（217.12.204[.]185），这两个域名之前与Magecart Group 12有关。</p>
<p>在过去的几个月里，Magecart的行为者使用了几种攻击技术来避免被发现和渗出数据。</p>
]]></content>
  </entry>
  <entry>
    <title>“黑客”组织仍在积极重新调整其恶意软件库</title>
    <url>//post/%E2%80%9C%E9%BB%91%E5%AE%A2%E2%80%9D%E7%BB%84%E7%BB%87%E4%BB%8D%E5%9C%A8%E7%A7%AF%E6%9E%81%E9%87%8D%E6%96%B0%E8%B0%83%E6%95%B4%E5%85%B6%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BA%93.html</url>
    <content><![CDATA[<h1 id="“黑客”组织仍在积极重新调整其恶意软件库"><a href="#“黑客”组织仍在积极重新调整其恶意软件库" class="headerlink" title="“黑客”组织仍在积极重新调整其恶意软件库"></a>“黑客”组织仍在积极重新调整其恶意软件库</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2020/12/trickbot-800x400.jpg" alt="img"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>臭名昭著的TrickBot恶意软件与一种名为Diavol的新勒索软件有关联。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>根据Fortinet的FortiGuard实验室的研究人员，本月初针对其一个客户的攻击中，Diavol和Conti勒索软件的有效载荷(payloads)被部署在不同的系统上。</p>
<p>TrickBot银行木马是一种基于Windows的犯罪软件，在目标网络上采用不同的模块达到恶意行为，包括盗取凭证和进行勒索软件攻击。</p>
<p>据信，迄今为止，Diavol已经在被部署在实际环境中。即使不知道入侵来源，但该有效载荷的源代码与Conti的代码有相似之处，甚至其赎金说明文字与Egregor勒索软件的一些语言重复。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>研究人员表示，Diavol使用用户模式的无对称加密算法、异步程序调用（APC）运行。通常情况下，勒索软件开发者的目标是在最短的时间内完成加密操作。非对称加密算法要比对称算法慢得多。</p>
<p>该勒索软件的另一个方面是它依靠一种反分析技术，以位图图像的形式混淆其代码，从那里将例程加载到具有执行权限的缓冲区。</p>
<p>在锁定文件和用赎金信息改变桌面壁纸之前，Diavol还执行其他功能，如在远程服务器上注册受害者设备，终止运行中的进程，在系统中寻找本地驱动器和文件进行加密，并通过删除shadow副本防止恢复。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>正如Kryptos Logic威胁情报团队所详述的那样，Wizard Spider勒索软件发展也与 “TrickBot webinject 模块的新发展 “相吻合，表明该组织仍在积极重新调整其恶意软件库。</p>
]]></content>
  </entry>
  <entry>
    <title>一个github快速建站主题推荐GitHub+Hexo+AURORA</title>
    <url>//post/%E4%B8%80%E4%B8%AAgithub%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90.html</url>
    <content><![CDATA[<hr>
<p>title: 大家好，我是明说网络的小明同学<br>date: 2022-02-26 17:20:22</p>
<hr>
<p>大家好，我是明说网络的小明同学</p>
<p>今天给大家推荐一块非常快速的建站工具Github + AURORA</p>
<h1 id="Github建站"><a href="#Github建站" class="headerlink" title="Github建站"></a>Github建站</h1><p>github免费建站就不说了，网上有很多教程。</p>
<h1 id="Hexo快速生成可以用Markdown协作写作的网站"><a href="#Hexo快速生成可以用Markdown协作写作的网站" class="headerlink" title="Hexo快速生成可以用Markdown协作写作的网站"></a>Hexo快速生成可以用Markdown协作写作的网站</h1><p>如果你还没有使用过Hexo，那么从官方文档里可以快速学会使用。<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<p>Hexo一个比较吸引我的功能就是，能够以极少的代价，完成网站主题的切换。</p>
<p>必备评论插件GitTalk，可以看这篇文章</p>
<p><a href="https://blog.csdn.net/qq_33384402/article/details/107200465">https://blog.csdn.net/qq_33384402/article/details/107200465</a></p>
<h1 id="推荐一块比较好的主题AURORA"><a href="#推荐一块比较好的主题AURORA" class="headerlink" title="推荐一块比较好的主题AURORA"></a>推荐一块比较好的主题AURORA</h1><p>插件主题长这个样子</p>
<p><img src="/post/%E4%B8%80%E4%B8%AAgithub%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/image-20220226162421002.png" alt="image-20220226162421002"></p>
<p>插件具有详细的说明文档 <a href="https://aurora.tridiamond.tech/zh/guide/">https://aurora.tridiamond.tech/zh/guide/</a></p>
<p>该主题的网址：<a href="https://github.com/auroral-ui/hexo-theme-aurora">https://github.com/auroral-ui/hexo-theme-aurora</a></p>
<h1 id="关于图片显示的问题"><a href="#关于图片显示的问题" class="headerlink" title="关于图片显示的问题"></a>关于图片显示的问题</h1><p>关于图片显示，建议看这篇文章，<a href="https://moeci.com/posts/hexo-typora/">https://moeci.com/posts/hexo-typora/</a></p>
<p>描述了，怎么结合hexo和typora来实现markdown无缝衔接，并且还能深入了解图片出错到底是什么原因</p>
<p>不过该博主的插件最终也没有让我成功，还是hexo-asset-image救了我<a href="https://github.com/xcodebuild/hexo-asset-image">https://github.com/xcodebuild/hexo-asset-image</a></p>
<h1 id="最后给自己打个广告吧"><a href="#最后给自己打个广告吧" class="headerlink" title="最后给自己打个广告吧"></a>最后给自己打个广告吧</h1><p>发现大家都好牛啊！</p>
<p><img src="/post/%E4%B8%80%E4%B8%AAgithub%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/image-20220226163311302.png" alt="image-20220226163311302"></p>
<p>大家可以通过主页的相关链接在你喜欢的平台找到我！</p>
]]></content>
  </entry>
  <entry>
    <title>每天感染1000台设备，这款恶意软件专为挖矿而来、超过9000个XMR币被开采出来</title>
    <url>//post/%E4%B8%80%E6%AC%BE%E5%90%8D%E4%B8%BACrackonosh%E7%9A%84%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E8%A2%AB%E5%8F%91%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="每天感染1000台设备，这款恶意软件专为挖矿而来、超过9000个XMR币被开采出来"><a href="#每天感染1000台设备，这款恶意软件专为挖矿而来、超过9000个XMR币被开采出来" class="headerlink" title="每天感染1000台设备，这款恶意软件专为挖矿而来、超过9000个XMR币被开采出来"></a>每天感染1000台设备，这款恶意软件专为挖矿而来、超过9000个XMR币被开采出来</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2021/06/monero-800x400.png" alt="img"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>一款在攻击过程中利用Windows安全模式的加密货币挖矿恶意软件被发现，每天约有1,000台设备被攻击，全球已有超过22.2万台机器被感染。该恶意软件至少从2018年6月就开始蔓延，最新版本于2020年11月发布。研究人员表示，只要人们还下载破解的软件，恶意软件就会一直蔓延下去</p>
<h2 id="名为Crackonosh的恶意软件"><a href="#名为Crackonosh的恶意软件" class="headerlink" title="名为Crackonosh的恶意软件"></a>名为Crackonosh的恶意软件</h2><p>一款在攻击过程中滥用Windows安全模式的加密货币挖矿恶意软件被发现，它通过盗版和破解软件传播，并经常出现在torrents, forums, 和 “warez “网站中。</p>
<p>Avast的研究人员将这种恶意软件称为Crackonosh。研究人员指出，该恶意软件至少从2018年6月就开始蔓延，第一个受害者是运行伪装成合法软件的破解版软件而被攻击。</p>
<p>每天约有1,000台设备被攻击，全球已有超过22.2万台机器被感染。</p>
<p>主要利用系统算力和资源来挖掘<a href="https://www.xmr-zh.com/">门罗币</a>（XMR）（一种加密货币）。Crackonosh总共产生了至少200万美元的门罗币，有超过9000个XMR币被开采出来。</p>
<p><img src="https://img.jinse.com/281169_image3.png" alt="查看源图像"></p>
<p><img src="https://www.getmonero.us/upload/attach/202009/1_UB57RFD5QRG5WYD.jpg" alt="查看源图像"></p>
<p>到目前为止，该恶意软件的30个变种已被确认，最新版本于2020年11月发布。</p>
<h2 id="感染流程"><a href="#感染流程" class="headerlink" title="感染流程"></a>感染流程</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>感染链从一个安装程序和一个修改Windows注册表的脚本开始，允许主要的恶意软件可执行文件在安全模式下运行。被感染的系统被设置为在下次启动时以安全模式启动。</p>
<h3 id="抗杀软"><a href="#抗杀软" class="headerlink" title="抗杀软"></a>抗杀软</h3><p>研究人员说，当Windows系统处于安全模式时，杀毒软件就不会工作。这使得恶意的Serviceinstaller.exe能够轻易地禁用和删除Windows Defender。它还使用WQL查询所有安装的杀毒软件<code> SELECT * FROM AntiVirusProduct</code>.</p>
<p>Crackonosh将检查防病毒程序的存在，如Avast、Kaspersky、McAfee的扫描器、Norton和Bitdefender - 并尝试禁用或删除它们。然后擦除日志系统文件以掩盖其痕迹。</p>
<h3 id="阻止Windows更新"><a href="#阻止Windows更新" class="headerlink" title="阻止Windows更新"></a>阻止Windows更新</h3><p>Crackonosh还将试图停止Windows更新，并将用一个假的绿色勾选托盘图标取代Windows安全。</p>
<h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>最后，部署了一个XMRig，这是一个加密货币矿工，利用系统算力和资源来挖掘<a href="https://www.xmr-zh.com/">门罗币</a>（XMR）（一种加密货币）。</p>
<p>Avast研究人员表示，只要人们还下载破解的软件，恶意软件就会一直蔓延下去</p>
]]></content>
  </entry>
  <entry>
    <title>世界第一位被美国无人机袭击故意杀害的黑客--Junaid Hussain</title>
    <url>//post/%E4%B8%96%E7%95%8C%E7%AC%AC%E4%B8%80%E4%BD%8D%E8%A2%AB%E7%BE%8E%E5%9B%BD%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%A2%AD%E5%87%BB%E6%95%85%E6%84%8F%E6%9D%80%E5%AE%B3%E7%9A%84%E9%BB%91%E5%AE%A2--Junaid%20Hussain.html</url>
    <content><![CDATA[<h1 id="世界第一位被美国无人机袭击故意杀害的黑客–Junaid-Hussain"><a href="#世界第一位被美国无人机袭击故意杀害的黑客–Junaid-Hussain" class="headerlink" title="世界第一位被美国无人机袭击故意杀害的黑客–Junaid Hussain"></a>世界第一位被美国无人机袭击故意杀害的黑客–Junaid Hussain</h1><p><img src="https://media.vanityfair.com/photos/566f300dc70e5cef14686b91/16:9/w_1200,h_630,c_limit/junaid-hussain-isis-anonymous-hacker-a.jpg"></p>
<p>在 2015 年 8 月，一名21 岁的男子，成为第一位被美国无人机杀害的黑客。他就是世界头号通缉恐怖分子Junaid Hussain，他的名字排在伊斯兰国(ISIS)头目阿布·贝克尔·巴格达迪之后的第三位。为什么一名黑客可以成为头号恐怖分子？</p>
<h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>Junaid Hussain(朱奈德侯赛因)约 1994 年出生，第二代英国国民。他的家人来自克什米尔的巴基斯坦一侧。小时候，他的家人住在伯明翰的Small Heath区，该地区南亚人人口稠密，犯罪率在伯明翰排名第二。后来，侯赛因的家人搬到了Kings Heath，这个地区经常被吹捧为英国非常理想的居住地。Hussain 的世界观就是在这个绿树成荫的街区形成的。</p>
<p>侯赛因的父亲是英国巴基斯坦社区中一位受人尊敬的成员，他在伯明翰地区经营私人出租车。他的父亲被认为是“可敬的”、“勤奋的”和“健谈的”。但相比之下，朱奈德侯赛因却似乎是一个沉默寡言的人。 </p>
<h2 id="被称为-TriCk-的黑客"><a href="#被称为-TriCk-的黑客" class="headerlink" title="被称为 TriCk 的黑客"></a>被称为 TriCk 的黑客</h2><p>Hussain 涉足黑客世界源于对报复的需要。在 11 岁时，有人入侵他在线玩的游戏的帐户。“我想报复，所以我开始在谷歌上搜索如何破解。” 侯赛因无法报仇雪恨，但这让他走上了一条培养黑客技能的道路。“我加入了一些在线黑客论坛，阅读教程，从基本的社会工程开始，然后逐步提升……我潜伏在论坛中，结识人，提出问题，从那时起我转向了黑客网站、服务器等。”</p>
<p>随着他的黑客技能的发展，他对政治激进主义的品味也越来越高。侯赛因对政治的热情使他走出家门，走上街头。早在2009年，他就在街头抗议穆斯林人民的困境。“我上网、看书、看纪录片等。我对政治越来越感兴趣，我开始深入研究共济会、光明会、300 人委员会等。它使我很生气，它改变了我的生活方式和我看待世界的方式。然后我开始使用黑客作为我的媒介，通过破坏网站来提高对世界各地问题的认识，并‘欺负’腐败组织并通过泄密等方式使他们难堪，这就是我进入黑客行动主义的方式。</p>
<p>在他的“黑客行动主义”中，侯赛因创建了自己的网站 p0ison.org（当时 15 岁）和TeMp0isoN组织 。</p>
<p>TeaMp0isoN 是一个由八名黑客行动主义者组成的组织，由主要来自英国的青少年和年轻人组成。Hussain 的黑客行动主义笔名是 TriCk。</p>
<p>他宣称的一些黑客行为包括：</p>
<ul>
<li><strong>1</strong> . 成功入侵了托尼·布莱尔 (Tony Blair) 的一位助手、当时的英国首相的 Gmail 帐户。他开始在网上泄露通讯录，暴露了总理许多朋友的联系方式</li>
<li><strong>2</strong> . 他还声称入侵了马克扎克伯格本人的 Facebook 帐户</li>
<li><strong>3</strong> . 2012 年，他参与了名为“自由巴勒斯坦行动”的在线黑客活动。数以百计的以色列信用卡被黑客入侵，以向巴勒斯坦事业输送资金。</li>
<li><strong>4</strong> . 他和他在 Poison 的朋友们曾经对英国反恐司令部的热线发起了基于电话的拒绝服务 (DOS) 攻击。他们甚至公开了与 M16 官员的谈话，威胁要向 FBI 报告他们。</li>
<li>**5.**他们还声称入侵了北约和英国国防部的网站，发布了一些员工的地址信息。</li>
</ul>
<h2 id="从网络黑客到恐怖主义之路"><a href="#从网络黑客到恐怖主义之路" class="headerlink" title="从网络黑客到恐怖主义之路"></a>从网络黑客到恐怖主义之路</h2><p>朱奈德侯赛因在入侵托尼布莱尔私人助理的电子邮件后被捕。他被审判并被判处六个月监禁。据接近他的人说，他的被捕让他非常痛苦。他开始喃喃自语，黑客如何不足以改变世界。</p>
<p>到他被释放时，朱奈德侯赛因已经与他的大多数朋友断绝了联系，包括Poison黑客组织中的朋友。他停止在他的推特账户上发帖。 2014 年侯赛因出现了，通过同一个 Twitter 帐户，但该帐户改头换面：他的名字从 Trick 改为 Abu-Hussain al-Britani，头像换为了一名手持AK47的蒙面男子，并且2014 年 8 月，他的新伊斯兰妻子在 Twitter 上发布了一条消息，称他们现在在 ISIS 控制的领土上。他现在是一个已知恐怖组织的圣战者。</p>
<p><img src="https://ctc.usma.edu/wp-content/uploads/2018/04/Junaid_TwitterPic.jpg" alt="朱奈德·侯赛因的 Twitter 个人资料照片"></p>
<h2 id="伊斯兰国网络教练"><a href="#伊斯兰国网络教练" class="headerlink" title="伊斯兰国网络教练"></a>伊斯兰国网络教练</h2><p>化名为 Abu-Hussain al-Britani，Junaid Hussain 利用他的技能为恐怖分子谋取利益。他成为了被称为CyberCaliphate的恐怖分子黑客团队中最重要的成员之一。</p>
<p>他开始训练其他人破解银行账户和信用卡。当以色列信用卡成为目标时，他在“自由巴勒斯坦”活动中使用的方法相同；他利用自己作为说唱歌手的经验为 ISIS 制作了高质量的音频宣传剪辑。凭借他在 Anonymous 的经验，他能够组织和领导 ISIS 行动的数字部门，并产生毁灭性的影响；</p>
<p>在 Junaid Hussain 加入 ISIS 之前，没有人听说过 CyberCaliphate。然而，他在入侵美国中央司令部的推特账户后，让该组织臭名昭著。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>2015年1月，ISIS的支持者入侵了美国中央司令部的YouTube和Twitter账户，并从其移动设备上窃取了大量内部文件并泄露到了网上。</p>
<p>他们控制了美国中央司令部Twitter账户长达1个小时，并把美国中央司令部的logo换成了“I love you isis”。</p>
<p>美国中央司令部是美国军队的强有力部门，其职责范围主要在伊拉克和叙利亚地区。</p></blockquote>
<p>在他的领导下，CyberCaliphate 入侵了多个在线社交帐户、网站，并在多个网站上组织了 DDoS 攻击。</p>
<p>在 2015 年 4 月，他在几个小时内控制了一家法国电视网络，利用控制的时间向法国人民广播 ISIS 宣传。</p>
<p>正是侯赛因的招募工作、宣传传播、袭击策划和煽动以及敏感信息泄露，使他成为联军的高价值目标。据媒体报道，他的名字在五角大楼的目标名单上排名第三。</p>
<h2 id="朱奈德侯赛因被杀"><a href="#朱奈德侯赛因被杀" class="headerlink" title="朱奈德侯赛因被杀"></a>朱奈德侯赛因被杀</h2><p>当局知道他在叙利亚，但如何获取他的确切位置呢？当局对他使用了一个他过去对他的许多受害者使用过的把戏。</p>
<p><strong>他点击了卧底安全人员发给他的链接。</strong></p>
<p>首先，英国的证券工作人员能够在他喜欢使用的安全消息应用程序 Surespot 上获取他的用户名。卧底特工给他发了一个好友请求，他接受了。</p>
<p>后来，卧底特工借口他想给朱奈德看一些重要的东西，给他发了一个“带毒”链接。“带毒”链接指向一个未知网站，这种攻击方式就是我们所知的水坑攻击。</p>
<p>对于朱奈德侯赛因来说，他当时选择的设备是他的手机。他在点击链接时无意中下载了病毒。当他稍后用电话拨打电话时，工作人员能够轻松地确定他的位置。</p>
<p>最终，当局将坐标输入无人机并击毙朱奈德侯赛因。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作为第一个被无人机击杀的黑客，Junaid Hussain的黑客恐怖主义行为可见一斑。网络空间拉近了人和人之间的距离，同时也拉近和网络恐怖主义的距离。当黑客遇见恐怖主义，具有更强的威力和蛊惑效果。</p>
<p>值得注意的是，黑客组织CyberCaliphate 同时也隶属于恐怖组织，带有极强的政治色彩，该种黑客行为不单单是黑客行为，是网络空间中不可忽视的一股恐怖势力。</p>
<p>因此，在享受网络空间带来便利的同时，也要时刻警惕网络恐怖主义蔓延。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]The British Hacker Who Became the Islamic State’s Chief Terror Cybercoach: A Profile of Junaid Hussain，<a href="https://ctc.usma.edu/british-hacker-became-islamic-states-chief-terror-cybercoach-profile-junaid-hussain/">https://ctc.usma.edu/british-hacker-became-islamic-states-chief-terror-cybercoach-profile-junaid-hussain/</a></p>
<p>[2]Junaid Hussain: Hacker Killed By A U.S Drone，<a href="https://awajis.com/junaid-hussain-hacker/">https://awajis.com/junaid-hussain-hacker/</a></p>
]]></content>
  </entry>
  <entry>
    <title>中国研究人员发现微软0Day漏洞</title>
    <url>//post/%E4%B8%AD%E5%9B%BD%E7%A0%94%E7%A9%B6%E4%BA%BA%E5%91%98%E5%8F%91%E7%8E%B0%E5%BE%AE%E8%BD%AF0Day%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<h1 id="中国研究人员发现微软0Day漏洞"><a href="#中国研究人员发现微软0Day漏洞" class="headerlink" title="中国研究人员发现微软0Day漏洞"></a>中国研究人员发现微软0Day漏洞</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>中国的安全研究人员披露了一个关键的Windows零日漏洞，使得域控制器服务器尤其面临风险。专家建议尽可能严格限制对这些服务器的网络访问，或是直接关闭这些服务。</p>
<p><img src="https://www.cybersafe.news/wp-content/uploads/2021/07/zeroday-800x400.png" alt="img"></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>中国的安全研究人员披露了一个关键的Windows零日漏洞，该漏洞被命名为PrintNightmare。</p>
<p>总部设在深圳的桑福(Sangfor )科技公司披露技术细节和概念验证（PoC）漏洞，该漏洞目前在Windows中没有补丁，允许远程代码执行。</p>
<p>此前，微软在6月修补了一个高严重度的特权提升漏洞CVE-2021-1675。但在上周一，在分析了它可以实现远程代码执行（RCE）后，它把这个漏洞重新归类为关键性的。</p>
<p>Print Spooler的零日漏洞，使得域控制器服务器尤其面临风险。威胁者可以利用这些的远程控制访问企业网络。即使强加认证，但鉴于暗网中RDP和其他系统的证书被攻破的数量，这对攻击者来说是很容易突破。</p>
<h2 id="措施"><a href="#措施" class="headerlink" title="措施"></a>措施</h2><p>Sophos首席研究科学家Paul Ducklin说，微软可能会在7月的补丁星期二之前发布一个带外更新来解决这个问题。</p>
<p>那些有让Print Spooler运行的服务器用户，建议尽可能严格限制对这些服务器的网络访问。另外，如果有的服务器没有必要运行Print Spooler，即使有了补丁，也应该关闭它。</p>
]]></content>
  </entry>
  <entry>
    <title>互联网发展简史(1)ARPANET的建立</title>
    <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2(1).html</url>
    <content><![CDATA[<p>原文为<a href="https://zhuanlan.zhihu.com/p/376627686">知乎</a>，现转移到个人博客。<br><a href="https://zhuanlan.zhihu.com/p/376627686" target="_blank" class="LinkCard">知乎原文</a></p>
<p>原文为<a href="https://mp.weixin.qq.com/s/eiYEhlHfRICdkzf2aXxCDg">微信公众号原文</a>，现转移到个人博客。<br><a href="https://mp.weixin.qq.com/s/eiYEhlHfRICdkzf2aXxCDg" target="_blank" class="LinkCard">微信公众号原文</a></p>
<h2 id="互联网发展简史-1-ARPANET的建立"><a href="#互联网发展简史-1-ARPANET的建立" class="headerlink" title="互联网发展简史(1)ARPANET的建立"></a>互联网发展简史(1)ARPANET的建立</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>[TOC]</p>
<p>Internet发展简史（ARPANET的建立）</p>
<h3 id="1955年"><a href="#1955年" class="headerlink" title="1955年"></a>1955年</h3><p>要了解互联网的起源，我们必须回到1957年。这一年大家都致力于收集有关高层大气在一个强烈的太阳活动时期的信息。1955年，艾森豪威尔宣布，作为活动的一部分，美国希望发射一颗小型地球轨道卫星。克里姆林宫宣布也希望这样做。美国的计划集中在精密的三级火箭上，但在俄罗斯他们采取了更直接的方法。把四枚军用火箭绑在一起。苏联的行为似乎一夜之间消除了自13年前第一颗核弹爆炸以来，美国一直享有的无懈可击的感觉。立即的反应之一是在国防部内设立了高级研究计划局。它的任务是将最先进的技术应用于美国国防，并避免(再次)被敌人的技术进步吓到。在1958年10月美国国家航空航天局成立之前，它还被授予了美国卫星计划的临时控制权。</p>
<p>‌ARPA成为了美国国防努力的技术智囊团，直接雇佣了几百名顶级科学家，并拥有足够的预算将研究分包给美国其他顶级机构。尽管先进的计算技术将主导其工作，但ARPA最初的活动重点是空间、弹道导弹和核试验监测。即便如此，从一开始，ARPA就对它的操作基地和它的分包商之间的通信很感兴趣，最好是通过各种计算机之间的直接连接。</p>
<h3 id="1962年"><a href="#1962年" class="headerlink" title="1962年"></a>1962年</h3><p>1962年，ARPA启动了一个计算机研究项目，并任命麻省理工学院(MIT)的科学家约翰·利克利德(John Licklider)为负责人。利克里德刚刚发表了他关于“银河网络”概念的第一份备忘录<strong>……一个未来的愿景，电脑将联网，并将接近每个人。</strong>在ARPA内部，Leonard Klienrock已经在研究如何将信息分解成“数据包”，将它们分别发送到目的地，然后在另一端重新组装。这将比打开一行并通过该行发送信息更具灵活性。例如，系统将不依赖于单个路由，如果文件在传输前被破坏，将更难以被窃听……两者都有有用的安全优势。1965年，人们发现了电话网络在运行程序和传输数据方面的不足。当时，伯克利和麻省理工学院的计算机通过低速拨号电话线连接起来，成为有史以来第一个“广域网”(WAN)。</p>
<p>‌到1966&#x2F;67年，研究工作已经发展到足以让计算机研究部的新主管伦纳德·罗伯茨(Leonard Roberts)发布了一个名为阿帕网(ARPANET)的计算机网络系统计划。当这些计划发表显然是彼此独立的,和无知的彼此的工作,团队在麻省理工学院,国家物理实验室(英国),兰德公司都致力于广泛的区域网络的可行性,及其最佳创意纳入阿帕网的设计。最后的要求是设计一个允许计算机发送和接收消息和数据的协议，称为接口消息处理器(IMPs)。这方面的工作在1968年完成。</p>
<h3 id="‌1969年"><a href="#‌1969年" class="headerlink" title="‌1969年"></a>‌1969年</h3><p>‌美军在ARPA（阿帕网，美国国防部研究计划署）制定的协定，该协定下将美国西南部的大学UCLA(加利福尼亚大学洛杉矶分校)、Stanford ResearchInstitute(斯坦福大学研究学院)、UCSB(加利福尼亚大学)和UniversityofUtah(犹他州大学)的四台主要计算机相连，形成了互联网最初的样子。</p>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/arpanet.gif" alt="ARPANET(1969)"></p>
<h3 id="1971年"><a href="#1971年" class="headerlink" title="1971年"></a>1971年</h3><p>这个协定有剑桥大学的BBN和MA执行，在1969年12月开始联机。到1970年6月，MIT(麻省理工学院)、Harvard(哈佛大学)、BBN和SystemsDevelopmentCorpinSantaMonica(加州圣达莫尼卡系统发展公司)加入进来。到1972年1月，Stanford(斯坦福大学)、MIT’sLincolnLabs(麻省理工学院的林肯实验室)、Carnegie-Mellon(卡内基梅隆大学)和Case-WesternReserveU加入进来。紧接着的几个月内NASA&#x2F;Ames(国家航空和宇宙航行局)、Mitre、Burroughs、RAND(兰德公司)和theUofIllinois(伊利诺利州大学)也加入进来。到1971年12月，阿帕网将23台主机相互连接起来。由此，<strong>ARPAnet成为现代计算机网络诞生的标志。</strong></p>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/arpanet1.gif" alt="ARPANET(1971)"></p>
<p>自此第一个真正的计算机网络诞生。</p>
<p>‌</p>
<h3 id="参考连接："><a href="#参考连接：" class="headerlink" title="参考连接："></a>参考连接：</h3><p>‌[1] <a href="https://www.let.leidenuniv.nl/history/ivh/chap2.htm#The%20Creation%20of%20ARPANET">Chapter Two: From ARPANET to World Wide Web</a> , </p>
<p>[‌2] <a href="https://baijiahao.baidu.com/s?id=1639113082776464538&wfr=spider&for=pc">关于互联网的由来和发展简史</a></p>
<p>欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8ff04a9934840c3c552ed41497bc4748_720w.jpg" alt="欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识"></p>
<p>也可以关注我的个人博客</p>
<p><a href="https://dianwoshishi.github.io/">点我试试的个人博客</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网发展简史(2)从ARPANET到Internet</title>
    <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2(2).html</url>
    <content><![CDATA[<p><strong>今日珠宝</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-5b67214ba6baf09e996ae7954768f217_720w.jpg"></p>
<p>原文为知乎，现转移到个人博客。<br><a href="https://zhuanlan.zhihu.com/p/376893651" target="_blank" class="LinkCard">知乎原文</a></p>
<p>原文为微信公众号文章，现转移到个人博客。<br><a href="https://mp.weixin.qq.com/s/LH6PU0afKLVra6Kn6coemQ" target="_blank" class="LinkCard">微信公众号原文</a></p>
<h2 id="互联网发展简史-2-从ARPANET到Internet"><a href="#互联网发展简史-2-从ARPANET到Internet" class="headerlink" title="互联网发展简史(2) 从ARPANET到Internet"></a>互联网发展简史(2) 从ARPANET到Internet</h2><h3 id="ARPANET公开亮相"><a href="#ARPANET公开亮相" class="headerlink" title="ARPANET公开亮相"></a>ARPANET公开亮相</h3><p><strong>1972年10月，ARPANET公开亮相</strong>。在华盛顿举行的第一届国际计算机与通信会议上，ARPA的科学家们演示了这个系统：<strong>将来自40个不同地点的计算机连接在一起</strong>。</p>
<h3 id="ARPANET发展"><a href="#ARPANET发展" class="headerlink" title="ARPANET发展"></a>ARPANET发展</h3><p>与此同时，美国国防部高级研究计划局(ARPA)的科学家们正在改进该系统，扩大其能力。</p>
<ul>
<li><p>1972年，他们成功地采用了一种新的程序，即我们现在所称的<strong>电子邮件</strong>，允许在网上发送信息，允许人与人之间的直接交流。</p>
</li>
<li><p>同样在70年代早期，科学家们开发了主机(host)对主机的协议。 在此之前，系统只允许一个“远程终端”访问每个单独主机的文件。 新的协议允许访问主机的程序(在连接期间有效地将两台主机合并为一台)。  </p>
</li>
<li><p>1974年，ARPA的科学家们与斯坦福大学的专家们密切合作，开发出一种使不同的网络能够相互交流的“共同语言”。这被称为**传输控制协议&#x2F;互联网协议(TCP&#x2F;IP)**。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>TCP&#x2F;IP的发展标志着网络发展的一个关键阶段，现如今使用最广泛的协议仍然是TCP&#x2F;IP协议，其分层、解耦合的设计是他生命力所在。</p></blockquote>
</li>
</ul>
<h3 id="各种NET的”百家争鸣”"><a href="#各种NET的”百家争鸣”" class="headerlink" title="各种NET的”百家争鸣”"></a>各种NET的”百家争鸣”</h3><p>前面讲到ARPANET的公开亮相，激发了整个西方世界科学界对互联网的进一步的研究。很快其他的网络也出现了。在这个阶段，各类网络各自为战，提出了自己的技术和协议。华盛顿会议还成立了一个互联工作组(IWG，Internetworking Working Group)来协调正在进行的研究。例如：</p>
<ul>
<li>1974年，斯坦福大学开通了<strong>Telenet</strong>，这是第一个公开访问的公共“分组数据服务”(ARPANET的商业版本)。</li>
<li>上世纪70年代，美国能源部为磁性聚变能的研究人员建立了<strong>MFENet</strong>，这催生了致力于高能物理的HEPNet。这启发了NASA的物理学家们建立了空间物理学家<strong>SPAN</strong>。</li>
<li>1976年，美国电话电报公司贝尔实验室开发了一种<strong>Unix-to-Unix协议</strong>，并免费分发给所有使用Unix的计算机用户(因为Unix是大学使用的主要操作系统，这为学术界打开了网络的大门)。</li>
<li>在1979年<strong>Usenet</strong>建立，一个开放的系统专注于电子邮件通信和致力于“新闻组”的开放，并仍然蓬勃发展到今天。</li>
<li>在1981年，纽约城市大学开发了<strong>Bitnet</strong>，用来连接美国东部大学的科学家，使用IBM计算机，不管学科。</li>
<li><strong>CSNet</strong>由美国国家科学基金会资助，旨在促进大学、工业和政府计算机科学家的交流。</li>
<li>1982年，欧洲版本的Unix网络<strong>Eunet</strong>建立，连接了英国、斯堪的纳维亚和荷兰的网络。</li>
<li>1984年又建立了欧洲版本的Bitnet，称为<strong>EARN</strong>(欧洲学术和研究网络)。</li>
</ul>
<p>在这一时期，世界仍然相当混乱，有过多的相互竞争的技术和协议。<strong>ARPANET仍然是整个系统的主干。</strong></p>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/arpanet2.gif" alt="ARPANET (1980)"></p>
<h3 id="TCP-x2F-IP一统天下"><a href="#TCP-x2F-IP一统天下" class="headerlink" title="TCP&#x2F;IP一统天下"></a>TCP&#x2F;IP一统天下</h3><p>虽然1974年标志着TCP&#x2F;IP协议的开始，但它需要经过几年的修改和重新设计，才得以竞争和普遍采用。例如，在20世纪70年代中期，已经设计了一个简化版，可以并入正在开发的新型微型计算机中。第二个设计挑战是开发一个与每个计算机网络(包括阿帕网本身)兼容的软件版本。</p>
<p>最终在1982年， TCP&#x2F;IP 协议统一了天下，成为了标准，<strong>使用TCP&#x2F;IP标准的互联网诞生了！</strong></p>
<p>下一期，我们将讲述：从Internet到WWW，从因特网到万维网。敬请关注</p>
<h3 id="参考连接："><a href="#参考连接：" class="headerlink" title="参考连接："></a>参考连接：</h3><p>‌[1] <a href="https://www.let.leidenuniv.nl/history/ivh/chap2.htm#The%20Creation%20of%20ARPANET">Chapter Two: From ARPANET to World Wide Web</a> , </p>
<p>[‌2] <a href="https://baijiahao.baidu.com/s?id=1639113082776464538&wfr=spider&for=pc">关于互联网的由来和发展简史</a></p>
<hr>
<p> 欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8ff04a9934840c3c552ed41497bc4748_720w.jpg" alt="欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识"></p>
<p>也可以关注我的个人博客</p>
<p><a href="https://dianwoshishi.github.io/">点我试试的个人博客</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网发展简史(3)从Internet到WWW</title>
    <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2(3).html</url>
    <content><![CDATA[<p>新品ISN潮流质感钻石G项链气质百搭款</p>
<p><img src="/post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2(3)/image-20210601204355672.png" alt="新品ISN潮流质感钻石G项链气质百搭款"></p>
<p>前文讲到，TCP&#x2F;IP协议助力ARPANET统一了网络协议标准，自此使用TCP&#x2F;IP协议标准的Internet诞生了。</p>
<p>到目前为止，网络的发展几乎完全是“科学主导的”，本节我们将讲述Internet到万维网(WWW)的发展。</p>
<h3 id="网络出现瓶颈"><a href="#网络出现瓶颈" class="headerlink" title="网络出现瓶颈"></a>网络出现瓶颈</h3><p>此前计算机能力和速度的并行进步使Internet得以扩张。但规模扩张的同时也带来了问题。</p>
<p>到20世纪80年代初，当互联网正式开始运营时</p>
<ul>
<li>连接到网络上的计算机“主机”比最初设想的要多(1984年主机的数量首次超过1000台);</li>
<li>每台主机的流量要大得多(主要是因为电子邮件的成功)。</li>
</ul>
<p>越来越多的人预言，整个网络最终会陷入瘫痪。</p>
<h3 id="解决网络瓶颈"><a href="#解决网络瓶颈" class="headerlink" title="解决网络瓶颈"></a>解决网络瓶颈</h3><p>这一时期产生了两个重要事件，有效的缓解了网络瓶颈，并促进了网络的发展：</p>
<p><strong>第一个重要的发展是1984年引入的域名服务器(Domain Name System)。</strong></p>
<ul>
<li>DNS系统使得主机的名称更容易记住，用户不用去记住每一个又数字组成的IP地址，如116.25.XXX.XXX，而是类似于<a href="http://www.example[.]com的容易记住的名字。">www.example[.]com的容易记住的名字。</a></li>
<li>DNS系统在互联网地址中引入了一些分层结构,更加利于组织众多域名和主机，如edu(教育),com(商业)、gov(政府)和org(组织)和一系列国家代码。</li>
</ul>
<p><strong>第二个是各国政府决定鼓励在整个高等教育系统中使用互联网，并制定了一系列利好政策，促进了互联网的进一步统一和繁荣。</strong></p>
<p>1984年，英国政府宣布建立JANET(联合学术网络)，为英国大学服务；1985年，基于同样的目的，美国国家科学基金会(National Science Foundation)建立了国家科学基金网(NSFNet)(为其提供资助的条件是，“校园内所有合格用户”都必须能够访问该网络)。美国的这项计划涉及了一系列对互联网发展至关重要的决定：</p>
<ul>
<li><p>所有参与者都必须使用TCP&#x2F;IP协议</p>
</li>
<li><p>联邦机构将分担建立公共基础设施(如跨洋连接)的费用并支持网关</p>
</li>
<li><p>NSFNet与其他科学网络(包括阿帕网ARPANet)签署了共享基础设施的“no-metered-cost”协议，为所有后续协议做出了示范。</p>
</li>
<li><p>鼓励进一步国际合作</p>
</li>
<li><p>NSFNet同意为美国互联网服务提供“主干”，并提供5台“超级计算机”来服务通信。第一批计算机提供每秒56 000字节(56KB&#x2F;s)的网络能力</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>国家科学基金网（NSFNet）的建立对互联网产生了巨大的影响。</p>
<ul>
<li><p>首先，它打破了网络的容量瓶颈。</p>
</li>
<li><p>其次，它促进了互联网使用的激增。之前用了十年的时间，联网的主机数量才突破了千台大关；到1986年，主机的数量已经达到5000台，一年后这个数字攀升到28000台。</p>
</li>
</ul></blockquote>
</li>
</ul>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/nsf_backbone.gif" alt="NSF骨干网"></p>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/nsfnet.gif" alt="NSFnet1991"></p>
<h3 id="互联网商业化发展"><a href="#互联网商业化发展" class="headerlink" title="互联网商业化发展"></a>互联网商业化发展</h3><p>我们注意到，之前网络的参与者基本上没有商业用户，这是由于NSFNet将商业用户排除在其网络之外。</p>
<p>虽然NSFNet将商业用户排除在网络之外，但并不意味着他们的对互联网不感兴趣。多年来，硬件和软件供应商一直在将TCP&#x2F;IP添加到他们的产品包中，但他们对产品如何工作缺乏经验，因此他们在提供满足需求的产品方面遇到了困难。这时，互联网活动委员会(IAB)迈出了一步：</p>
<p>1985年，IAB组织了第一个专门针对私营部门的研讨会，讨论TCP&#x2F;IP协议的潜力(和目前的限制)， 这次讨论在在政府&#x2F;学术科学家和私营部门之间，以及私营企业家之间进行。其中一个重要的内容就是：确保他们的产品的互操作性</p>
<h3 id="“晦涩难懂”的互联网"><a href="#“晦涩难懂”的互联网" class="headerlink" title="“晦涩难懂”的互联网"></a>“晦涩难懂”的互联网</h3><p>到1989年，主机的数量首次超过了10万，并在一年后攀升至30万。</p>
<p>但在这个阶段，<strong>互联网仍然只是少数人内行的网络</strong>，对外行来说仍然是一个相当令人生畏的地方。例如：查找数据的访问命令从复杂到难以理解，可用的文档大多是(高度)科学的，显示不吸引人(信使脚本，没有颜色)，寻找东西是一件棘手的事情，传输时间相对较慢)。对商业部门的主要吸引力是电子邮件设施和使用电子邮件、新闻组、“聊天”设施和电脑游戏。</p>
<h3 id="互联网发展的分界点"><a href="#互联网发展的分界点" class="headerlink" title="互联网发展的分界点"></a>互联网发展的分界点</h3><p>转眼来到了上世纪80年代末和90年代初，这个时间点是互联网发展的一个分界点，原因有几个：</p>
<ul>
<li>1990年，阿帕网(1983年被剥夺了军事研究功能)成为了自身成功的牺牲品。</li>
<li>1990年，蒙特利尔麦吉尔大学开发了第一个用于查找和检索计算机文件的互联网搜索引擎Archie。</li>
<li>1991年，美国国家科学基金会取消了对私人访问其骨干计算机的限制，</li>
<li>“信息高速公路”项目应运而生。这是为了普及戈尔的高性能计算法案而起的名字，该法案为进一步研究计算和改善美国互联网结构的基础设施提供了资金。</li>
<li>1992- 1996年期间，其最大拨款为国家科学基金15亿美元，NASA 6亿美元，能源部660美元。</li>
<li>1991年，万维网(WWW)问世</li>
</ul>
<p>下一节，我们将讲述WWW(万维网)的发展。敬请关注。</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>[1] <a href="https://www.let.leidenuniv.nl/history/ivh/chap2.htm">Chapter Two: From ARPANET to World Wide Web</a></p>
<p>欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8ff04a9934840c3c552ed41497bc4748_720w.jpg" alt="欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识"></p>
<p>也可以关注我的个人博客</p>
<p><a href="https://dianwoshishi.github.io/">点我试试的个人博客</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网发展简史(4) WWW</title>
    <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2(4)%20WWW.html</url>
    <content><![CDATA[<h2 id="互联网发展简史-4-WWW"><a href="#互联网发展简史-4-WWW" class="headerlink" title="互联网发展简史(4) WWW"></a>互联网发展简史(4) WWW</h2><p><img src="https://pic3.zhimg.com/80/v2-c2cfb99f03d33c3f8fc20a95b220fe82_720w.jpg" alt="18k金ins气质风CD耳钉"></p>
<p>万维网(World Wide Web, WWW)是可以通过一种被称为超文本传输协议(HTTP)来搜索和检索网站。该协议简化了地址的书写（使用前面所说的DNS系统），自动在互联网上搜索指定的地址，并自动调出文件查看，正如你现在浏览本文时看到的一样，不过那时候可没有现在这么酷。</p>
<h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>万维网的概念是1989年由Tim Berners-Lee和CERN(日内瓦的欧洲高能物理中心)的科学家们设计(前文说过研究资料在网上开放，但是需要自己检索，但他们觉得检索文件太麻烦，为了简化检索程序，提出了万维网的概念)。1990年，他们开发了一个“浏览器&#x2F;编辑器”程序，并命名为“万维网”(World Wide Web)。该程序在ftp网站上免费发布，这极大的简化了检索程序。 这个系统可以让链接隐藏在文本后面(使用超文本标记语言，HTML)，点击“鼠标”就可以激活。但这种新系统似乎并没有迅速应用起来，到1992年底，世界上只有50个网站，一年后这个数字仍然不超过150个。</p>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/screen1994.gif" alt="An early WWW screen (1994)"></p>
<p>上面的图片显示了1994年浏览器技术的“最先进”(早期版本不支持颜色，徽号和图表也在不同的窗口中)。</p>
<h3 id="点燃Web"><a href="#点燃Web" class="headerlink" title="点燃Web"></a>点燃Web</h3><h4 id="Mosaic-马赛克"><a href="#Mosaic-马赛克" class="headerlink" title="Mosaic(马赛克)"></a>Mosaic(马赛克)</h4><p>1993年，NCSA(美国国家超级计算应用中心，伊利诺斯州)的Mark Andreesen推出了Mosaic x(没错，这就是后来的网景浏览器，中文翻译可以叫做马赛克… …互联网历史上第一个获普遍使用和能够显示图片的网页浏览器)。它易于安装、使用，而且有24小时的客户支持。它还极大地提高了图形功能和安装的许多我们现在熟悉的特性(被后来Netscape Navigator和比尔·盖茨的Internet Explorer继承)。像其他许多互联网创新一样，Mosaic的试用版也免费提供给教育社区。Mosaic x很快就成为了一个大热门。到1994年，在世界各地的计算机上安装了成千上万个版本。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>当时的Mosaic开发的中心人物Mark Andreesen(这哥们曾经说，在网景面前，Windows只是一堆设计拙劣的驱动程序)和Silicon Graphic(计算机绘图用的高性能计算机制造公司，简称为SGI)公司的创始人吉姆·克拉克设立了「MOSAIC Communication Corp.」，这家公司之后1994年11月改名为「Netscape Communication Corp.」，中译为<strong>网景</strong>。于1997年1月7日正式终止开发和支持</p>
<p>虽然网景消失了，但是从html的img标签开始，到创造javascript，开创SSL，奠定了未来几十年的互联网Web基础，当年的星星之火现已燎原。</p>
<p>第一次浏览器大战后，在1998年网景公开了浏览器源代码，并将其命名为Mozilla。2004年基于Mozilla源代码，另一个杰出的浏览器诞生了，它就是Firefox（火狐）</p>
<p>笔者认为，这个公司在互联网历史上真的是神一样的存在。</p></blockquote>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/mosaic.gif" alt="An early opening screen for Mosaic and Netscape"></p>
<p><img src="https://www.let.leidenuniv.nl/history/ivh/netscape.gif" alt="An early opening screen for Mosaic and Netscape"></p>
<p>HTML可以创建具有吸引力的图形网站，这些网站可以通过新一代的浏览器轻松访问，这为全新的群体打开了Web。</p>
<p>到目前为止，Web已经服务于两个主要社区——科学界(访问在线文档)和更广泛的“网民”(网民)社区(访问电子邮件和新闻组设施)。现在商业网站开始大量涌现，紧随其后的是不远处的当地学校&#x2F;俱乐部&#x2F;家庭网站。功能更强大(也更便宜)的个人电脑(增加了网民数量和潜在的商业市场)的出现，以及通信基础设施容量的增加，加速了这些发展。</p>
<h4 id="蓬勃发展"><a href="#蓬勃发展" class="headerlink" title="蓬勃发展"></a>蓬勃发展</h4><p>1994年，有3,200万个主机和3,000个网站。12个月后，主机数量翻了一番，网站数量攀升至2.5万个。到第二年年底，主机的数量又翻了一番，网站的数量也增加了十倍以上。顺便提一下，在那一年，莱顿大学历史系建立了自己的网站，使其网站成为有史以来第一批的网站之一。<strong>第二年，我们开设了“历史学家的互联网”课程，在经济和社会历史板块内，我们开始开发“基于课程”的网站</strong>(云课堂？？？)。这一切都发生在1997年，当时集成到网络的主机数量已经达到了1,950万台，而网站的数量已经激增到1,200万台。据2001年1月的最新统计，主机数量达到1.1亿，网站数量达到3000万。</p>
<h3 id="互联网和网络之间的区别是什么"><a href="#互联网和网络之间的区别是什么" class="headerlink" title="互联网和网络之间的区别是什么?"></a>互联网和网络之间的区别是什么?</h3><p>Tim Berners-Lee(没错，就是提出万维网概念的那个哥们)经常被问到同样的问题，他的回答是:</p>
<ul>
<li>“互联网(‘Net’)是网络的网络。基本上它是由电脑和电缆制成的。Vint Cerf 和 Bob Khan所做的是弄清楚如何用它来发送小“包”的信息。正如Vint Cerf 指出的，数据包有点像明信片，上面有一个简单的地址。如果你把正确的地址放在一个数据包上，并把它交给任何一台作为网络一部分相连的计算机，每台计算机就会找出下一条电缆将它发送下去，这样它就能到达目的地。这就是互联网的作用。它可以在一秒钟之内将数据包发送到世界上的任何地方。</li>
<li>网络是一个抽象的(想象的)信息空间。<ul>
<li>在互联网上，你可以找到电脑——在Web上，你可以找到文件、声音、视频，….信息。</li>
<li>在互联网上，连接是计算机之间的电缆;在Web上，连接是超文本链接。</li>
<li>互联网的存在是由于网络上计算机之间通信的程序。没有互联网就没有Web。万维网使互联网变得有用（现在这个说法好像不太准确），因为人们对信息真的很感兴趣(更不用说知识和智慧了!)，而不是真的想知道关于计算机和电缆的知识。</li>
</ul>
</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>Chapter Two: From ARPANET to World Wide Web</p>
<p>欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8ff04a9934840c3c552ed41497bc4748_720w.jpg" alt="欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识"></p>
<p>也可以关注我的个人博客:<a href="https://dianwoshishi.github.io/">点我试试的个人博客</a></p>
<p><a href="https://dianwoshishi.github.io/" target="_blank" class="LinkCard">点我试试的个人博客</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网发展简史(5)第一次浏览器大战</title>
    <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2(5)%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98.html</url>
    <content><![CDATA[<p><img src="https://pic3.zhimg.com/80/v2-6ee73b0ea861779f5516ad8c0dc92272_720w.jpg"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>万维网真正开始在 1990 年代中期起飞。如果你想使用它，你需要一个网络浏览器。早期的互联网用户可以使用简单的基于文本的终端软件，但 Web 从一开始就有一个图形界面。</p>
<h3 id="早期的网络浏览器"><a href="#早期的网络浏览器" class="headerlink" title="早期的网络浏览器"></a>早期的网络浏览器</h3><p>由 Tim Berners-Lee设计的第一个网络浏览器被称为World Wide Web，但它<strong>无法在文档中显示图像</strong>，只能在弹出窗口中显示。然而，万维网只不过是一个原型。很快，其他开发商也加入了竞争。中国台湾工程师魏培元开发了一款名为 ViolaWWW 的浏览器。这可以在网页中显示图像，并具有基本的框架和脚本。但是 ViolaWWW 很快就被所有现代浏览器之父 Mosaic 打败。</p>
<h4 id="马赛克"><a href="#马赛克" class="headerlink" title="马赛克"></a>马赛克</h4><p>Mosaic是在伊利诺伊大学国家超级计算应用中心(NCSA) 开发的。与其他早期浏览器相比，Mosaic 更易于使用，具有更好的网页渲染，包括<strong>内嵌图形</strong>。最重要的是，它背后有一支才华横溢的工程师团队。Mosaic 不是第一个浏览器，但它确是第一个做对的浏览器，点燃了浏览器的市场。</p>
<p><img src="https://pic3.zhimg.com/80/v2-dbe94e32f1b223f299cba226ab8d8756_720w.jpg"></p>
<h4 id="网景"><a href="#网景" class="headerlink" title="网景"></a>网景</h4><p>Netscape 的浏览器对网络冲浪体验进行了大量技术改进，例如 cookie 和 Javascript。Navigator 是一种商业产品，售价约为 30 美元。他们 Netscape 对大学和 ISP 的许可有宽松的政策，因此许多人可以免费获得它。由于广泛分布和大量技术创新，Netscape Navigator 迅速成为主导标准。</p>
<p><img src="https://pic1.zhimg.com/80/v2-35016fd5753ad63659c06be1142abba4_720w.jpg"></p>
<h4 id="望远镜-Spyglass-和-Internet-Explorer"><a href="#望远镜-Spyglass-和-Internet-Explorer" class="headerlink" title="望远镜(Spyglass)和 Internet Explorer"></a>望远镜(Spyglass)和 Internet Explorer</h4><p>尽管 Netscape 取得了成功，但它并没有杀死 Mosaic。为了将他们的浏览器货币化，NCSA 将他们的商业资产分拆成一家名为Spyglass的公司。Spyglass 与 Netscape 竞争了一段时间，直到世界上最强大的软件公司微软进入网络浏览器市场。因此，他们从 Spyglass 获得了 Mosaic 许可，并创建了一个名为 Internet Explorer (IE) 的新浏览器。第一次浏览器战争由此开始。</p>
<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP.BluQ89-KWP4n4m_WTeazGgHaHO?pid=ImgDet&rs=1"></p>
<h2 id="第一次浏览器战争"><a href="#第一次浏览器战争" class="headerlink" title="第一次浏览器战争"></a>第一次浏览器战争</h2><p>在 1990 年代中期，Netscape 是硅谷的宠儿。Netscape 的商业模式建立在<strong>销售 Navigator 之上</strong>。但微软的大部分收入来自销售Windows 95和微软Office。为了抢占浏览器市场，Microsoft 决定将 Internet Explorer 与 Windows 98 的每个副本捆绑在一起。不仅捆绑在一起，而且集成到操作系统中(<strong>免费赠送 Internet Explorer</strong>)。在 Windows 98 中，计算机默认使用 IE。</p>
<h3 id="网景分崩离析"><a href="#网景分崩离析" class="headerlink" title="网景分崩离析"></a>网景分崩离析</h3><p>Netscape 通过向他们的产品添加更多功能来回击。他们将 Navigator 4.0 集成到名为 Netscape Communicator 的应用程序套件中。这包括浏览器以及电子邮件客户端、HTML 编辑器、新闻聚合器和其他 Internet 实用程序。但随着 Netscape 添加更多功能，它们的代码库变得笨拙。</p>
<p>1998 年初，Netscape 创建了一个非盈利基金会来创建开源代码库。他们以他们的吉祥物 Mozilla 命名基金会。Mozilla 基金会有潜力，但 Netscape 作为一个商业实体继续受到影响。那年晚些时候，他们与AOL合并。这也帮助他们免费提供他们的浏览器，但随着 Windows 98 接管桌面，为时已晚。在短短几年内，甚至 AOL 也转向了 Internet Explorer。Netscape的时代过去了。</p>
<p><img src="https://pic1.zhimg.com/80/v2-85b36a8c3f618555aeb6e5698dc5aac0_720w.jpg"></p>
<h3 id="微软的胜利"><a href="#微软的胜利" class="headerlink" title="微软的胜利"></a>微软的胜利</h3><p>通过将 Internet Explorer 与 Windows 以及 Mac OS 捆绑在一起，微软完全占领了市场。到 2002 年，Internet Explorer 占据了超过 95% 的市场份额。微软赢得了第一次浏览器战争。然后他们固步自封。当Windows XP时，微软已经停止创新。他们认为 IE 只是操作系统的另一部分，就像纸牌一样。随后几年停滞不前，但随着 Web 的发展和变化，新产品将从 Netscape 的灰烬中崛起。几乎被遗忘的 Mozilla 项目将再次挑战 IE，为第二次浏览器战争开辟道路。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>The First Browser War <a href="http://steve-lovelace.com/the-first-browser-war/">http://steve-lovelace.com/the-first-browser-war/</a></p>
<p>欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8ff04a9934840c3c552ed41497bc4748_720w.jpg" alt="欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识"></p>
<p>也可以关注我的个人博客:<a href="https://dianwoshishi.github.io/">点我试试的个人博客</a></p>
<p><a href="https://dianwoshishi.github.io/" target="_blank" class="LinkCard">点我试试的个人博客</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>互联网</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>从hello world开始，拆解函数栈结构</title>
    <url>//post/%E4%BB%8Ehello%20world%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%8B%86%E8%A7%A3%E5%87%BD%E6%95%B0%E6%A0%88%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<h1 id="从hello-world开始，拆解函数栈结构"><a href="#从hello-world开始，拆解函数栈结构" class="headerlink" title="从hello world开始，拆解函数栈结构"></a>从hello world开始，拆解函数栈结构</h1><h2 id="第一个程序helloworld"><a href="#第一个程序helloworld" class="headerlink" title="第一个程序helloworld"></a>第一个程序helloworld</h2><h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>首先我们有如下程序：<code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//main.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">test_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">test_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程序实现的功能很简单，就是从<code>scanf</code>输入一个字符串，赋值到<code>name</code>，并且通过<code>puts</code>打印。</p>
<p>是不是很简单！</p>
<h3 id="程序编译makefile"><a href="#程序编译makefile" class="headerlink" title="程序编译makefile"></a>程序编译makefile</h3><p>为了便于说明，我们使用makefile文件进行编译。创建文件名为<code>makefile</code>的文件，内容如下：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># makefile</span>
OBJ<span class="token operator">=</span>stack

<span class="token symbol"><span class="token variable">$</span>(OBJ)</span><span class="token punctuation">:</span>
	gcc main.c -o <span class="token variable">$@</span>

<span class="token symbol">clean</span><span class="token punctuation">:</span>
	-rm -rf <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们生成的文件名为<code>stack</code>，这里你可以改为你喜欢的任意名称。</p>
<p>使用<code>make</code>命令进行编译，会生成最终文件。运行后就可以看见输出。</p>
<h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>C语言中函数栈是如何组织的呢？都有哪些元素呢？</p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>首先，我们通过汇编代码，理解上述C语言代码，我们能更加清晰的看出一个<code>test_stack</code>函数到底干了什么。相关内容我们在其后直接进行了注释。</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># objdump -d .&#x2F;stack
.&#x2F;stack:     file format elf64-x86-64

00000000004005f6 &lt;test_stack&gt;:
  4005f6:	55                   	push   %rbp
  4005f7:	48 89 e5             	mov    %rsp,%rbp
  4005fa:	48 83 ec 30          	sub    $0x30,%rsp #栈上开辟了0x30&#x3D;48的空间，注意我们的局部变量只需要25的空间
  4005fe:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax # 从%fs:0x28取了一个值，放在了栈底之上，这就是canary，一种栈溢出的保护措施
  400605:	00 00 
  400607:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40060b:	31 c0                	xor    %eax,%eax
  40060d:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp) #char name[25] &#x3D; &#123;0&#125;;
  400614:	00 
  400615:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  40061c:	00 
  40061d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  400624:	00 
  400625:	c6 45 e8 00          	movb   $0x0,-0x18(%rbp)
  400629:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  40062d:	48 89 c6             	mov    %rax,%rsi
  400630:	bf 04 07 40 00       	mov    $0x400704,%edi #’%s&#39;
  400635:	b8 00 00 00 00       	mov    $0x0,%eax
  40063a:	e8 a1 fe ff ff       	callq  4004e0 &lt;__isoc99_scanf@plt&gt;
  40063f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  400643:	48 89 c7             	mov    %rax,%rdi
  400646:	e8 65 fe ff ff       	callq  4004b0 &lt;puts@plt&gt;
  40064b:	b8 00 00 00 00       	mov    $0x0,%eax
  400650:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400654:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx #检查canary
  40065b:	00 00 
  40065d:	74 05                	je     400664 &lt;test_stack+0x6e&gt;
  40065f:	e8 5c fe ff ff       	callq  4004c0 &lt;__stack_chk_fail@plt&gt;
  400664:	c9                   	leaveq 
  400665:	c3                   	retq   

0000000000400666 &lt;main&gt;:
  400666:	55                   	push   %rbp
  400667:	48 89 e5             	mov    %rsp,%rbp
  40066a:	b8 00 00 00 00       	mov    $0x0,%eax
  40066f:	e8 82 ff ff ff       	callq  4005f6 &lt;test_stack&gt;
  400674:	b8 00 00 00 00       	mov    $0x0,%eax
  400679:	5d                   	pop    %rbp
  40067a:	c3                   	retq   
  40067b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>主要进行了以下操作：</p>
<ul>
<li><strong>callq操作。</strong>我们需要注意一个隐含操作，就是上述第40行<code>callq  4005f6 &lt;test_stack&gt;</code>,这个操作隐含将下一条指令地址压栈，即0x400674</li>
<li><strong>开辟栈空间。</strong>开辟了大小为48的栈空间，这里注意，我们的局部变量name只需要25大小的空间</li>
<li><strong>canary值。</strong>从%fs:0x28取了一个值，放在了栈底之上，这就是canary，一种栈溢出的保护措施，最后对其检查</li>
<li><strong>初试化操作。</strong>使用3个<code>movq</code>和1个<code>movb</code>对name变量进行了初始化。name变量的起始地址为<code>$rbp-0x30$</code>即<code>$rsp$</code>栈顶</li>
<li><strong>赋值。</strong>使用<code>scanf</code>函数，对name变量进行了赋值</li>
</ul>
<p>其中，初始化，赋值通过汇编代码都很容易看出。下面我们通过gdb主要来看看栈结构吧。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>使用gdb+pwngdb插件进行解释，如不清楚，可私信我或加我公众号。</p>
<h3 id="callq操作"><a href="#callq操作" class="headerlink" title="callq操作"></a>callq操作</h3><p>![image-20210721000901757](从hello world开始，拆解函数栈结构&#x2F;image-20210721000901757.png)</p>
<p>在进行callq操作之前，rbp和rsp为同一地址，说明栈空间大小为0.</p>
<p>![image-20210721001254187](从hello world开始，拆解函数栈结构&#x2F;image-20210721001254187.png)</p>
<p>注意箭头部分，当我们进入<code>test_stack</code>函数时，callq操作，进行了隐含操作，callq的下一条指令地址压栈，在这里我们可以看出，其内容为<code>0x400674</code>，与我们静态分析汇编代码一致。验证了callq操作对栈的影响。</p>
<h3 id="开辟栈空间"><a href="#开辟栈空间" class="headerlink" title="开辟栈空间"></a>开辟栈空间</h3><p>此操作中，注意rsp和rbp的变化。</p>
<ul>
<li>push指令，将栈底压栈。</li>
</ul>
<p>![image-20210721001715969](从hello world开始，拆解函数栈结构&#x2F;image-20210721001715969.png)</p>
<ul>
<li>将栈底和栈顶地址设为相同（可通过栈底的上一条内容01：0008，恢复上一个栈底）。</li>
</ul>
<p>![image-20210721001827503](从hello world开始，拆解函数栈结构&#x2F;image-20210721001827503.png)</p>
<ul>
<li>开辟栈空间，大小为0x30&#x3D;48。</li>
</ul>
<p>![image-20210721002102212](从hello world开始，拆解函数栈结构&#x2F;image-20210721002102212.png)</p>
<p>红框中<code>[00:0000-06:0030)</code>之间，为当前<code>test_stack</code>栈帧中的结构，大小为0x30&#x3D;48字节。中间的数据为一些初始化函数执行过程中残留的栈数据，暂时不用管它。(s + buffer + canary)</p>
<p>rbp为test_stack函数的第一个push rbp的操作压入的栈底（saved ebp)</p>
<p>07:0038为test_stack函数执行完毕后的返回地址。(return address)</p>
<p>示意图如下：</p>
<p><img src="https://manybutfinite.com/img/stack/bufferCanary.png" alt="See the source image"></p>
<h3 id="canary值"><a href="#canary值" class="headerlink" title="canary值"></a>canary值</h3><p>如下图，我们继续执行两步，该函数在<code>fs:[0x28]</code>处取了一个值，然后放入了rbp-8的位置，即图中画线的位置，值为：0x92cb97cb6f51ae00，这个数就是我们所谓的canary，金丝雀。主要用来检测栈溢出。</p>
<p>![image-20210721003510355](从hello world开始，拆解函数栈结构&#x2F;image-20210721003510355.png)</p>
<p>然后我们查看栈顶开始的48个字节，即栈的内容</p>
<p>![image-20210721004153415](从hello world开始，拆解函数栈结构&#x2F;image-20210721004153415.png)</p>
<p>s: 0x7fffffffddd0:    （0x00000000    0x00000000    0x00000000    0x00000000<br>0x7fffffffdde0:    0x00000000    0x00000000    0x00）s表示我们局部变量填充的空间         </p>
<p>buffer: (000000    0x00000000<br>0x7fffffffddf0:    0x00400680    0x00000000)buffer    代表补齐8字节所占用的空间</p>
<p>canary: (0x6f51ae00    0x92cb97cb)canary 代表栈溢出检测指标。</p>
<p><img src="https://manybutfinite.com/img/stack/bufferCanary.png" alt="See the source image"></p>
<p>通过IDA pro验证我们的想法：</p>
<p>![image-20210721010044515](从hello world开始，拆解函数栈结构&#x2F;image-20210721010044515.png)</p>
<h2 id="缓冲区溢出分析"><a href="#缓冲区溢出分析" class="headerlink" title="缓冲区溢出分析"></a>缓冲区溢出分析</h2><p>实际上我们花了大量的篇幅去讲栈的结构，其实目的就是这么一张图</p>
<p><img src="https://manybutfinite.com/img/stack/bufferCanary.png" alt="See the source image"></p>
<p>栈溢出其实就是使得字符串长度达到return address的位置，使得在函数执行完毕retn时，return address的地址弹出给rip寄存器，从而使得CPU按照rip寄存的内容执行下一条指令。这里面要非常清楚的就是栈的结构，栈空间的计算真正要做到”一字不差“！</p>
<p>当然了，这里的canary对栈进行了保护，是一个随机生成的数。当然还有很多办法来绕过甚至是猜出canary，实现栈溢出，这不在本篇文章的范畴之内，留给下一次机会吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对通过一个最简单的程序对栈的结构进行了静态和动态的分析，得出了一张刻画栈帧空间的图。对于栈的计算要十分的仔细，这样在pwn题中才能做到心中有数，一招制敌。</p>
]]></content>
  </entry>
  <entry>
    <title>从hello world开始，拆解函数栈结构</title>
    <url>//post/%E4%BB%8Ehello%20world%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%8B%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="从hello-world开始，拆解字符串常量的存储位置"><a href="#从hello-world开始，拆解字符串常量的存储位置" class="headerlink" title="从hello world开始，拆解字符串常量的存储位置"></a>从hello world开始，拆解字符串常量的存储位置</h1><h2 id="第一个程序helloworld"><a href="#第一个程序helloworld" class="headerlink" title="第一个程序helloworld"></a>第一个程序helloworld</h2><h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>首先我们有如下程序：<code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//main.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world! %s\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>g_pstr <span class="token operator">=</span> <span class="token string">"global_I'm a string\n"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>pname <span class="token operator">=</span> <span class="token string">"III'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringI'm a stringI'm a string"</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span>pname<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span>g_pstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"local_string_I'm a string"</span><span class="token punctuation">;</span> 
	<span class="token function">display</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程序实现的功能很简单，就是输出三个字符串pname，g_pstr和name，为了便于说明，其中故意使用了一个函数调用<code>int display(char *)</code>。</p>
<p>函数的逻辑为，main函数–&gt; display()函数(一个参数)–&gt;printf函数(两个参数)。</p>
<p>是不是很简单！</p>
<h3 id="程序编译makefile"><a href="#程序编译makefile" class="headerlink" title="程序编译makefile"></a>程序编译makefile</h3><p>为了便于说明，我们使用makefile文件进行编译。创建文件名为<code>makefile</code>的文件，内容如下：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># makefile</span>
OBJ<span class="token operator">=</span>printf.main

<span class="token symbol"><span class="token variable">$</span>(OBJ)</span><span class="token punctuation">:</span>
	gcc main.c -o <span class="token variable">$@</span>

<span class="token symbol">clean</span><span class="token punctuation">:</span>
	-rm <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们生成的文件名为<code>printf.main</code>，这里你可以改为你喜欢的任意名称。</p>
<p>使用<code>make</code>命令进行编译，会生成最终文件。运行后就可以看见输出。</p>
<h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>我们想要知道字符串常量在程序运行中存储的位置</p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>我们通过命令<code>objdump -d ./printf.main</code>, 查看相应的汇编代码。如下所示，定位到关键步骤，关键步骤已经使用‘#’注释</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">
.&#x2F;printf.main:     file format elf64-x86-64

00000000004005d6 &lt;display&gt;:
  4005d6:	55                   	push   %rbp
  4005d7:	48 89 e5             	mov    %rsp,%rbp
  4005da:	48 83 ec 10          	sub    $0x10,%rsp
  4005de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4005e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005e6:	48 89 c6             	mov    %rax,%rsi
  4005e9:	bf 48 07 40 00       	mov    $0x400748,%edi
  4005ee:	b8 00 00 00 00       	mov    $0x0,%eax
  4005f3:	e8 b8 fe ff ff       	callq  4004b0 &lt;printf@plt&gt;
  4005f8:	90                   	nop
  4005f9:	c9                   	leaveq 
  4005fa:	c3                   	retq   

00000000004005fb &lt;main&gt;:
  4005fb:	55                   	push   %rbp
  4005fc:	48 89 e5             	mov    %rsp,%rbp
  4005ff:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  400606:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40060d:	00 00 
  40060f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400613:	31 c0                	xor    %eax,%eax
  400615:	48 c7 85 e8 fe ff ff 	movq   $0x400770,-0x118(%rbp)			# 0x400770作为pname的地址
  40061c:	70 07 40 00 
  400620:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  400627:	48 89 c7             	mov    %rax,%rdi
  40062a:	e8 61 fe ff ff       	callq  400490 &lt;puts@plt&gt;
  40062f:	48 8b 05 12 0a 20 00 	mov    0x200a12(%rip),%rax        # 601048 &lt;g_pstr&gt;
  400636:	48 89 c7             	mov    %rax,%rdi
  400639:	e8 52 fe ff ff       	callq  400490 &lt;puts@plt&gt;
  40063e:	48 b8 6c 6f 63 61 6c 	movabs $0x74735f6c61636f6c,%rax		#‘local_st’ &quot;local_string_I&#39;m a string&quot;变量以常量整型的方式进行复制。
  400645:	5f 73 74 
  400648:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  40064f:	48 b8 72 69 6e 67 5f 	movabs $0x6d27495f676e6972,%rax  # ‘ring_I&#39;m’
  400656:	49 27 6d 
  400659:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  400660:	48 b8 20 61 20 73 74 	movabs $0x6e69727473206120,%rax
  400667:	72 69 6e 
  40066a:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  400671:	48 c7 85 08 ff ff ff 	movq   $0x67,-0xf8(%rbp)
  400678:	67 00 00 00 
  40067c:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
  400683:	b8 00 00 00 00       	mov    $0x0,%eax
  400688:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  40068d:	48 89 d7             	mov    %rdx,%rdi
  400690:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  400693:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  40069a:	48 89 c7             	mov    %rax,%rdi
  40069d:	e8 34 ff ff ff       	callq  4005d6 &lt;display&gt;
  4006a2:	b8 00 00 00 00       	mov    $0x0,%eax
  4006a7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4006ab:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  4006b2:	00 00 
  4006b4:	74 05                	je     4006bb &lt;main+0xc0&gt;
  4006b6:	e8 e5 fd ff ff       	callq  4004a0 &lt;__stack_chk_fail@plt&gt;
  4006bb:	c9                   	leaveq 
  4006bc:	c3                   	retq   
  4006bd:	0f 1f 00             	nopl   (%rax)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="第一个pname参数"><a href="#第一个pname参数" class="headerlink" title="第一个pname参数"></a>第一个pname参数</h3><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">400615:	48 c7 85 e8 fe ff ff 	movq   $0x400770,-0x118(%rbp)			# 0x400770作为pname的地址
40061c:	70 07 40 00 
400620:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
400627:	48 89 c7             	mov    %rax,%rdi
40062a:	e8 61 fe ff ff       	callq  400490 &lt;puts@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>![image-20210720102416074](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720102416074.png)</p>
<p>查看地址<strong>0x400770</strong>，得到字符串。</p>
<h3 id="第二个参数g-pstr"><a href="#第二个参数g-pstr" class="headerlink" title="第二个参数g_pstr"></a>第二个参数g_pstr</h3><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">40062f:	48 8b 05 12 0a 20 00 	mov    0x200a12(%rip),%rax        # 601048 &lt;g_pstr&gt;
400636:	48 89 c7             	mov    %rax,%rdi
400639:	e8 52 fe ff ff       	callq  400490 &lt;puts@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>![image-20210720102733348](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720102733348.png)</p>
<p>查看地址<strong>0x400759</strong>，得到地址</p>
<h3 id="第三个参数字符串常量"><a href="#第三个参数字符串常量" class="headerlink" title="第三个参数字符串常量"></a>第三个参数字符串常量</h3><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">40063e:	48 b8 6c 6f 63 61 6c 	movabs $0x74735f6c61636f6c,%rax		#‘local_st’ &quot;local_string_I&#39;m a string&quot;变量以常量整型的方式进行复制。
400645:	5f 73 74 
400648:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
40064f:	48 b8 72 69 6e 67 5f 	movabs $0x6d27495f676e6972,%rax  # ‘ring_I&#39;m’
400656:	49 27 6d 
400659:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
400660:	48 b8 20 61 20 73 74 	movabs $0x6e69727473206120,%rax
400667:	72 69 6e 
40066a:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
400671:	48 c7 85 08 ff ff ff 	movq   $0x67,-0xf8(%rbp)
400678:	67 00 00 00 
40067c:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
400683:	b8 00 00 00 00       	mov    $0x0,%eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>0x74735f6c61636f6c -&gt; 为字符串”local_st“</p>
<p>0x6d27495f676e6972-&gt;为字符串”ring_I’m“</p>
<p>其他等等</p>
<p>得到字符串。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h4 id="全局变量和只有引用的字符串常量，使用rodata数据区存储其值"><a href="#全局变量和只有引用的字符串常量，使用rodata数据区存储其值" class="headerlink" title="全局变量和只有引用的字符串常量，使用rodata数据区存储其值"></a>全局变量和只有引用的字符串常量，使用rodata数据区存储其值</h4><p>全局变量g_pstr和pname所指向的地址，均为<code>.rodata</code>，意思是read only。从以下IDA pro的结果中我们也能看出来。</p>
<p>![image-20210720143206385](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720143206385.png)</p>
<h4 id="能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间"><a href="#能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间" class="headerlink" title="能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间"></a>能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用<code>rodata</code>空间</h4><p>对于<code>char name[256] = &quot;local_string_I&#39;m a string&quot;; </code>实现的赋值语句，其常量是以整型的方式存储，然后赋值到栈上的name变量中。实际上，这是编译器帮助我们实现了这个步骤。</p>
<p>为了确认这一事实，我们做如下实验：</p>
<p>使用<code>char name[256] = &quot;llocal_string_I&#39;m a stringlocal_string_I&#39;m a stringlocal_string_I&#39;m a stringlocal_string_I&#39;m a stringocal_string_I&#39;m a string&quot;;</code>进行试验，得到如下结果。</p>
<p>![image-20210720143749564](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720143749564.png)</p>
<p>可以看出，确实是将字符串拆解为整型常量，然后赋值到栈空间上。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其他的常量也可以依次类推。</p>
<p>一般我们的理解都是字符串常量都是放在<code>rodata</code>中，但是通过汇编代码，我们可以清晰的看出，当字符串常量初始化给一个数组时，字符串常量并不会放在<code>rodata</code>中，二是将字符串常量转化为多个整型常量，然后在运行时直接复制到栈上。</p>
]]></content>
  </entry>
  <entry>
    <title>从一个hello world说起</title>
    <url>//post/%E4%BB%8E%E4%B8%80%E4%B8%AAhello%20world%E8%AF%B4%E8%B5%B7.html</url>
    <content><![CDATA[<h1 id="从一个hello-world说起"><a href="#从一个hello-world说起" class="headerlink" title="从一个hello world说起"></a>从一个hello world说起</h1><p>大家好，我是明说网络的小明同学。今天我们从C语言的Hello World说起，和大家一起温习一下C语言中一个Hello World怎么运行起来的，以及C语言如何组织栈缓冲区等。本文不适用于C语言初学者，需要具备有一定的汇编基础。好了下面，我们开始吧。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>本文的工具为：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">操作系统：Ubuntu16.04， 4.15.0-142-generic

编译器：gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)

make工具GNU Make 4.1

反汇编查看器：objdump

elf文件查看器：readelf

gdb，pwngdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="C语言介绍"><a href="#C语言介绍" class="headerlink" title="C语言介绍"></a>C语言介绍</h2><p>C 语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发 UNIX 操作系统而设计的。UNIX 操作系统，C编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。</p>
<p>同时，C语言是一门大学期间基本上都会开设的课程。作为一门入门编程课程，C语言有着独特的魅力和不可替代的作用。虽然当前python火热，C语言好像显得不那么重要了，“python难道不香吗”的疑问开始出现。但是我的观点是：每种语言有每种语言的优势，python永远也取代不了C语言。像我独爱指针，能够带来自由的感觉。</p>
<p>下面就开始我们的探索之旅吧。</p>
<h2 id="第一个程序helloworld"><a href="#第一个程序helloworld" class="headerlink" title="第一个程序helloworld"></a>第一个程序helloworld</h2><h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><p>首先我们有如下程序：<code>main.c</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//main.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world! %s\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I'm a string"</span><span class="token punctuation">;</span>
	<span class="token function">display</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述程序实现的功能很简单，就是输出一句话<code>hello world! I&#39;m a string</code>，为了便于说明，其中故意使用了一个函数调用<code>int display(char *)</code>。</p>
<p>函数的逻辑为，main函数–&gt; display()函数(一个参数)–&gt;printf函数(两个参数)。</p>
<p>是不是很简单！</p>
<h3 id="程序编译makefile"><a href="#程序编译makefile" class="headerlink" title="程序编译makefile"></a>程序编译makefile</h3><p>为了便于说明，我们使用makefile文件进行编译。创建文件名为<code>makefile</code>的文件，内容如下：</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># makefile</span>
OBJ<span class="token operator">=</span>printf.main

<span class="token symbol"><span class="token variable">$</span>(OBJ)</span><span class="token punctuation">:</span>
	gcc main.c -o <span class="token variable">$@</span>

<span class="token symbol">clean</span><span class="token punctuation">:</span>
	-rm <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们生成的文件名为<code>printf.main</code>，这里你可以改为你喜欢的任意名称。</p>
<p>使用<code>make</code>命令进行编译，会生成最终文件。运行后就可以看见<code>hello world! I&#39;m a string</code></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>到这里我们就完成了一个helloworld程序的编写和编译，并且运行。是不是很简单。对于初学者，其实到这里就完了，姑且可以认为main函数就是一个程序的开始和结束（我曾经就一直这么认为）。但是对于有过一定经验的人来说，就知道：main函数并不是一个程序的开始，也不是一个程序的结束。</p>
<p>咦，这么神奇的吗？就让我们来看看吧。</p>
<h2 id="Hello-world-的背后"><a href="#Hello-world-的背后" class="headerlink" title="Hello world 的背后"></a>Hello world 的背后</h2><p>首先让我们来认识一下我们生成的<code>printf.main。</code></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">file .&#x2F;printf.main 
.&#x2F;printf.main: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;5c389a402866aaa012b8b8ab992fed778eb989b0, not stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>ELF是执行和链接格式（Execurable and Linking Format）的缩略词。它是UNIX系统的几种可执行文件格式中的一种。</p>
<p>使用命令<code>readelf -h ./printf.main &gt; elf_head.txt</code></p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2&#39;s complement, little endian
  Version:                           1 (current)
  OS&#x2F;ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x4004a0 &#x2F;&#x2F;注意这一行
  Start of program headers:          64 (bytes into file)
  Start of section headers:          6712 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         9
  Size of section headers:           64 (bytes)
  Number of section headers:         31
  Section header string table index: 28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里面，我们注意第11行，<code>Entry point address:               0x4004a0</code>,显示，入口点地址为address，说明操作系统在运行这个<code>printf.main</code>程序时，首先从这个地址开始运行。那么我们看看这个地址到底是什么吧</p>
<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>使用命令<code>objdump -d printf.main &gt; objdump.txt</code>将程序的汇编代码提取出来（删除了一些当前没有必要说明的内容），如下所示：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">
printf.main:     file format elf64-x86-64


Disassembly of section .init:

0000000000400428 &lt;_init&gt;:
  400428:	48 83 ec 08          	sub    $0x8,%rsp
  40042c:	48 8b 05 c5 0b 20 00 	mov    0x200bc5(%rip),%rax        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;
  400433:	48 85 c0             	test   %rax,%rax
  400436:	74 05                	je     40043d &lt;_init+0x15&gt;
  400438:	e8 53 00 00 00       	callq  400490 &lt;__libc_start_main@plt+0x10&gt;
  40043d:	48 83 c4 08          	add    $0x8,%rsp
  400441:	c3                   	retq   

Disassembly of section .plt:


0000000000400470 &lt;printf@plt&gt;:
  400470:	ff 25 aa 0b 20 00    	jmpq   *0x200baa(%rip)        # 601020 &lt;_GLOBAL_OFFSET_TABLE_+0x20&gt;
  400476:	68 01 00 00 00       	pushq  $0x1
  40047b:	e9 d0 ff ff ff       	jmpq   400450 &lt;_init+0x28&gt;

0000000000400480 &lt;__libc_start_main@plt&gt;:
  400480:	ff 25 a2 0b 20 00    	jmpq   *0x200ba2(%rip)        # 601028 &lt;_GLOBAL_OFFSET_TABLE_+0x28&gt;
  400486:	68 02 00 00 00       	pushq  $0x2
  40048b:	e9 c0 ff ff ff       	jmpq   400450 &lt;_init+0x28&gt;

Disassembly of section .plt.got:

0000000000400490 &lt;.plt.got&gt;:
  400490:	ff 25 62 0b 20 00    	jmpq   *0x200b62(%rip)        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;
  400496:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000004004a0 &lt;_start&gt;:
  4004a0:	31 ed                	xor    %ebp,%ebp
  4004a2:	49 89 d1             	mov    %rdx,%r9
  4004a5:	5e                   	pop    %rsi
  4004a6:	48 89 e2             	mov    %rsp,%rdx
  4004a9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4004ad:	50                   	push   %rax
  4004ae:	54                   	push   %rsp
  4004af:	49 c7 c0 b0 06 40 00 	mov    $0x4006b0,%r8 &#x2F;&#x2F;00000000004006b0 &lt;__libc_csu_fini&gt;:
  4004b6:	48 c7 c1 40 06 40 00 	mov    $0x400640,%rcx &#x2F;&#x2F;0000000000400640 &lt;__libc_csu_init&gt;:
  4004bd:	48 c7 c7 bb 05 40 00 	mov    $0x4005bb,%rdi &#x2F;&#x2F;00000000004005bb &lt;main&gt;:
  4004c4:	e8 b7 ff ff ff       	callq  400480 &lt;__libc_start_main@plt&gt;
  4004c9:	f4                   	hlt    
  4004ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400596 &lt;display&gt;:
  400596:	55                   	push   %rbp
  400597:	48 89 e5             	mov    %rsp,%rbp
  40059a:	48 83 ec 10          	sub    $0x10,%rsp
  40059e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4005a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4005a6:	48 89 c6             	mov    %rax,%rsi
  4005a9:	bf c4 06 40 00       	mov    $0x4006c4,%edi
  4005ae:	b8 00 00 00 00       	mov    $0x0,%eax
  4005b3:	e8 b8 fe ff ff       	callq  400470 &lt;printf@plt&gt;
  4005b8:	90                   	nop
  4005b9:	c9                   	leaveq 
  4005ba:	c3                   	retq   

00000000004005bb &lt;main&gt;:
  4005bb:	55                   	push   %rbp
  4005bc:	48 89 e5             	mov    %rsp,%rbp
  4005bf:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  4005c6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4005cd:	00 00 
  4005cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4005d3:	31 c0                	xor    %eax,%eax
  4005d5:	48 b8 49 27 6d 20 61 	movabs $0x74732061206d2749,%rax
  4005dc:	20 73 74 
  4005df:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  4005e6:	48 c7 85 f8 fe ff ff 	movq   $0x676e6972,-0x108(%rbp)
  4005ed:	72 69 6e 67 
  4005f1:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
  4005f8:	b8 00 00 00 00       	mov    $0x0,%eax
  4005fd:	b9 1e 00 00 00       	mov    $0x1e,%ecx
  400602:	48 89 d7             	mov    %rdx,%rdi
  400605:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  400608:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  40060f:	48 89 c7             	mov    %rax,%rdi
  400612:	e8 7f ff ff ff       	callq  400596 &lt;display&gt;
  400617:	b8 00 00 00 00       	mov    $0x0,%eax
  40061c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  400620:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  400627:	00 00 
  400629:	74 05                	je     400630 &lt;main+0x75&gt;
  40062b:	e8 30 fe ff ff       	callq  400460 &lt;__stack_chk_fail@plt&gt;
  400630:	c9                   	leaveq 
  400631:	c3                   	retq   
  400632:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400639:	00 00 00 
  40063c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400640 &lt;__libc_csu_init&gt;:
  400640:	41 57                	push   %r15
  400642:	41 56                	push   %r14
  400644:	41 89 ff             	mov    %edi,%r15d
  400647:	41 55                	push   %r13
  400649:	41 54                	push   %r12
  40064b:	4c 8d 25 be 07 20 00 	lea    0x2007be(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;
  400652:	55                   	push   %rbp
  400653:	48 8d 2d be 07 20 00 	lea    0x2007be(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;
  40065a:	53                   	push   %rbx
  40065b:	49 89 f6             	mov    %rsi,%r14
  40065e:	49 89 d5             	mov    %rdx,%r13
  400661:	4c 29 e5             	sub    %r12,%rbp
  400664:	48 83 ec 08          	sub    $0x8,%rsp
  400668:	48 c1 fd 03          	sar    $0x3,%rbp
  40066c:	e8 b7 fd ff ff       	callq  400428 &lt;_init&gt;
  400671:	48 85 ed             	test   %rbp,%rbp
  400674:	74 20                	je     400696 &lt;__libc_csu_init+0x56&gt;
  400676:	31 db                	xor    %ebx,%ebx
  400678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40067f:	00 
  400680:	4c 89 ea             	mov    %r13,%rdx
  400683:	4c 89 f6             	mov    %r14,%rsi
  400686:	44 89 ff             	mov    %r15d,%edi
  400689:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40068d:	48 83 c3 01          	add    $0x1,%rbx
  400691:	48 39 eb             	cmp    %rbp,%rbx
  400694:	75 ea                	jne    400680 &lt;__libc_csu_init+0x40&gt;
  400696:	48 83 c4 08          	add    $0x8,%rsp
  40069a:	5b                   	pop    %rbx
  40069b:	5d                   	pop    %rbp
  40069c:	41 5c                	pop    %r12
  40069e:	41 5d                	pop    %r13
  4006a0:	41 5e                	pop    %r14
  4006a2:	41 5f                	pop    %r15
  4006a4:	c3                   	retq   
  4006a5:	90                   	nop
  4006a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4006ad:	00 00 00 

00000000004006b0 &lt;__libc_csu_fini&gt;:
  4006b0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004006b4 &lt;_fini&gt;:
  4006b4:	48 83 ec 08          	sub    $0x8,%rsp
  4006b8:	48 83 c4 08          	add    $0x8,%rsp
  4006bc:	c3                   	retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>这里我们注意第45，46，47，48行，注意其中</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">4004af:	49 c7 c0 b0 06 40 00 	mov    $0x4006b0,%r8 &#x2F;&#x2F;00000000004006b0 &lt;__libc_csu_fini&gt;:
4004b6:	48 c7 c1 40 06 40 00 	mov    $0x400640,%rcx &#x2F;&#x2F;0000000000400640 &lt;__libc_csu_init&gt;:
4004bd:	48 c7 c7 bb 05 40 00 	mov    $0x4005bb,%rdi &#x2F;&#x2F;00000000004005bb &lt;main&gt;:
4004c4:	e8 b7 ff ff ff       	callq  400480 &lt;__libc_start_main@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>__libc_start_main@plt</code>包含了三个参数，<code>__libc_csu_fini</code>,<code>__libc_csu_init</code>,<code>main</code>显然，从名称上就可以看出这四个函数的作用。</p>
<p>__libc_start_main是libc.so.6中的一个函数。它的原型是这样的：</p>
<pre class="line-numbers language-none"><code class="language-none">extern int BP_SYM (__libc_start_main) (int (*main) (int, char **, char **),
		int argc,
		char *__unbounded *__unbounded ubp_av,
		void (*init) (void),
		void (*fini) (void),
		void (*rtld_fini) (void),
		void *__unbounded stack_end)
__attribute__ ((noreturn));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个函数需要做的是建立&#x2F;初始化一些数据结构&#x2F;环境然后调用我们的main()。</p>
<p>程序启动的过程应该：<code>_start -&gt; __libc_start_main -&gt; __libc_csu_init -&gt; _init -&gt; main -&gt; _fini</code>.</p>
<p>这篇文章有详细的说明：<a href="https://blog.csdn.net/gary_ygl/article/details/8506007">linux编程之main()函数启动过程</a></p>
<h3 id="栈缓冲区及结构"><a href="#栈缓冲区及结构" class="headerlink" title="栈缓冲区及结构"></a>栈缓冲区及结构</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><h3 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h3><p>x86_64有16个64位寄存器，分别是：</p>
<p>%rax，%rbx，%rcx，%rdx，%esi，%edi，%rbp，%rsp，%r8，%r9，%r10，%r11，%r12，%r13，%r14，%r15。</p>
<p>其中：</p>
<p>%rax 作为函数返回值使用。<br>%rsp 栈指针寄存器，指向栈顶<br>%rdi，%rsi，%rdx，%rcx，%r8，%r9 用作函数参数，依次对应第1参数，第2参数<br>%rbx，%rbp，%r12，%r13，%14，%15 用作数据存储，遵循被调用者使用规则，简单说就是随便用，调用子函数之前要备份它，以防他被修改<br>%r10，%r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要先保存原值</p>
<p>64位与32位的不同在于64位不用压栈来存储下一个函数参数，而是放在了%rdi，%rsi，%rdx，%rcx，%r8，%r9六个寄存器中，超出部分再压栈。</p>
<p><img src="https://pic1.zhimg.com/v2-8c6f52a7fabfb4f31464e51c3aa0e8a4_r.jpg" alt="preview"></p>
<p><img src="https://pic2.zhimg.com/v2-03edf3d060b91b58698db2a58bfb3be5_r.jpg" alt="preview"></p>
<p><img src="https://pic4.zhimg.com/80/v2-0cbd2ee34a6a173804028b19fe0a9167_720w.jpg" alt="img"></p></blockquote>
<p>首先，我们将<code>main.c</code>文件进行汇编，使用命令<code>gcc -S main.c</code>，在当前目录下回生成<code>main.s</code>的汇编文件，内容如下：</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">	.file	&quot;main.c&quot;
	.section	.rodata
.LC0:
	.string	&quot;hello world! %s\n&quot;
	.text
	.globl	display
	.type	display, @function
display:
.LFB0:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	movl	$.LC0, %edi
	movl	$0, %eax
	call	printf
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	display, .-display
	.globl	main
	.type	main, @function
main:
.LFB1:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$272, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movabsq	$8391086132249306953, %rax &#x2F;&#x2F;0x74732061206d2749 (&quot;I&#39;m a st&quot;)
	movq	%rax, -272(%rbp)
	movq	$1735289202, -264(%rbp)
	leaq	-256(%rbp), %rdx
	movl	$0, %eax
	movl	$30, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	-272(%rbp), %rax
	movq	%rax, %rdi &#x2F;&#x2F;使用%rdi寄存器压入参数
	call	display &#x2F;&#x2F;调用函数
	movl	$0, %eax
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L4
	call	__stack_chk_fail
.L4:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	main, .-main
	.ident	&quot;GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609&quot;
	.section	.note.GNU-stack,&quot;&quot;,@progbits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><p>在53，54行，使用<code>rdi</code>压入了一个参数，参数的地址在<code>-272(%rbp)（即rdi）</code>, 可以看出正好是字符串”I’m a string”的地址。如下所示：![image-20210719112214862](从一个hello world说起&#x2F;image-20210719112214862.png)</p>
<p>其中，函数调用栈缓冲区<code>backtrace</code>显示当前栈缓冲区为main，再上一层为__libc_start_main，再次印证了上一节的说法。</p>
<h4 id="display函数"><a href="#display函数" class="headerlink" title="display函数"></a>display函数</h4><p>下面我们进入display函数，可以看出printf的两个参数分别放在<code>rdi,rsi</code>两个寄存器当中。</p>
<p>![image-20210719112513484](从一个hello world说起&#x2F;image-20210719112513484.png)其中，函数调用栈缓冲区<code>backtrace</code>显示当前栈缓冲区为display，再上一层为main，__libc_start_main，再次印证了上一节的说法。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>通过对main函数中display函数的参数，display函数中的printf函数的参数进行实验，说明了C语言在函数调用时的栈缓冲区的组织。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>对于一个普普通通的C语言程序，其实其背后是一堆复杂的操作系统预备好的操作，执行完毕之后，就开始执行我们的main函数。main函数并不是程序执行的第一个函数，当然也不是最后一个。我们编写的程序的main函数，仅仅是操作系统在加载elf文件时候调用的函数而已，仅仅是函数而已。</p>
<p>栈缓冲区的组织，一定要动手自己调一调，理解栈缓冲区，有助于理解pwn题中的栈缓冲的利用。</p>
<p>这就是我喜欢C语言的原因，因为他能让我更加清晰的看到程序运行的背后，而像python这类语言，我也使用，因为真的方便，但是对于理解计算机、理解背后的故事非常的不利。</p>
<p>关注我，学习更多系统的知识！</p>
]]></content>
  </entry>
  <entry>
    <title>以色列网络作战部队之C4i</title>
    <url>//post/%E4%BB%A5%E8%89%B2%E5%88%97%E7%BD%91%E7%BB%9C%E4%BD%9C%E6%88%98%E9%83%A8%E9%98%9FC4i.html</url>
    <content><![CDATA[<h1 id="以色列网络作战部队之C4i"><a href="#以色列网络作战部队之C4i" class="headerlink" title="以色列网络作战部队之C4i"></a>以色列网络作战部队之C4i</h1><p><img src="https://www.idf.il/media/4399/%D7%9C%D7%95%D7%92%D7%95-%D7%97%D7%99%D7%9C-%D7%94%D7%A7%D7%A9%D7%A8-%D7%95%D7%94%D7%AA%D7%A7%D7%A9%D7%95%D7%91.png?anchor=center&mode=crop&width=130&height=130&rnd=131265435960000000"></p>
<p>“We are everywhere. From the fiber optic to the satellite, from the support base to the most forward operating soldier,” said Col. R, who commands the Code, Cipher, and Security Unit of the C4i Directorate.</p>
<p>“从光纤到卫星，从支援保障到最前沿的士兵，我们无处不在”——C4i 指挥部编码、密码、安全部门指挥官R上校</p>
<p><img src="https://image.3001.net/images/20200331/1585660812_5e83438c2d924.jpg" alt="img"></p>
<p>图片来源:<a href="https://www.freebuf.com/articles/network/232118.html">https://www.freebuf.com/articles/network/232118.html</a></p>
<h2 id="官网简介"><a href="#官网简介" class="headerlink" title="官网简介"></a>官网简介</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>来源：<a href="https://www.idf.il/en/minisites/c4i-and-cyber-defense-directorate/">https://www.idf.il/en/minisites/c4i-and-cyber-defense-directorate/</a></p></blockquote>
<p>C4i指挥部是IDF的精英技术单位。 C4i指挥部的主要活动是为战场指挥官提供他们需要的技术，以便以尽可能好的方式掌控战场局势。该指挥部的主要目标是发起、发展、开发和加强IDF(以色列国防军)的技术集成系统。C4i首长是少将Lior Carmeli。</p>
<p>在过去的二十年里，随着技术的进步，指挥部已经成为一个领跑者。它负责以色列国防军在战场上的所有联系、计算机和通信。它还负责IDF的所有网络防御。网络防御部(Cyber Defense Unit)定期举办黑客马拉松（hackathons ），以挑战自我、提高技能。</p>
<p>该处隶属于参谋长，并与业务处合作工作。</p>
<h2 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>来源：<a href="https://www.idf.il/en/minisites/training-and-preparation/the-24-hour-hackathon-exercise-of-the-c4i-and-cyber-defense-directorate/">https://www.idf.il/en/minisites/training-and-preparation/the-24-hour-hackathon-exercise-of-the-c4i-and-cyber-defense-directorate/</a></p></blockquote>
<p>C4I和网络防御局在军官培训学校完成军官课程后，为即将上任的军官设置了一门特殊课程。本课程是专为刚从军官训练学校毕业的首军官而设，内容包括多项训练，以协助他们胜任其岗位</p>
<h3 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h3><p>新军官在网络防御局的完成来自<strong>计算机软件，电气工程和网络防御</strong>背景的课程。在课程中，他们将学习未来工作的专业知识，并了解技术部门的不同单位。他们也熟悉了理事会的各种计划和项目。</p>
<p>“结业课程非常具有挑战性和复杂性。归根到底，学员面临的挑战不是理论上的，而是通过完成分配的实际任务获得的经验。们未来所需要的经验是通过各种演习获得的，其中之一就是‘黑客马拉松’。”</p>
<h3 id="什么是“黑客马拉松”"><a href="#什么是“黑客马拉松”" class="headerlink" title="什么是“黑客马拉松”?"></a>什么是“黑客马拉松”?</h3><p>“黑客马拉松”是课程第9周完成的练习。这种持续24小时的练习，本质上是产品开发和创新的短期“冲刺”。这是一个独特的模拟系统，以帮助培训C4I和网络防御局的新军官。</p>
<p>“黑客马拉松”的主要目的是让新军官发现问题，并从那里开发新的创造性想法，利用技术提供解决方案。</p>
<p><img src="https://www.idf.il/media/30803/hackathon.jpeg?width=744&height=496"></p>
<h3 id="从学员到军官"><a href="#从学员到军官" class="headerlink" title="从学员到军官"></a>从学员到军官</h3><p>完成课程的军官最终会拥有高水平的领导能力和专业技能。课程结束后，他们在网络防御局中担任各种职务，比如项目领导，这意味着他们负责正在进行的项目和编程，这包括编程和开发应用程序、分析等。</p>
<h2 id="Cyberdome演习"><a href="#Cyberdome演习" class="headerlink" title="Cyberdome演习"></a>Cyberdome演习</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>来源：<a href="https://www.israelnationalnews.com/News/News.aspx/271365">https://www.israelnationalnews.com/News/News.aspx/271365</a></p></blockquote>
<p>C4i &amp; 网络防御局会定期与外国网络防御实体进行演练，以提高部队的能力和战备状态，并加强部队之间的联系，鼓励各机构之间的相互学习。例如2019年11月，其与美国进行名为“Cyberdome”的演习，该演习是C4i和网络防御局与美国司令部正在进行的训练的一部分，有助于两组织之间现有的网络防御战略伙伴关系。</p>
<p><img src="https://u.a7.org/pictures/926/926268.jpg"></p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>解构全球网军之以色列网络作战部队，<a href="https://www.freebuf.com/articles/network/232118.html">https://www.freebuf.com/articles/network/232118.html</a></p>
<p>The 24-hour “Hackathon” Exercise of the C4I and Cyber Defense Directorate，<a href="https://www.idf.il/en/minisites/training-and-preparation/the-24-hour-hackathon-exercise-of-the-c4i-and-cyber-defense-directorate/">https://www.idf.il/en/minisites/training-and-preparation/the-24-hour-hackathon-exercise-of-the-c4i-and-cyber-defense-directorate/</a></p>
<p>C4I and Cyber Defense Directorate，<a href="https://www.idf.il/en/minisites/c4i-and-cyber-defense-directorate/">https://www.idf.il/en/minisites/c4i-and-cyber-defense-directorate/</a></p>
<p>Israeli and US armies conduct cyber battlefield exercise，<a href="https://www.israelnationalnews.com/News/News.aspx/271365">https://www.israelnationalnews.com/News/News.aspx/271365</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>网络战</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>传输层安全协议真（TLS）的安全吗？</title>
    <url>//post/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E7%9C%9F%EF%BC%88TLS%EF%BC%89%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F.html</url>
    <content><![CDATA[<h1 id="传输层安全协议真（TLS）的安全吗？"><a href="#传输层安全协议真（TLS）的安全吗？" class="headerlink" title="传输层安全协议真（TLS）的安全吗？"></a>传输层安全协议真（TLS）的安全吗？</h1><p>随着数字通信，计算机网络，公钥密码体制等技术的迅速发展，安全网络通信已经成为了人们的日常需求。TLS 作为目前被广泛应用的安全通信协议之一，被广泛使用于日常生活中，如HTTPS，DNS over TLS等等。但是TLS真的安全吗？他能有效的保护我们的隐私吗？</p>
<h2 id="TLS基础"><a href="#TLS基础" class="headerlink" title="TLS基础"></a>TLS基础</h2><h3 id="TLS是什么？"><a href="#TLS是什么？" class="headerlink" title="TLS是什么？"></a>TLS是什么？</h3><p>传输层安全协议（Transport Layer Security，TLS）：TLS标准由互联网工程任务组（IETF）TLS工作组制定和维护。TLS在TCP&#x2F;IP协议栈上运行，用于保护web流量（使用HTTPS）、文件传输、电子邮件传输和许多其他应用程序。迄今为止，已有两个版本的SSL（SSL v2和SSL v3）和三个版本的TLS（TLS 1.0、TLS 1.1和TLS 1.2）；下一个版本TLS 1.3已于2018年8月发布。</p>
<p>TLS用于保护许多应用程序。很多人最为熟悉的TLS使用场景是用于保护通过超文本传输协议（HTTP）传输的web流量。在HTTPS中，建立SSL&#x2F;TLS连接（通常在TCP端口443上，与不安全网站的端口80不同），然后HTTP数据通过安全连接传输。TLS还可用于保护电子邮件传输协议（IMAP和POP，用于客户端从邮件服务器下载邮件，SMTP用于发送邮件），以及文件传输（FTP）。在这些场景中，不安全连接被“升级”为安全连接，用于保护人们的隐私和通信数据安全。</p>
<h3 id="TLS历史"><a href="#TLS历史" class="headerlink" title="TLS历史"></a>TLS历史</h3><p>SSL协议由Netscape公司开发，历史可以追溯到Netscape Navigator浏览器统治互联网的时代。协议的第一个版本从未发布过，</p>
<p>第二版则于1994年11月发布。第一次部署是在Netscape Navigator 1.1浏览器上，发行于1995年3月。SSL 2的开发基本上没有与Netscape以外的安全专家进行过商讨，所以有严重的弱点，被认为是失败的协议，最终退出了历史的舞台。</p>
<p>这次失败使Netscape专注于SSL 3，并于1995年年底发布。虽然名称与早先的协议版本相同，但SSL 3是完全重新设计的协议。该设计一直沿用到今天。</p>
<p>1996年5月，TLS工作组成立，开始将SSL从Netscape迁移至IETF。由于Microsoft和Netscape当时正在为Web的统治权争得不可开交，整个迁移过程进行得非常缓慢、艰难。最终，TLS 1.0于1999年1月问世，见RFC 2246。尽管与SSL 3相比，版本修改并不大，但是为了取悦Microsoft，协议还是进行了更名[插图]。</p>
<p>直到2006年4月，下一个版本TLS 1.1才问世，仅仅修复了一些关键的安全问题。然而，协议的重要更改是作为TLS扩展于2003年6月发布的，并被集成到了协议中，这比大家的预期早了好几年。</p>
<p>2008年8月，TLS 1.2发布。该版本添加了对已验证加密的支持，并且基本上删除了协议说明中所有硬编码的安全基元，使协议完全弹性化。</p>
<p>当前最新版本的TLS协议为TLSv1.3，已于2018年有IETF正式发布。</p>
<table>
<thead>
<tr>
<th>Protocol</th>
<th>Published</th>
<th>Status</th>
</tr>
</thead>
<tbody><tr>
<td>——–</td>
<td>———–</td>
<td>————————————————————</td>
</tr>
<tr>
<td>SSL 1.0</td>
<td>Unpublished</td>
<td>Unpublished</td>
</tr>
<tr>
<td>SSL 2.0</td>
<td>1995</td>
<td>Deprecated in 2011</td>
</tr>
<tr>
<td>SSL 3.0</td>
<td>1996</td>
<td>Deprecated in 2015</td>
</tr>
<tr>
<td>TLS 1.0</td>
<td>1999</td>
<td>Deprecated in 2020</td>
</tr>
<tr>
<td>TLS 1.1</td>
<td>2006</td>
<td>Deprecated in 2020, in 2021 Chrome will not load websites with TLS 1.0 or 1.1.</td>
</tr>
<tr>
<td>TLS 1.2</td>
<td>2008</td>
<td></td>
</tr>
<tr>
<td>TLS 1.3</td>
<td>2018</td>
<td></td>
</tr>
</tbody></table>
<h2 id="TLS组成协议"><a href="#TLS组成协议" class="headerlink" title="TLS组成协议"></a>TLS组成协议</h2><p>TLS的主规格说明书定义了四个核心子协议：握手协议（handshake protocol）、密钥规格变更协议（change cipher spec protocol）、应用数据协议（application data protocol）和警报协议（alert protocol）。</p>
<p>出于加密目的，<strong>两个最重要的子协议是握手协议和记录层协议</strong>。</p>
<h3 id="SSL握手协议"><a href="#SSL握手协议" class="headerlink" title="SSL握手协议"></a>SSL握手协议</h3><p>握手是TLS协议中最精密复杂的部分。在握手协议中，客户机和服务器商定一组称为密码套件的加密参数，交换身份验证凭据，建立共享机密，执行显式身份验证，并派生用于批量加密和消息验证的密钥。</p>
<p><img src="https://pic1.zhimg.com/v2-01034aebce9c000921518e2642021910_b.jpg" alt="img"></p>
<p>Figure 1.3.1: 握手协议</p>
<p><strong>握手过程</strong>分为4个阶段：</p>
<ul>
<li>初始化逻辑连接，客户方先发出ClientHello消息，服务器方也应返回一个ServerHello消息，这两个消息用来协商双方的安全能力，包括协议版本、随机参数、会话ID、交换密钥算法、对称加密算法、压缩算法等。</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-f0b52f06689b5433fa911315a0327c36_720w.png" alt="img"></p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p><img src="/post/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E7%9C%9F%EF%BC%88TLS%EF%BC%89%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F/image-20210626173638179.png" alt="密码套件名称构成"></p></blockquote>
<p>clienthello消息示例</p>
<ul>
<li>服务器方应发送服务器证书Certificate（包含了服务器的公钥等）和服务端会话密钥(Serverkeyexchange)，如果服务器要求验证客户方，则要发送CertificateRequest消息。最后服务器方发送ServerHelloDone消息，表示hello阶段结束，服务器等待客户方的响应。</li>
<li>如果服务器要求验证客户方，则客户方先发送客户端证书Certificate消息，然后产生客户端会话密钥，并用服务器的公钥加密，封装在ClientKeyExchange消息中，如果客户方发送了自己的证书，则再发送一个数字签名CertificateVerify来对证书进行校验。</li>
<li>客户方发送一个ChangeCipherSpec消息，通知服务器以后发送的消息将采用先前协商好的安全参数加密，最后再发送一个加密后的Finished消息。服务器在收到上述两个消息后，也发送自己的ChangeCipherSpec消息和Finished消息。至此，握手全部完成，双方可以开始传输应用数据。</li>
</ul>
<p><strong>会话恢复</strong></p>
<p>完整的握手协议非常复杂，需要很多握手消息和两次网络往返才能开始发送客户端应用数据。此外，握手执行的密钥学操作通常需要密集的CPU处理。因此建立一次握手的代价很昂贵，于是短时间中断的连接可以使用会话恢复快速恢复。</p>
<p>最初的会话恢复机制是，在一次完整协商的连接断开时，客户端和服务器都会将会话的安全参数保存一段时间。希望使用会话恢复的服务器为会话指定唯一的标识，称为会话ID。服务器在ServerHello消息中将会话ID发回客户端。希望恢复早先会话的客户端将适当的会话ID放入ClientHello消息，然后提交。服务器如果愿意恢复会话，就将相同的会话ID放入ServerHello消息返回，接着使用之前协商的主密钥生成一套新的密钥，再切换到加密模式，发送Finished消息。客户端收到会话已恢复的消息以后，也进行相同的操作。这样的结果是握手只需要一次网络往返。</p>
<p><img src="https://pic3.zhimg.com/80/v2-dc5ad8417d475fe79ab74e70d727cfb6_720w.png" alt="img"></p>
<p>简短握手，用于恢复已经建立的会话</p>
<h4 id="TLS中的密码交换算法"><a href="#TLS中的密码交换算法" class="headerlink" title="TLS中的密码交换算法"></a>TLS中的密码交换算法</h4><p><img src="https://pic1.zhimg.com/80/v2-11d842dc5d5177774c9f1cb2f0483082_720w.png" alt="img"></p>
<p>最常用的密钥交换算法概览</p>
<p>使用哪一种密钥交换由协商的套件所决定。</p>
<h3 id="记录层协议"><a href="#记录层协议" class="headerlink" title="记录层协议"></a>记录层协议</h3><p>记录层协议提供TLS中所有消息的传递，包括握手协议消息和应用程序数据，但特别是记录层协议可以选择使用身份验证和加密来保护消息。还有一个附加的警报协议，用于通知对等方错误或关闭连接。 SSL记录协议从高层接收到数据后要经过分段、压缩和加密处理，最后由传输层发送出去。在SSL协议中，所有的传输数据都被封装在记录中，SSL记录协议规定了记录头和记录数据的格式。</p>
<p>总之，经过上述两个协议，客户端和服务器通过公钥密码体制协商通信时使用的对称加密体制秘钥，然后使用对称加密体制对通信数据进行加密处理。这样，通信数据就可以“安全”的在网络中进行传输。</p>
<h3 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h3><p>当然了，除了上述最重要的两个协议之外，还有一些其他的协议，例如警告协议，心跳协议等等。</p>
<p>警报的目的是以简单的通知机制告知对端通信出现异常状况。发送警告通知的一端不会主动终止连接，而是交由接收端通过发送它自己的严重警报对该警告自行作出反应。</p>
<p>心跳（Heartbeat）是一个协议扩展，添加了支持连接保活的功能（检查对端是否仍然可用），以及为TLS和DTLS发现路径最大传输单元（path maximumtransmission unit, PMTU）</p>
<h2 id="SSL-x2F-TLS安全吗？"><a href="#SSL-x2F-TLS安全吗？" class="headerlink" title="SSL&#x2F;TLS安全吗？"></a>SSL&#x2F;TLS安全吗？</h2><p>TLS 的发展有 20 多年的历史，在之前的版本中，TLS 1.2 是高度可配置的，为了更好的兼容旧版本的浏览器，这意味着那些易受攻击的站点始终在运行着不安全的加密算法，这让互联网黑客有可乘之机。</p>
<h3 id="协议漏洞"><a href="#协议漏洞" class="headerlink" title="协议漏洞"></a>协议漏洞</h3><h4 id="经典攻击"><a href="#经典攻击" class="headerlink" title="经典攻击"></a>经典攻击</h4><p>以下是TLS&#x2F;SSL协议中的主要漏洞。它们都会影响协议的旧版本（TLSv1.2及更早版本）。</p>
<ul>
<li>POODLE（Padding Oracle On Downgraded Legacy Encryption）,(CVE-2014-3566)</li>
<li>BEAST（Browser Exploit Against SSL&#x2F;TLS ）(CVE-2011-3389)</li>
<li>CRIME (Compression Ratio Info-leak Made Easy) (CVE-2012-4929)</li>
<li>BREACH（Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext） (CVE-2013-3587.)</li>
<li>Heartbleed (CVE-2014-0160.)</li>
</ul>
<p>详细的一些介绍看这里[这里[<a href="https://zhuanlan.zhihu.com/write#footnote-1">1]</a>]:<a href="https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/">https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/</a></p>
<h3 id="不安全因素"><a href="#不安全因素" class="headerlink" title="不安全因素"></a>不安全因素</h3><p>这些主要漏洞中，的一些不安全的因素：</p>
<ul>
<li>RSA 密钥传输 —— 不支持前向安全性</li>
<li>CBC 模式密码 —— 易受 BEAST 和 Lucky 13 攻击</li>
<li>RC4 流密码 —— 在 HTTPS 中使用并不安全</li>
<li>SHA-1 哈希函数 —— 建议以 SHA-2 取而代之</li>
<li>任意 Diffie-Hellman 组—— CVE-2016-0701 漏洞</li>
<li>输出密码 —— 易受 FREAK 和 LogJam 攻击</li>
</ul>
<h3 id="部署安全"><a href="#部署安全" class="headerlink" title="部署安全"></a>部署安全</h3><p>虽然SSL&#x2F;TLS协议用于保护数据传输，但配置不当的服务器可能会暴露数据而不是保护数据。</p>
<ul>
<li>中间人攻击：如middlebox（如部分杀毒软件会作为中间人，解密用户数据，进行恶意审查；不安全的CA及不可验证的数字证书链等）的广泛部署</li>
<li>误配置：如使用已经被证明不安全的协议（TLSv1.1之前的版本），支持不安全的密码套件（RC4，MD5等）等。</li>
</ul>
<p>根据<a href="https://www.ssllabs.com/ssl-pulse/">SSL Labs</a>的统计信息，如下图所示，即使许多的SSL&#x2F;TLS已经被证明不安全，但是由于各种原因，例如管理员疏忽、配置错误、机器升级障碍等问题，目前仍然存在大量不安全的SSL&#x2F;TLS协议在使用当中。</p>
<p><img src="https://pic1.zhimg.com/v2-880b162f7b655e34f735bde9665f6e7c_b.jpg" alt="img"></p>
<p>Figure 2.2.1: SSL Labs统计信息</p>
<h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>在大多数情况下，保护自己免受SSL&#x2F;TLS相关攻击的最佳方法是禁用旧的协议版本。这甚至是一些行业的标准要求。例如看看下面几个业界的动态就知道低版本 TLS 的现状了。</p>
<ul>
<li>GitHub 于 2018 年 2 月 1 日起，禁用 TLSv1 和 TLSv1.1。</li>
<li>Salesforce 于 2018 年 3 月 逐步禁用 TLSv1。</li>
<li>微信小程序要求的 TLS 版本必须大于等于 1.2。</li>
<li>为了符合支付卡行业数据安全标准（PCI DSS）并符合行业最佳实践，GlobalSign 将在 2018 年 6 月 21 日禁用 TLS 1 和 TLS 1.1 。</li>
</ul>
<p>选择的协议级别越高，相应的也就更安全。</p>
<p>同时，将目前计算机上部署的TLS版本更新到最新，可有效防止此类问题，目前安全的版本为TLSv1.3。</p>
<h2 id="TLSv1-3"><a href="#TLSv1-3" class="headerlink" title="TLSv1.3"></a>TLSv1.3</h2><p>下图是TLS完整的握手过程</p>
<p><img src="https://pic1.zhimg.com/v2-461dceb7158b0941c3e1a5237b3b3e28_b.jpg" alt="img"></p>
<p>Figure 3.1: SSL Labs统计信息</p>
<p>与TLSv1.2主要的不同，TLSv1.3进行了很多改进，改进力度还是比较大。如上图所示，握手过程明显比TLS之前版本更少的握手次数，，甚至是0次（zero round trip time (0-RTT)）可以更快的建联，简化了握手机制。</p>
<p>同时，不再兼容一些不安全的密码算法，甚至是不安全的前向兼容.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，当前TLS是广泛使用的安全通信协议，安全性在整个互联网界的共同努力下，逐步提升，可以保证用户数据和隐私的安全。但是由于其历史、兼容性、实现以及部署等原因，在实际使用过程中产生了一些安全的问题，但是很快就会被打上补丁。因此，只要能够及时打上TLS的补丁，升级支持最新版的协议，禁用旧的版本，就能够有效地保护数据隐私和通信安全。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《HTTPS权威指南：在服务器和Web应用上部署SSL&#x2F;TLS和PKI》</p>
]]></content>
  </entry>
  <entry>
    <title>你的智能家居设备每周可能遭受10,000次黑客攻击</title>
    <url>//post/%E4%BD%A0%E7%9A%84%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85%E8%AE%BE%E5%A4%87%E6%AF%8F%E5%91%A8%E5%8F%AF%E8%83%BD%E9%81%AD%E5%8F%9710,000%E6%AC%A1%E9%BB%91%E5%AE%A2%E6%94%BB%E5%87%BB.html</url>
    <content><![CDATA[<h1 id="你的智能家居设备每周可能遭受10-000次黑客攻击"><a href="#你的智能家居设备每周可能遭受10-000次黑客攻击" class="headerlink" title="你的智能家居设备每周可能遭受10,000次黑客攻击"></a>你的智能家居设备每周可能遭受10,000次黑客攻击</h1><p><img src="https://cybernews.com/wp-content/uploads/2021/07/shutterstock_1271345653-1-750x375.jpg" alt="Report: your smart home devices may suffer from 10,000 hacking attempts every week"></p>
<p>虽然使用智能家居设备可以提升你的生活环境，但它也可能使你的家庭成为充满窥视和犯罪活动的生活地狱。英国消费者团体Which? 的一项新调查发现，配备了智能家居设备的房子每周可能遭受超过一万次的黑客攻击。</p>
<p>在与NCC集团和全球网络联盟（GCA）的合作下，Which? 为一栋房子配备了一系列智能家居设备，包括电视、恒温器，甚至水壶。接下来的情况相当令人震惊：新的智能家居遭受了许多网络攻击，最终在一小时内攀升到14次。结论是，大多数设备可以成功避免攻击，但亚马逊的一个摄像头被黑，并允许威胁者试图监视家里的人。</p>
<h2 id="调查的结果"><a href="#调查的结果" class="headerlink" title="调查的结果"></a>调查的结果</h2><p>总的来说，在5月的第一周测试中，Which? 记录了来自全球不同地点的1017次黑客攻击企图，随后在最严格的一周测试中发生了12807次事件。</p>
<p>受攻击最多的设备是一台爱普生打印机，但它被证明是安全的。一台从亚马逊购买并被宣传为公司选择的ieGeek相机的情况并不理想，在此份报告发布后不久就被从商店中删除。</p>
<p>有趣的是，这并不是第一起与亚马逊有关的相机容易被黑客攻击的事件。2019年，在一连串成功的黑客尝试使用DDoS该公司的摄像头和麦克风之后，许多消费者团体站出来敦促用户不要购买亚马逊的Ring设备。</p>
<h2 id="为什么有人会黑进你的家？"><a href="#为什么有人会黑进你的家？" class="headerlink" title="为什么有人会黑进你的家？"></a>为什么有人会黑进你的家？</h2><p>如果你家里的大部分东西都是以数字方式治理的，黑客就会有更大的攻击面。试图访问你的智能家居设备可以有各种目的，从接管你的网络到窃取你的数据，甚至要求赎金以获得敏感信息。</p>
<p>一些相对无辜但令人讨厌的黑客将只是试图通过按照威胁者的意愿控制你的设备来刺激你。一些更严重的黑客攻击将包括监听你的谈话，绘制你的日常生活，并检查你何时离开和回家。</p>
<h2 id="你能做些什么来保护你的智能家居？"><a href="#你能做些什么来保护你的智能家居？" class="headerlink" title="你能做些什么来保护你的智能家居？"></a>你能做些什么来保护你的智能家居？</h2><p>幸运的是，你有很多方法来保护你的智能家居设备。始终使用一个强大的wifi密码和VPN，以确保你的连接是加密的。此外，在所有个人账户上启用多因子验证(口令、短信验证码等)，保持最新的软件版本，并为客人使用一个单独的Wi-Fi网络(访客Wifi)。当涉及到保护你的智能家居设备时，这些相对简单的网络安全建议可以产生极大的效果。</p>
]]></content>
  </entry>
  <entry>
    <title>关于RFC文档有趣的事情</title>
    <url>//post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85.html</url>
    <content><![CDATA[<p>原文为知乎<a href="https://zhuanlan.zhihu.com/p/337997798">文章</a>， 现转移到个人博客。</p>
<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ol>
<li><a href="#org34ce3f0">事情的起源</a></li>
<li><a href="#orgbd0ef9b">研究经过</a><ol>
<li><a href="#orgd742468">查询相关资料</a></li>
<li><a href="#org7b36c8c">查询相关RFC</a></li>
<li><a href="#orge2e0fc8">一个想法</a><ol>
<li><a href="#org3061772">第一个发现</a></li>
<li><a href="#org4e04c37">第二个发现</a></li>
<li><a href="#org2636b5a">第三个发现</a></li>
<li><a href="#org9ff55be">第四个发现</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="#org9564d4b">总结</a></li>
</ol>
<p><a id="org34ce3f0"></a></p>
<h1 id="事情的起源"><a href="#事情的起源" class="headerlink" title="事情的起源"></a>事情的起源</h1><p>一次被问起，为何TLSv1.0(RFC2246),TLSv1.1(RFC4346),TLSv1.2(RFC5246),TLSv1.3(RFC8446)中的RFC编号都是以64结尾。印象中关于RFC编号都是递增的，因为RFC写好之后就不允许再修改了，如果有新的标准出来，只能在其后某个编号出现，并且引用之前的RFC。<br>但是上述这个问题，TLS四个版本均以64结尾，也太凑巧了，确实很让人疑惑。本着好奇，去研究了研究这事。</p>
<p>&lt;！–more–&gt;</p>
<p><a id="orgbd0ef9b"></a></p>
<h1 id="研究经过"><a href="#研究经过" class="headerlink" title="研究经过"></a>研究经过</h1><p><a id="orgd742468"></a></p>
<h2 id="查询相关资料"><a href="#查询相关资料" class="headerlink" title="查询相关资料"></a>查询相关资料</h2><p>首先在网上搜索为什么TLS均以64结尾，网上的回答基本上来自如下解释</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>In the IETF, protocols are called RFCs. TLS 1.0 was RFC 2246, TLS 1.1 was RFC 4346, and TLS 1.2 was RFC 5246. Today, TLS 1.3 was published as RFC 8446. RFCs are generally published in order, keeping 46 as part of the RFC number is a nice touch<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>.</p></blockquote>
<p>显然，并没有解决我们的问题。</p>
<p><a id="org7b36c8c"></a></p>
<h2 id="查询相关RFC"><a href="#查询相关RFC" class="headerlink" title="查询相关RFC"></a>查询相关RFC</h2><p>思考是否会有某个RFC对这事做了说明吗？查询未果。<br>但是在此过程中，我发现了在RFC文档中，有相邻两个递增编号文档，但是RFC时间并不递增的现象。举个例子</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>1478 An Architecture for Inter-Domain Policy Routing. M. Steenstrup. June</p>
<ol>
<li>(Format: TXT, HTML) (Status: HISTORIC) (DOI: 10.17487&#x2F;RFC1478)</li>
</ol>
<p>1479 Inter-Domain Policy Routing Protocol Specification: Version 1. M.<br>     Steenstrup. July 1993. (Format: TXT, HTML) (Status: HISTORIC) (DOI:<br>     10.17487&#x2F;RFC1479) </p>
<p>1480 The US Domain. A. Cooper, J. Postel. June 1993. (Format: TXT, HTML)<br>     (Obsoletes RFC1386) (Status: INFORMATIONAL) (DOI: 10.17487&#x2F;RFC1480) </p></blockquote>
<p>其中RFC1478的时间为1993年6月，RFC1479的时间为1993年7月，但是RFC1480的时间为1993年6月，出现了非递增的情况。</p>
<p>虽然又发现，但好像并没有什么卵用。但是自然会想到，有可能时间上有大的反复吗？有年的反复现象吗？</p>
<p><a id="orge2e0fc8"></a></p>
<h2 id="一个想法"><a href="#一个想法" class="headerlink" title="一个想法"></a>一个想法</h2><p><a id="org3061772"></a></p>
<h3 id="第一个发现"><a href="#第一个发现" class="headerlink" title="第一个发现"></a>第一个发现</h3><p>所以就想分析分析RFC文档的编号的时间问题。第一想法是爬虫，但是工作量太复杂。左搜索右搜索，找到了官网提供的XML版列表<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>.超级开心。然后写了个python脚本，自动进行了分析(忽略并不想改的变量名，来自一个豆瓣电影爬虫)。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>
<span class="token keyword">import</span> calendar
<span class="token keyword">from</span> xml<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>minidom <span class="token keyword">import</span> parse
<span class="token keyword">import</span> xml<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>minidom

<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt 

<span class="token comment"># 使用minidom解析器打开 XML 文档</span>
DOMTree <span class="token operator">=</span> xml<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>minidom<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">"rfc-index.xml"</span><span class="token punctuation">)</span>
collection <span class="token operator">=</span> DOMTree<span class="token punctuation">.</span>documentElement
<span class="token keyword">if</span> collection<span class="token punctuation">.</span>hasAttribute<span class="token punctuation">(</span><span class="token string">"shelf"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Root element : %s"</span> <span class="token operator">%</span> collection<span class="token punctuation">.</span>getAttribute<span class="token punctuation">(</span><span class="token string">"shelf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 在集合中获取所有电影</span>
movies <span class="token operator">=</span> collection<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">"rfc-entry"</span><span class="token punctuation">)</span>

<span class="token comment"># 打印每部电影的详细信息</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"*****Movie*****"</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
years <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> movie <span class="token keyword">in</span> movies<span class="token punctuation">:</span>

   <span class="token builtin">type</span> <span class="token operator">=</span> movie<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">'doc-id'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data

   <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#    print ("doc-id: %d" % id)</span>
<span class="token comment">#    author = movie.getElementsByTagName('author')[0]</span>
<span class="token comment">#    print ("author: %s" % author.childNodes[1].data)</span>
   date <span class="token operator">=</span> movie<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   month <span class="token operator">=</span> date<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
   int_month <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>month_name<span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span>
   months<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int_month<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#    print ("date month: %d" % int_month)</span>
   year <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#    print ("date year: %d" % year)</span>
   years<span class="token punctuation">.</span>append<span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#    description = movie.getElementsByTagName('description')[0]</span>
<span class="token comment">#    print ("Description: %s" % description.childNodes[0].data)</span>
   total<span class="token punctuation">.</span>append<span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token number">10</span>  <span class="token operator">+</span> int_month  <span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Arial Unicode MS'</span><span class="token punctuation">]</span>
plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>   <span class="token comment"># 解决保存图像是负号'-'显示为方块的问题</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Matplotlib"</span><span class="token punctuation">)</span> 
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"RFC编号"</span><span class="token punctuation">)</span> 
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"年份"</span><span class="token punctuation">)</span> 

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>years<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">r'年'</span><span class="token punctuation">)</span> 
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>total<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">r'年 + 月 + 10(向上平移10)'</span><span class="token punctuation">)</span> 
<span class="token comment"># plt.subplot(2,1,1)</span>
<span class="token comment"># plt.plot(x,years) </span>
<span class="token comment"># plt.subplot(2,1,2)</span>
<span class="token comment"># plt.plot(x,months) </span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>经过经过分析有了如下所示图：<br><img src="/post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/%E5%B9%B4%E4%BB%BD%E5%9B%BE.png" alt="img"><br>果然有问题！！！！上图横坐标为RFC编号，纵坐标为RFC编号对应的年份。可以看出RFC文档从一九六几年到今天一共发表8000余份。有意思的是，其中有一些凸起的部分，就是一些异常点。例如2000年前有一个极高的凸起，这代表这个编号的年份远远超出这个编号附近的年份，这与我们的常识不符。实际上，查看这个异常点，如下图所示：<br><img src="/post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/image-20201218225458777.png" alt="img"><br>其中RFC1849的年份为2010年，但其附近的RFC文档编号均为1995年，其中相差15年，造成第一幅图中的凸起。</p>
<p><a id="org4e04c37"></a></p>
<h3 id="第二个发现"><a href="#第二个发现" class="headerlink" title="第二个发现"></a>第二个发现</h3><p>同时，我们还会发现另一个有意思的现象。如下图所示：<br><img src="/post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/%E6%95%B4%E6%95%B0%E9%97%B4%E9%9A%94%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="整数间隔示意图"><br>其中编号为1299，1399，1499，1599，1699,&amp;#x2026;等，均出现凸起现象。并且实际上1299，1399，1499，1599，1699，1799，1899，1999的年份均为1997年。存在明显的人为痕迹。</p>
<p><a id="org2636b5a"></a></p>
<h3 id="第三个发现"><a href="#第三个发现" class="headerlink" title="第三个发现"></a>第三个发现</h3><p>年份和月份基本满足递增，但是有波动。如下图所示：<br><img src="/post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="img"><br>放大后：<br><img src="/post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/%E7%A4%BA%E6%84%8F%E5%9B%BE%E6%94%BE%E5%A4%A7.png" alt="img"><br>为方便对比，将其中月份显示为（年+月，再向上平移10个单位(年)）。</p>
<p><a id="org9ff55be"></a></p>
<h3 id="第四个发现"><a href="#第四个发现" class="headerlink" title="第四个发现"></a>第四个发现</h3><p>TLS的主要作者，目前是Eric Rescorla。对TLS四个版本作者做简单统计，如下图：<br><img src="/post/%E5%85%B3%E4%BA%8ERFC%E6%96%87%E6%A1%A3%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/image-20201218231640006.png" alt="img"><br>可以看出，最开始Tim Dierks逐渐从第二作者，向第一作者上升，此时带了个徒弟。慢慢Tim Dierks开始退居二线，Eric Rescorla开始独挡一面（纯属胡说八道）。</p>
<p><a id="org9564d4b"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然并没有直接的证据来回答开头提出的问题，但是我们可以发现以下现象：</p>
<ul>
<li>RFC的编号并非严格的时间递增，而是存在一些波动</li>
<li>RFC的编号中存在一些，小概率发生的现象，例如等间隔凸起</li>
</ul>
<p>基于以上现象呢，我们可以大胆猜测（hu shuo ba dao）：</p>
<ul>
<li>RFC编号的审批机构，会因为某些原因，保留一些编号</li>
<li>RFC的编号其实并没有想象中的那么严格</li>
<li>大佬在RFC编号中具有一定的发言权，可以”预定“一些编号。如TLSv1，2，3，4以64结尾</li>
</ul>
<h1 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h1><p><sup><a id="fn.1" href="#fnr.1">1</a></sup> <a href="https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/">https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/</a></p>
<p><sup><a id="fn.2" href="#fnr.2">2</a></sup> <a href="https://www.rfc-editor.org/rfc-index.xml">https://www.rfc-editor.org/rfc-index.xml</a></p>
]]></content>
      <categories>
        <category>研究</category>
      </categories>
      <tags>
        <tag>RFC</tag>
        <tag>编号</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链中的密码学知识</title>
    <url>//post/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9F%A5%E8%AF%86.html</url>
    <content><![CDATA[<p>原文为<a href="https://zhuanlan.zhihu.com/p/304725930">知乎</a>，现转移到个人博客。<br><a href="https://zhuanlan.zhihu.com/p/304725930" target="_blank" class="LinkCard">知乎原文</a><br>转发微信公众号<a href="https://mp.weixin.qq.com/s/NkAWmPokc86Jc6nWtz4-yA">文章</a><br><a href="https://mp.weixin.qq.com/s/NkAWmPokc86Jc6nWtz4-yA" target="_blank" class="LinkCard">微信公众号原文</a></p>
<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ol>
<li><a href="#org63a3294">BitCoin是什么</a></li>
<li><a href="#org1839db4">密码学是什么</a></li>
<li><a href="#org44c3a48">BitCoin中的密码学知识</a><br>1.  <a href="#org87067ef">哈希(Hash)</a><br>    2.  <a href="#orgb205e36">公钥密码体制</a></li>
<li><a href="#org60092e2">总结</a></li>
<li><a href="#orga6c2764">Reference</a></li>
</ol>
<p><a id="org63a3294"></a></p>
<h1 id="BitCoin是什么"><a href="#BitCoin是什么" class="headerlink" title="BitCoin是什么"></a>BitCoin是什么</h1><p>BitCoin，又称比特币，是2009年中本聪提出了一种点对点的数字现金系统，是一种分布式、点对点的货币,允许在线的交易不用经过中心化机构（如银行，支付宝）的情况下，在网络合作支持下，直接由一个用户发往另一个用户,并且可以提供防篡改，可验证的能力。<br>Bitcoin是最早实现“加密货币”这一概念的系统，该设想最早由戴伟（Dai Wei<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>,音译）于1998年在cypherpunks函件用户组首次提出的:货币可以是任何东西或记录，只要它在一个国家或社会经济体系内被接受为商品服务的支付方式，或是债务偿还的方式。<br>比特币的设计核心思想是以密码学难题(cryptography puzzle)答案作为货币，其发行权独立于任何中央机构之外。</p>
<p>比特币使用了公开密钥系统<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>. 每一个钱币都包括了其拥有者的公开秘钥。当钱币从用户A支付给用户B时, A将B的公开秘钥添加到钱币中, 然后这个钱币又被A用私人密码匙来签名。B现在即拥有了这个钱币并且可以将来使用，而A就不可能再次使用这个钱币，因为以前的交易记录以被全体网络计算机记录。在每笔交易前，钱币的有效性都必须经过检验确认。</p>
<p><a id="org1839db4"></a></p>
<h1 id="密码学是什么"><a href="#密码学是什么" class="headerlink" title="密码学是什么"></a>密码学是什么</h1><p>密码学是一种使用先进的数学原理以特定的形式存储和传输数据的方法，以便只有它的目标用户能够读取和处理数据。密码学已经被人们用来在不被发现的情况下转发信息。随着互联网及信息技术的飞速发展，密码学被赋予了新的含义。密码哈希，电子签名等被广泛使用在防篡改，身份认证等场合。当前有三种广泛使用的加密形式：对称加密、非对称加密和哈希。</p>
<p><a id="org44c3a48"></a></p>
<h1 id="BitCoin中的密码学知识"><a href="#BitCoin中的密码学知识" class="headerlink" title="BitCoin中的密码学知识"></a>BitCoin中的密码学知识</h1><p>在中本聪的Bitcoin: A Peer-to-Peer Electronic Cash System一文中我们可以看见如下一段话，从这段话中我们可以看出密码学在BitCoin中的应用：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>We define an electronic coin as a chain of <strong><strong>digital signatures</strong></strong>. Each owner transfers the coin to the next by digitally <strong><strong>signing</strong></strong> a <strong><strong>hash</strong></strong> of the previous transaction and the <strong><strong>public key</strong></strong> of the next owner and adding these to the end of the coin. A payee can <strong><strong>verify the signatures</strong></strong> to verify the chain of ownership.——Bitcoin: A Peer-to-Peer Electronic Cash System[1]</p></blockquote>
<p>下面就主要从哈希和 公钥密码体制两个方面介绍BitCoin中的密码学知识。</p>
<p><a id="org87067ef"></a></p>
<h3 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h3><p>哈希（有时称“摘要”,密码散列,Hashing）是文本或数据文件的经过压缩的一种”指纹”。 Hash函数是把任意长度的输入通过散列函数或者说是hash函数转化为固定长度的输出的一种算法。这个输入区间可以无穷大，但输出区间是固定的。比如输入可以是任意的，输出是一个3位数。<br>这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p>
<p>BitCoin中的hash函数主要有SHA-256，RIPEME-160，hash的一个主要应用是Merkle树,其中算法前缀“SHA”和”RIPEMD”表示基础算法，数字后缀”256”和”160”表示输出的固定长度。 </p>
<p>在比特币协议中，SHA256和RIPEMD160一起用于保护数字签名中使用的公钥。SHA256方法也用于比特币挖掘中的工作函数证明，并作为数字签名算法的一部分。</p>
<ol>
<li><p>SHA-256</p>
<p>SHA就是安全哈希算法（Secure Hash Algorithm）的简写。SHA-256为文本生成几乎唯一的256位（32字节）签名。<br>另外，比特币挖矿（mining）的cryptograph puzzle也是通过计算满足一定条件的hash来完成的，例如计算的满足256bit位hash前缀满足60个0(由区块链中区块内部的nonce决定)的hash。</p>
</li>
<li><p>RIPEME-160</p>
<p>RIPEMD（RIPE Message Digest）是1992年（原始RIPEMD）和1996年（其他变体）开发的一系列密码哈希函数。 该系列有五个功能：RIPEMD，RIPEMD-128，RIPEMD-160，RIPEMD-256和RIPEMD-320，其中RIPEMD-160是最常见的,也是比特币中使用的Hash算法之一。</p>
<p>之所以使用RIPEMD，是因为它产生了最短的哈希,用于生成比特币地址,这允许比特币地址更短。同时，其唯一性仍得到了充分保证。 </p>
</li>
<li><p>Merkle Tree</p>
<p>Merkle树是一种哈希树，其中叶节点是根据数据块计算的加密哈希，而非叶节点是其直接子节点的哈希。根散列也称为数据的“摘要”。</p>
<p>o<br>要验证一个记录，它需要一个数据“证明”，其中包含根路径上的节点。递归地重新计算新的根散列，并使用先前保存的摘要检查相等性。</p>
<p>如下图：例如L4被修改，那么hash1-1，hash1，top hash 都会被重新计算，最终显示为Top hash的变化，只需要对比Top hash 就能够知道节点中的数据有没有被篡改。</p>
<p><img src="/post/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9F%A5%E8%AF%86/Hash_Tree.jpg" alt="img" title="Merkle树"></p>
<p>Merkle 树将根存储在比特币区块中，验证者只用验证根的hash是否变化，就可以判断Merkle 树中的子节点是否被篡改，而不用验证全部的节点，极大的减少了验证的复杂度。</p>
<p><img src="/post/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9F%A5%E8%AF%86/Merkle-Tree-representation-of-a-Block.png" alt="img" title="Merkle树表示"></p>
</li>
</ol>
<p><a id="orgb205e36"></a></p>
<h3 id="公钥密码体制"><a href="#公钥密码体制" class="headerlink" title="公钥密码体制"></a>公钥密码体制</h3><p>公钥密码体制使用*不同的加密密钥与解密密钥*，是一种“由已知加密密钥推导出解密密钥在计算上是不可行的”密码体制。</p>
<p>公钥密码体制使用的密钥分为公钥和私钥，两种密钥成对使用。使用公钥加密和私钥解密；使用私钥加密和公钥解密。</p>
<p>现有最著名的公钥密码体制是*RSA* 体制，它基于数论中大数分解问题，由美国三位科学家 Rivest, Shamir 和 Adleman 于 1976 年提出并在 1978 年正式发表的。</p>
<p>公钥密码体制根据使用秘钥的不同，可以分为两类：发送者使用发送者的私钥处理数据，接受者使用发送者的公钥逆向处理，为签名；发送者使用接受者的公钥处理数据，接受者使用接受者的私钥处理数据，为加密。下面分别讨论这两种方式：</p>
<ol>
<li><p>非对称加密</p>
<p>非对称密码学利用两个密钥（公共密钥和私有密钥）来加密和解密特定数据。例如：我发消息给你，用你的公钥进行加密，而你用自己的私钥进行解密，你的公钥可以公开，但是你的私钥只有自己知道.这样每个人都可以给你发信息，但只有你自己能通过私钥解密查看。</p>
<p>下图为正常的加密、解密流程：</p>
<p><img src="/post/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9F%A5%E8%AF%86/68637037-67713000-0538-11ea-85c9-177b3b26aa5a.png" alt="img" title="密码体制及应用"></p>
<p>两种常用的非对称加密算法：Rivest-Shamir-Adleman算法又称为RSA，椭圆曲线密码（ECC）。</p>
</li>
<li><p>数字签名</p>
<p>比特币本身是不加密的，那么比特币不加密怎么安全呢？</p>
<p>如果我要交易，把我的比特币给你，那么我在交易上，用我的私钥进行签名，大家都可以用我的公钥进行验证，这样大家都能知道确实是我进行的交易，证明币是你的，这就涉及到了数字签名。</p>
<p>如下图所示：发送者用自己的private key 处理message 和 经过hash的message digest，然后通过信道发送个接受者，接受者通过发送者的public key逆向处理消息，得到message 和 message disgest，通过验证hash(message)是否与messagedigest相等，可以验证是否是发送者发来的消息。</p>
<p><img src="/post/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6%E7%9F%A5%E8%AF%86/image002.jpg" alt="img" title="数字签名"></p>
</li>
</ol>
<p><a id="org60092e2"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>随着互联网和公钥密码体制的发展，人们越来越关注安全和隐私，密码学在日常生活中处处可见，掌握必要的密码学知识至关重要。</p>
<p>bitcoin通过一系列密码算法的组合，实现了一个分布式、点对点、可信、可验证、不可篡改的加密数字货币，比特币种的密码学知识主要有哈希，公钥密码体制，数字签名。</p>
<p><a id="orga6c2764"></a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] Wright, C. S. (2019). Bitcoin: A Peer-to-Peer Electronic Cash System. SSRN Electronic Journal, 1–9. <a href="https://doi.org/10.2139/ssrn.3440802">https://doi.org/10.2139/ssrn.3440802</a></p>
<h1 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h1><p><sup><a id="fn.1" href="#fnr.1">1</a></sup> <a href="https://en.bitcoin.it/wiki/Wei_Dai">https://en.bitcoin.it/wiki/Wei_Dai</a></p>
<p><sup><a id="fn.2" href="#fnr.2">2</a></sup> <a href="http://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">http://zh.wikipedia.org/wiki/公开密钥加密</a></p>
<p>欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8ff04a9934840c3c552ed41497bc4748_720w.jpg" alt="欢迎关注我的微信公众号，扫描下方二维码，就可以找到我，我会持续为你分享 IT 技术和珠宝知识"></p>
<p>也可以关注我的个人博客</p>
<p><a href="https://dianwoshishi.github.io/">点我试试的个人博客</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>比特币</tag>
        <tag>区块链</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>“太空网络”支持宇航员在太空视频聊天</title>
    <url>//post/%E5%8D%AB%E6%98%9F%E4%BA%92%E8%81%94%E7%BD%91.html</url>
    <content><![CDATA[<h1 id="“太空网络”支持宇航员在太空视频聊天"><a href="#“太空网络”支持宇航员在太空视频聊天" class="headerlink" title="“太空网络”支持宇航员在太空视频聊天"></a>“太空网络”支持宇航员在太空视频聊天</h1><p><img src="/post/%E5%8D%AB%E6%98%9F%E4%BA%92%E8%81%94%E7%BD%91/image-20210624215411991.png"></p>
<p>2021 年 6 月 23 日上午，在距离地球约 400 公里的中国天河空间站核心舱上，三名宇航员在北京控制中心接到了地面的第一个视频通话，高分辨率图像给许多人留下了深刻的印象。语音，以及几乎零延迟的地面空间连接。是什么让连接如此顺畅？答案是卫星互联网。</p>
<p>由中国航天科技集团公司和中国航天科技集团公司共同主办的《中国航天报》称，由三颗国产天链卫星组成的“太空网络”保证了地面和太空之间的畅通无阻。</p>
<h2 id="什么是卫星互联网？"><a href="#什么是卫星互联网？" class="headerlink" title="什么是卫星互联网？"></a>什么是卫星互联网？</h2><p><img src="https://th.bing.com/th/id/Rb8def9d0c7ad45f664dcd3664cf1a0b2?rik=fl8nFmSp3HzlxA&pid=ImgRaw"></p>
<p>卫星互联网是从绕地球运行的卫星传输的无线互联网。它与有线或 DSL 等陆基互联网服务有很大不同，后者通过电线传输数据。卫星互联网允许您通过从固定在您财产上的碟形天线(俗称卫星锅)向太空中的地球同步卫星发送无线信号来访问万维网。信号会回传到您的互联网提供商的网络接入点，并传输回您的天线、调制解调器，最后是您的计算机，从而完全无线地将您连接到互联网。就像使用任何其他类型的互联网连接一样，您可以使用卫星互联网进行从下载和流媒体到上传和游戏的所有常规在线活动。</p>
<h2 id="卫星互联网是如何工作的？"><a href="#卫星互联网是如何工作的？" class="headerlink" title="卫星互联网是如何工作的？"></a>卫星互联网是如何工作的？</h2><p>卫星互联网通过三个独立的卫星天线将用户连接到网络；一个悬浮在太空中，一个驻留在互联网服务提供商的中心，一个连接到你的设备。</p>
<p>卫星互联网的工作原理是使用无线电波与绕地球运行的卫星进行通信。数据通过通信网络发送和检索，该网络从您的设备开始，通过您的调制解调器和卫星天线，到达太空中的卫星，然后返回地球，到达称为网络运营中心 (NOC) 的地面站。然后，数据通过此网络传回太空，然后返回地球上的卫星天线，以在您的设备上传输数据。</p>
<p><img src="https://th.bing.com/th/id/R52dcc8df47a16021d7bb07a35be95da6?rik=rpXNDsC0HtGlyA&pid=ImgRaw"></p>
<p><img src="https://www.viasat.com/content/dam/viasat/corpblog/customers/758412_How_Satellite_Internet_Works_002.gif"></p>
<p>如上所述，卫星互联网信号传输到固定在赤道上方的卫星，然后传输到您的家庭天线，并根据需要来回传输。</p>
<h2 id="卫星互联网组成"><a href="#卫星互联网组成" class="headerlink" title="卫星互联网组成"></a>卫星互联网组成</h2><p><img src="https://th.bing.com/th/id/R7a12b03f83ee7e86daadbd918c7c4ee7?rik=iiffuzm7CBGQCw&pid=ImgRaw"></p>
<p>卫星互联网使用<strong>五部分中继系统</strong>：</p>
<ul>
<li>联网设备</li>
<li>调制解调器&#x2F;路由器</li>
<li>卫星天线</li>
<li>太空中的卫星</li>
<li>网络运营中心 (NOC)</li>
</ul>
<h3 id="联网设备"><a href="#联网设备" class="headerlink" title="联网设备"></a>联网设备</h3><p>互联网就绪设备是可以通过适当的服务<strong>访问互联网的</strong>任何设备。这包括您的计算机、平板电脑、智能手机、智能电视、游戏机和任何其他支持互联网的设备。</p>
<p>当您在其中一台设备上使用互联网时，它会通过您的调制解调器&#x2F;路由器发送和接收数据。</p>
<h3 id="调制解调器-x2F-路由器"><a href="#调制解调器-x2F-路由器" class="headerlink" title="调制解调器&#x2F;路由器"></a>调制解调器&#x2F;路由器</h3><p><strong>转换数据：</strong> 调制解调器转换数据，使得数据可以在您的互联网就绪设备和卫星天线之间移动。您可以使用线缆将某些设备（如计算机、智能电视或游戏机）直接连接到调制解调器。</p>
<h3 id="卫星天线"><a href="#卫星天线" class="headerlink" title="卫星天线"></a>卫星天线</h3><p>中继的下一步是您的家庭卫星天线。这个碟形天线必须<strong>精确定位</strong>(由微波的波长决定)，以便向在轨供应商的卫星发射信号并接收回信息。</p>
<p><img src="https://th.bing.com/th/id/R53569baf1bff6a1039b7c435ff9457da?rik=vXXifd9VoOHw8g&pid=ImgRaw"></p>
<h3 id="太空中的卫星"><a href="#太空中的卫星" class="headerlink" title="太空中的卫星"></a>太空中的卫星</h3><p>在<strong>距离</strong>地球表面大约<strong>22,000</strong> <strong>英里的</strong>地方，传统卫星互联网服务中使用的卫星悬停在赤道上空。它们随行星旋转，因此信号中继保持一致。这称为地球静止轨道。这允许在您的碟形天线和提供商集线器或 NOC 之间<strong>进行双向数据通信</strong>。</p>
<h3 id="卫星网关和网络运营中心-NOC"><a href="#卫星网关和网络运营中心-NOC" class="headerlink" title="卫星网关和网络运营中心 (NOC)"></a>卫星网关和网络运营中心 (NOC)</h3><p>每当您从 Internet 请求信息时，无论您是单击链接、流式传输节目还是打开 Facebook，来自该请求的数据都会通过上述中继上传。然后卫星将请求发送给 NOC。</p>
<p>NOC 使用比您家里的卫星天线大得多的卫星天线接收您的请求。然后 NOC<strong>接入互联网骨干网</strong>，收集您请求的信息，并通过中继将其发送回给您。</p>
<p>所有这些过程，包括将信息发送到太空 22,000 英里并返回<em>两次</em>，都在<strong>几分之一秒内发生</strong>。</p>
<p>由于信息必须传播到很远的地方，您可能会注意到比 DSL 或有线互联网更多的<strong>延迟</strong>（也称为延迟）</p>
<h2 id="卫星互联网的优缺点是什么？"><a href="#卫星互联网的优缺点是什么？" class="headerlink" title="卫星互联网的优缺点是什么？"></a>卫星互联网的优缺点是什么？</h2><hr>
<p>虽然卫星互联网在某些地方通常是最好的（有时是唯一的）选择，但它也带来了一些独特的挑战，如果您选择 DSL 或有线互联网连接，您可能不会面临这些挑战。虽然卫星互联网仍在不断发展和改进，但该技术仍然缺乏有线和光纤互联网的速度和带宽能力。但是，使用卫星连接来装饰您的家有许多宝贵的好处。让我们仔细看看卫星互联网的优缺点。</p>
<h4 id="卫星互联网的优势"><a href="#卫星互联网的优势" class="headerlink" title="卫星互联网的优势"></a>卫星互联网的优势</h4><ul>
<li><strong>速度：</strong>您可以期待比标准拨号连接更快的速度，并且可以与卫星互联网服务提供商的 DSL 互联网相媲美。</li>
<li><strong>覆盖范围：</strong>因为卫星是完全无线的，这种互联网类型几乎在全国任何地方都可用，甚至在船上和房车上。无论您的住所多么偏远，您都可以依靠卫星连接访问网络。</li>
<li><strong>可靠性：</strong>与有线或 DSL 等流行的地面互联网类型相比，使用卫星连接遇到网络中断的可能性要小得多。</li>
</ul>
<h4 id="卫星互联网的缺点"><a href="#卫星互联网的缺点" class="headerlink" title="卫星互联网的缺点"></a>卫星互联网的缺点</h4><ul>
<li><strong>天气：</strong>您所在位置的天气会影响卫星互联网设置的信号路径。无论是大雨、大雪还是强风，信号都可能因您无法控制的气候因素而中断。</li>
<li><strong>VPN 不兼容：</strong>不幸的是，虚拟专用网络 (VPN) 与卫星互联网不兼容。VPN 需要高带宽容量才能进行功能上传和下载，并且需要低延迟——这是卫星连接无法保留的两个基本要素。</li>
<li><strong>高延迟：</strong>延迟问题（互联网连接中的延迟）通常是由于信号必须传播以促进网络连接的距离而导致的，这导致宽带应用程序（即视频游戏、视频聊天、4K 流媒体等）变慢和滞后。</li>
</ul>
<h2 id="卫星互联网有多快？"><a href="#卫星互联网有多快？" class="headerlink" title="卫星互联网有多快？"></a>卫星互联网有多快？</h2><p>卫星互联网速度范围为 12 到 100 Mbps，这对于发送电子邮件、浏览和在线学习等常见在线活动来说已经足够了。</p>
<h2 id="卫星互联网与卫星电视有何不同"><a href="#卫星互联网与卫星电视有何不同" class="headerlink" title="卫星互联网与卫星电视有何不同"></a>卫星互联网与卫星电视有何不同</h2><p><img src="https://www.viasat.com/content/dam/viasat/corpblog/customers/CONUS_v_Spot-beams-1.png"></p>
<p>卫星电视只向一个方向播放，从卫星向家庭播放视频信号，没有“返航”。互联网信号必须双向传输，而且由于进出的信号不像视频那样广播，因此移动所有数据需要更多的带宽。</p>
<h2 id="美国星链计划（商业化）"><a href="#美国星链计划（商业化）" class="headerlink" title="美国星链计划（商业化）"></a>美国星链计划（商业化）</h2><p>星链，是美国太空探索技术公司的一个项目，太空探索技术公司计划在2019年至2024年间在太空搭建由约1.2万颗卫星组成的“星链”网络提供互联网服务，其中1584颗将部署在地球上空550千米处的近地轨道，并从2020年开始工作。</p>
<p>但据有关文件显示，该公司还准备再增加3万颗，使卫星总量达到约4.2万颗。 </p>
<p>2021年3月11日，美国太空探索技术公司(SpaceX)的“猎鹰9”号运载火箭，携带一组60颗“星链”互联网卫星在美佛罗里达州发射升空  。5月5日，SpaceX发射了60颗Starlink卫星  。5月15日，SpaceX使用八手火箭发射52颗星链卫星</p>
<h2 id="中国天链卫星"><a href="#中国天链卫星" class="headerlink" title="中国天链卫星"></a>中国天链卫星</h2><p>“天链”顾名思义是“天上的信息链”，<strong>主要为飞船、空间实验室、空间站等载人航天器提供数据中继和测控服务，为中低轨道遥感、测绘、气象等卫星提供数据中继和测控服务，为航天器发射提供测控支持。****天链卫星将能够有效支撑我国空间站通讯任务，我们将能够随时跟天上航天员进行视频通话。</strong></p>
<p>天链卫星是中国在地球静止轨道上飞行的数据跟踪和中继通信卫星。它们的主要任务是在全球范围内为在轨航天器提供数据中继、测控和传输服务。</p>
<p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2021/0623/f51b5aefj00qv561j003ec000rs00g4m.jpg&thumbnail=650x2147483647&quality=80&type=jpg"></p>
<p>该站网络下行速率为1.2G，相当于地面5G通信速度，时间延迟仅在一秒内。</p>
<p>2008年至2012年，中国先后发射了天链一号01号、天链一号02号和天链一号03号三颗数据跟踪中继卫星。卫星产业链使中国成为世界上第二个拥有覆盖中低轨卫星和载人航天器的中继卫星系统的国家。</p>
<p>随后几年，天链一号04于2016年进入轨道，天链二号01号于2019年作为国家第二代卫星中的第一颗发射升空。</p>
<p>所有卫星将合作改进数据跟踪和传输。天链II-01首次用于载人任务，可以监控多个目标，并提供更好的性能和更高的效率。</p>
<p>天链I-05、天链II-02和天链II-03正在研制中。 </p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ishare.ifeng.com/c/s/7lZgd4iQHrF">https://ishare.ifeng.com/c/s/7lZgd4iQHrF</a></p>
<p>3名航天员实现天地通话，在空间站还能刷视频？这事没那么简单！,<a href="https://www.163.com/dy/article/GD6DRFQE05328YVR.html">https://www.163.com/dy/article/GD6DRFQE05328YVR.html</a></p>
<p>How does China’s satellite chain help taikonauts make home calls?，<a href="https://news.cgtn.com/news/2021-06-23/How-does-China-s-satellite-chain-help-taikonauts-make-home-calls--11k73Oj6YKI/index.html">https://news.cgtn.com/news/2021-06-23/How-does-China-s-satellite-chain-help-taikonauts-make-home-calls--11k73Oj6YKI/index.html</a></p>
<p><a href="https://www.bandwidthplace.com/satellite-internet/">https://www.bandwidthplace.com/satellite-internet/</a></p>
<p>5G-equivalanet network speeds in space empower taikonaut’s unimpeded video call with ground，<a href="https://www.globaltimes.cn/page/202106/1226871.shtml">https://www.globaltimes.cn/page/202106/1226871.shtml</a></p>
]]></content>
  </entry>
  <entry>
    <title>又一勒索软件组织回来了！逮捕只针对洗钱部分，核心成员没被逮捕</title>
    <url>//post/%E5%8F%88%E4%B8%80%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6%E7%BB%84%E7%BB%87%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81%E9%80%AE%E6%8D%95%E5%8F%AA%E9%92%88%E5%AF%B9%E6%B4%97%E9%92%B1%E9%83%A8%E5%88%86%EF%BC%8C%E6%A0%B8%E5%BF%83%E6%88%90%E5%91%98%E6%B2%A1%E8%A2%AB%E9%80%AE%E6%8D%95.html</url>
    <content><![CDATA[<h1 id="又一勒索软件组织回来了！逮捕只针对洗钱部分，核心成员没被逮捕"><a href="#又一勒索软件组织回来了！逮捕只针对洗钱部分，核心成员没被逮捕" class="headerlink" title="又一勒索软件组织回来了！逮捕只针对洗钱部分，核心成员没被逮捕"></a>又一勒索软件组织回来了！逮捕只针对洗钱部分，核心成员没被逮捕</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/df67_shutterstock_129133820.jpg" alt="Recent Arrests Probably Weren’t Able to Stop Cl0p Ransomware"></p>
<p>Cl0p是最著名的勒索软件集团之一，在联邦机构最近的一次打击行动中被发现再次活跃。虽然它的行动保持了大约一周的安静，但它最近在其数据泄露网站上列出了新的受害者。</p>
<h2 id="发生了什么？"><a href="#发生了什么？" class="headerlink" title="发生了什么？"></a>发生了什么？</h2><p>Cl0p团伙回来了，因为它在其勒索软件数据泄露网站上泄露了两名新受害者的数据。<br>运营商公布了一批新的机密数据，声称是从新的受害者那里偷来的。<br>这些数据属于两个受害者，一个是农场设备零售商，而另一个是建筑师的办公室。</p>
<h2 id="快速回归"><a href="#快速回归" class="headerlink" title="快速回归"></a>快速回归</h2><p>Cl0p勒索软件组自2019年3月以来一直很活跃，当时它用CryptoMix勒索软件针对一家企业。据乌克兰警方称，Clop的总损失估计为5亿美元。上周，一次<a href="https://www.bleepingcomputer.com/news/security/ukraine-arrests-clop-ransomware-gang-members-seizes-servers/">执法行动</a>导致Cl0p勒索软件团伙成员被捕。<br>执法部门已经关闭了恶意软件的基础设施，并阻断了对非法获得的加密货币进行洗钱的渠道。<br>然而，最新的活动表明，联邦机构的逮捕只针对行动中的洗钱部分，核心成员没有被逮捕。<br>预计逮捕对Cl0p行动的整体影响不大，因为在一周内，新的活动又开始萌芽。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最近在乌克兰的逮捕行动对Cl0p行动的打击并不大，因为核心组成员没有受到影响。可以说，阻止勒索软件的斗争远未结束，预计将进一步继续。因此，企业应该积极主动地采取足够的安全措施，以保持保护。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cyware.com/news/recent-arrests-probably-werent-able-to-stop-cl0p-ransomware-0fdec2cd">https://cyware.com/news/recent-arrests-probably-werent-able-to-stop-cl0p-ransomware-0fdec2cd</a></p>
]]></content>
  </entry>
  <entry>
    <title>基于netfilter的IP数据统计设计</title>
    <url>//post/%E5%9F%BA%E4%BA%8Enetfilter%E7%9A%84IP%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1%E8%AE%BE%E8%AE%A1%E4%B8%8ELinux%E9%A9%B1%E5%8A%A8%E5%AE%9E%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ol>
<li><a href="#orgab76e7a">背景</a></li>
<li><a href="#org02ac451">IP信息统计</a><ol>
<li><a href="#org62d4d73">统计信息设计</a></li>
<li><a href="#org44f97b2">存储数据结构</a></li>
</ol>
</li>
<li><a href="#orgde188bf">Linux驱动</a><ol>
<li><a href="#orgc0bb933">网络型驱动设备</a></li>
<li><a href="#org9e48264">字符型设备</a></li>
<li><a href="#org8ee7f64">用户代码</a></li>
</ol>
</li>
<li><a href="#org3f4753d">总结</a><ol>
<li><a href="#org01bad05">Linux 驱动</a></li>
<li><a href="#orgd1e6a5e">Linux内核</a></li>
<li><a href="#org4c6ff33">其他</a></li>
</ol>
</li>
<li><a href="#orgfe8069d">参考资料</a></li>
</ol>
<p><a id="orgab76e7a"></a></p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>当今社会，没有都有自己的信息处理设备，如手机、计算机甚至可能是路由器。在使用这些设备的时候，我们想知道的一件事就是，我的电脑和那些设备有过通信，通信情况怎么样，以便在网络出现问题，如拥塞，或是自己主机被黑客控制出现异常数据的时候，能够通过上述统计信息快速定位问题所在。因此本文通过Linux驱动中的netfilter对IP数据报中的IP信息进行统计，通过字符型驱动实现用户态查看统计信息，达到了统计主机通信的目的，为进一步做好异常处理打下了基础。</p>
<p><a id="org02ac451"></a></p>
<h1 id="IP信息统计"><a href="#IP信息统计" class="headerlink" title="IP信息统计"></a>IP信息统计</h1><p><a id="org62d4d73"></a></p>
<h2 id="统计信息设计"><a href="#统计信息设计" class="headerlink" title="统计信息设计"></a>统计信息设计</h2><p>统计对象为源IP地址，信息内容目前设计为：IP出现频次，最后一个IP数据包出现时的时间戳。</p>
<pre><code>typedef struct IPData&#123;
  int timestamp;
  int count
&#125;ipdata;
</code></pre>
<p><a id="org44f97b2"></a></p>
<h2 id="存储数据结构"><a href="#存储数据结构" class="headerlink" title="存储数据结构"></a>存储数据结构</h2><p>由于在Linux Kernel中没有C++的set，map等数据结构，因此使用其提供的红黑树实现IP信息的快速存储和读取。其中红黑树节点的信息如下所示：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">   <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">roc_node_s</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> node<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    ipdata ipcount<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">roc_node_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>红黑树的实现使用Linux Kernel自带的rbtree数据结构，头文件为：</p>
<pre><code>#include &lt;linux/rbtree.h&gt;
</code></pre>
<p>红黑树插入，删除等代码参考链接为：<a href="https://blog.csdn.net/chn475111/article/details/52594457">https://blog.csdn.net/chn475111/article/details/52594457</a>.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
 * filename: my_rbtree.h
 * @author lijk@.infosec.com.cn
 * @version 0.0.1
 * @date 2016-9-20 11:52:06
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/rbtree.h></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">IPData</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> timestamp<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count
<span class="token punctuation">&#125;</span>ipdata<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">roc_node_s</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> node<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">;</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    ipdata ipcount<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">roc_node_t</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>roc_cb<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">roc_node_t</span><span class="token operator">*</span> <span class="token function">roc_search</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> root<span class="token operator">-></span>rb_node<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token function">rb_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> key <span class="token operator">-</span> data<span class="token operator">-></span>key<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            node <span class="token operator">=</span> node<span class="token operator">-></span>rb_left<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            node <span class="token operator">=</span> node<span class="token operator">-></span>rb_right<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">roc_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token operator">*</span>new <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rb_node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>new<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>this <span class="token operator">=</span> <span class="token function">rb_entry</span><span class="token punctuation">(</span><span class="token operator">*</span>new<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> data<span class="token operator">-></span>key <span class="token operator">-</span> this<span class="token operator">-></span>key<span class="token punctuation">;</span>

        parent <span class="token operator">=</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            new <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>new<span class="token punctuation">)</span><span class="token operator">-></span>rb_left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            new <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>new<span class="token punctuation">)</span><span class="token operator">-></span>rb_right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">rb_link_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token operator">-></span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rb_insert_color</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token operator">-></span>node<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">roc_erase</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> roc_cb cb<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token function">roc_search</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">rb_erase</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token operator">-></span>node<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RB_CLEAR_NODE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token operator">-></span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token function">cb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">roc_destroy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> roc_cb cb<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>pos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node <span class="token operator">=</span> <span class="token function">rb_first</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        pos <span class="token operator">=</span> <span class="token function">rb_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"key = %d\n"</span><span class="token punctuation">,</span> pos<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token function">rb_erase</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pos<span class="token operator">-></span>node<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">RB_CLEAR_NODE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pos<span class="token operator">-></span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token function">cb</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">roc_dump</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rb_root</span> <span class="token operator">*</span>root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> sip<span class="token punctuation">,</span> count<span class="token punctuation">,</span> timestamp<span class="token punctuation">;</span>
  <span class="token comment">//printk("roc_dump");</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MAX_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>node <span class="token operator">=</span> <span class="token function">rb_first</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_SIZE <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> node <span class="token operator">=</span> <span class="token function">rb_next</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  sip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">rb_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token operator">-></span>key <span class="token punctuation">;</span>   
  count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">rb_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token operator">-></span>ipcount<span class="token punctuation">.</span>count <span class="token punctuation">;</span>   
  timestamp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">rb_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">roc_node_t</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token operator">-></span>ipcount<span class="token punctuation">.</span>timestamp <span class="token punctuation">;</span>  
  <span class="token function">sprintf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"%s%d.%d.%d.%d|%d|%d,"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span> <span class="token function">NIPQUAD</span><span class="token punctuation">(</span> sip<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//printk(message);</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">roc_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">roc_node_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-></span>ctx<span class="token punctuation">)</span> <span class="token function">kfree</span><span class="token punctuation">(</span>node<span class="token operator">-></span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">kfree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> root <span class="token operator">=</span> RB_ROOT<span class="token punctuation">;</span>

    <span class="token keyword">int</span> loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">roc_node_t</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> loop <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">roc_node_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">roc_node_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        node<span class="token operator">-></span>ctx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        node<span class="token operator">-></span>key <span class="token operator">=</span> loop<span class="token punctuation">;</span>
        <span class="token function">roc_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> loop <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">roc_erase</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> loop<span class="token punctuation">,</span> roc_free<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token function">roc_dump</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">roc_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">,</span> roc_free<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a id="orgde188bf"></a></p>
<h1 id="Linux驱动"><a href="#Linux驱动" class="headerlink" title="Linux驱动"></a>Linux驱动</h1><p>考虑在内核实现的原因是目前Linux相关设备非常多，可能具有一定的参考价值和移植性。<br>笔者的内核环境为：</p>
<pre><code>  uname -r
4.15.0-142-generic
</code></pre>
<p><a id="orgc0bb933"></a></p>
<h2 id="网络型驱动设备"><a href="#网络型驱动设备" class="headerlink" title="网络型驱动设备"></a>网络型驱动设备</h2><p>netfilter的相关参考资料为：Linnux5.0.0下，基于Netlink与NetFilter对本机数据包进行筛选监控,<a href="https://blog.csdn.net/qq_40758751/article/details/105117750">https://blog.csdn.net/qq_40758751/article/details/105117750</a> , netfilter数据包过滤, <a href="https://blog.csdn.net/specialsun/article/details/84695519">https://blog.csdn.net/specialsun/article/details/84695519</a><br>因为本文为源Ip数据包信息统计，所以netfilter hook的层级在NF<sub>INET</sub><sub>LOCAL</sub><sub>IN</sub>.<br>Hook 函数为filter<sub>http</sub>(忽略函数名，粘贴过来，不想改了).</p>
<p><a id="org9e48264"></a></p>
<h2 id="字符型设备"><a href="#字符型设备" class="headerlink" title="字符型设备"></a>字符型设备</h2><p>内核态数据在用户态访问需要通过字符型设备驱动进行。因此建立一个字符型设备&#x2F;dev&#x2F;IPDataSet 使得用户态能够访问内核 态的数据信息。<br>参考资料：ubuntu 添加字符设备驱动程序, <a href="https://blog.csdn.net/ARAFATms/article/details/79397800">https://blog.csdn.net/ARAFATms/article/details/79397800</a><br>因为上述驱动需要自己手动添加字符设备，所以通过以下方法自动添加设备节点。<br>参考资料：linux驱动：自动创建设备节点, <a href="https://blog.csdn.net/u012247418/article/details/83684029">https://blog.csdn.net/u012247418/article/details/83684029</a></p>
<pre><code>// filename: filter_ip.c
#ifndef __KERNEL__
#define __KERNEL__
#endif  /* __KERNEL__ */

#include &lt;linux/module.h&gt;
#include &lt;linux/init.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/string.h&gt;
//#include &lt;asm/uaccess.h&gt;
#include &lt;linux/netdevice.h&gt;
#include &lt;linux/netfilter_ipv4.h&gt;  // ip4 netfilter,ipv6则需引入相应 linux/netfilter_ipv6.h
#include &lt;linux/ip.h&gt;
#include &lt;linux/tcp.h&gt;
#include &lt;linux/sched.h&gt;
#include &quot;linux/kernel.h&quot;
#include &quot;linux/fs.h&quot;
#include &quot;linux/errno.h&quot;
#include &quot;linux/uaccess.h&quot;
#include &quot;linux/kdev_t.h&quot;
#include &lt;linux/device.h&gt;
#include &lt;linux/time.h&gt;

#define NIPQUAD(addr) \  
((unsigned char *)&amp;addr)[0], \  
((unsigned char *)&amp;addr)[1], \  
((unsigned char *)&amp;addr)[2], \  
((unsigned char *)&amp;addr)[3]  

#define MAX_SIZE 1024 * 1024 * 8
char message[MAX_SIZE] = &quot;&quot;;  //打开设备时会显示的消息
#include &quot;my_rbtree.h&quot;

struct rb_root root = RB_ROOT;
int insert(int key, int timestamp)
&#123;

  roc_node_t *node = NULL;
  node = roc_search(&amp;root, key);
  if(node != NULL) &#123;
    node-&gt;ipcount.count++;
    node-&gt;ipcount.timestamp = timestamp;
    return 1;
  &#125;
  node = (roc_node_t*)kmalloc(sizeof(roc_node_t), GFP_KERNEL );
  node-&gt;ctx = NULL;
  node-&gt;key = key;
  node-&gt;ipcount.count = 1;
  node-&gt;ipcount.timestamp = timestamp;
  return roc_insert(&amp;root, node);

&#125;

struct timeval time;
// 过滤http数据包
unsigned int filter_http(char *type,struct sk_buff *pskb)
&#123;
  __be32 sip,dip;
  int retval = NF_ACCEPT;
  int ret, ms;
  struct sk_buff *skb = pskb;

  struct iphdr *iph = ip_hdr(skb);  // 获取ip头

  sip = iph-&gt;saddr;  
  dip = iph-&gt;daddr;  
  //printk(&quot;Packet for source address: %d.%d.%d.%d destination address: %d.%d.%d.%d\n&quot;, NIPQUAD(sip), NIPQUAD(dip));  

  //sprintf(message, &quot;Packet for source address: %d.%d.%d.%d destination address: %d.%d.%d.%d\n&quot;, NIPQUAD(sip), NIPQUAD(dip));


  do_gettimeofday(&amp;time);  /*第一次去获取时间*/  ms = time.tv_sec * 1000 + time.tv_usec / 1000;  ret = insert(sip, ms);  //if(ret == 1)&#123;      roc_dump(&amp;root);  printk(message);  //&#125;  return retval;&#125;


unsigned int NET_HookLocalIn(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return filter_http(&quot;in&quot;,pskb);&#125;


unsigned int NET_HookLocalOut(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  //return filter_http(&quot;out&quot;,pskb);  return NF_ACCEPT;&#125;



unsigned int NET_HookPreRouting(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return NF_ACCEPT;&#125;





unsigned int NET_HookPostRouting(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return NF_ACCEPT;&#125;


unsigned int NET_HookForward(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return NF_ACCEPT;&#125;


// 钩子数组static struct nf_hook_ops net_hooks[] = &#123;  &#123;    .hook         = NET_HookLocalIn,        // 发往本地数据包    .pf            = PF_INET,    .hooknum    =    NF_INET_LOCAL_IN,    .priority    = NF_IP_PRI_FILTER-1,  &#125;,  &#123;    .hook         = NET_HookLocalOut,        // 本地发出数据包    .pf            = PF_INET,    .hooknum    =    NF_INET_LOCAL_OUT,    .priority    = NF_IP_PRI_FILTER-1,  &#125;,  &#123;    .hook         = NET_HookForward,        // 转发的数据包    .pf            = PF_INET,    .hooknum    =    NF_INET_FORWARD,    .priority    = NF_IP_PRI_FILTER-1,  &#125;,  &#123;    .hook        = NET_HookPreRouting,    // 进入本机路由前        .pf            = PF_INET,                    .hooknum    = NF_INET_PRE_ROUTING,            .priority    = NF_IP_PRI_FILTER-1,          &#125;,  &#123;    .hook        = NET_HookPostRouting,    // 本机发出包经路由后        .pf            = PF_INET,                    .hooknum    = NF_INET_POST_ROUTING,            .priority    = NF_IP_PRI_FILTER-1,          &#125;,&#125;;


int my_open(struct inode *inode, struct file *file);int my_release(struct inode *inode, struct file *file);ssize_t my_read(struct file *file, char __user *user, size_t t, loff_t *f);ssize_t my_write(struct file *file, const char __user *user, size_t t, loff_t *f);char* devName = &quot;IPDataSet&quot;;//设备名struct file_operations pStruct =&#123; open:my_open,      release:my_release,      read:my_read,      write:my_write, &#125;;//打开int my_open(struct inode *inode, struct file *file)&#123;  printk(&quot;open lgsDrive OK!\n&quot;);  try_module_get(THIS_MODULE);  return 0;&#125;//关闭int my_release(struct inode *inode, struct file *file)&#123;  printk(&quot;Device released!\n&quot;);  module_put(THIS_MODULE);  return 0;&#125;


//读设备里的信息ssize_t my_read(struct file *file, char __user *user, size_t t, loff_t *f)&#123;  roc_dump(&amp;root);  if(copy_to_user(user,message,t))  &#123;    return -2;  &#125;  return sizeof(message);&#125;//向设备里写信息ssize_t my_write(struct file *file, const char __user *user, size_t t, loff_t *f)&#123;  if(copy_from_user(message,user,t))  &#123;    return -3;  &#125;  return sizeof(message);&#125;


static struct class *drv_class = NULL;int major = 0;//设备号static int __init nf_init(void) &#123;  int ret = 0;  //char device  major = register_chrdev(0, &quot;ipdataset_drv&quot;, &amp;pStruct);  drv_class = class_create(THIS_MODULE, &quot;ipdataset_drv&quot;);  device_create(drv_class, NULL, MKDEV(major, 0), NULL, devName);  //    ret = register_chrdev(0, devName, &amp;pStruct);  //    if (ret &lt; 0)  //    &#123;  //        printk(&quot;failed to register_chrdev.\n&quot;);  //        return -1;  //    &#125;  //    else  //    &#123;  //        printk(&quot;the lgsDrive has been registered!\n&quot;);  //        printk(&quot;id: %d\n&quot;, ret);  //        device_num = ret;  //   //        return 0;  //    &#125;  //net device  ret = nf_register_net_hook(&amp;init_net, net_hooks);  //ret = nf_register_hooks(net_hooks,ARRAY_SIZE(net_hooks));    // 安装钩子  if(ret)  &#123;    printk(KERN_ERR &quot;register hook failed\n&quot;);    return -1;  &#125;  printk(&quot;Start...\n&quot;);  return 0;&#125;void close(void)&#123;  roc_destroy(&amp;root, roc_free);&#125;static void __exit nf_exit(void)&#123;  close();  unregister_chrdev(major, &quot;ipdataset_drv&quot;);  device_destroy(drv_class, MKDEV(major, 0));  class_destroy(drv_class);  //unregister_chrdev(device_num, devName);


  nf_unregister_net_hook(&amp;init_net, net_hooks);  //nf_unregister_hooks(net_hooks,ARRAY_SIZE(net_hooks));    // 卸载钩子  printk(&quot;Exit...\n&quot;);&#125;



module_init(nf_init);module_exit(nf_exit);





MODULE_LICENSE(&quot;Dual BSD/GPL&quot;);MODULE_AUTHOR(&quot;dianwoshishi&quot;);MODULE_DESCRIPTION(&quot;Netfilter IP Statistic&quot;);MODULE_VERSION(&quot;1.0.1&quot;);MODULE_ALIAS(&quot;Netfilter 01&quot;);
</code></pre>
<p><a id="org8ee7f64"></a></p>
<h2 id="用户代码"><a href="#用户代码" class="headerlink" title="用户代码"></a>用户代码</h2><p>上述字符型设备创建了一个字符节点为：&#x2F;dev&#x2F;IPDataSet， 在用户态程序中，我们通过Linux编程中提供的read函数对驱动中的数据message进行读取。<br>代码如下：</p>
<pre><code>   #include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#define MAX_SIZE 1024 char message[MAX_SIZE] ;  //打开设备时会显示的消息int main(int num, char *arg[])&#123;    if(2 != num)&#123;        printf(&quot;Usage: %s /dev/IPDataSet\n&quot;, arg[0]);        return -1;    &#125;    int fd = open(arg[1], O_RDWR);    if(0 &gt; fd)&#123;        perror(&quot;open&quot;);        return -1;    &#125;    int ret = read(fd, message, MAX_SIZE);    printf(&quot;read: ret = %d. %s\n&quot;, ret, message);    memset(message, 0, MAX_SIZE);    ret = write(fd, message, MAX_SIZE);    printf(&quot;write: ret = %d.\n&quot;, ret);    close(fd);    return 0;&#125;
</code></pre>
<p><a id="org3f4753d"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a id="org01bad05"></a></p>
<h2 id="Linux-驱动"><a href="#Linux-驱动" class="headerlink" title="Linux 驱动"></a>Linux 驱动</h2><p>熟悉Linux驱动的编写流程。 了解了Linux内核代码与用户代码的不同，比较明显的就是缺少了类似C++ STL类似的好用的库，只能使用类似红黑树（rbtree)这样的数据结构来做一些set的操作，需要对红黑树有一定的了解。<br>网络设备驱动和字符型设备驱动的编写结构都差不多，但是目前也是一知半解，尤其是一些简单操作之外的特性还不了解，例如加锁？多线程？不知道</p>
<p><a id="orgd1e6a5e"></a></p>
<h2 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h2><p>Linux内核的设计模式还是比较令人佩服的，虽然不懂全貌，但是也能从局部出发，贡献一些力量。再一次感受到了设计的魅力。</p>
<p><a id="org4c6ff33"></a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>一定要在虚拟机中编写、测试驱动，不知道有什么错出现，你就要重启你的电脑，boring！</p>
<p><a id="orgfe8069d"></a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>linux驱动编写（总结篇）,<a href="https://blog.csdn.net/feixiaoxing/article/details/79913476?spm=1001.2014.3001.5506">https://blog.csdn.net/feixiaoxing/article/details/79913476?spm=1001.2014.3001.5506</a><br>智能路由器设备流量、网速统计及上下线提醒（基于netfilter编程）,<a href="https://blog.csdn.net/u012819339/article/details/50513387?spm=1001.2014.3001.5506">https://blog.csdn.net/u012819339/article/details/50513387?spm=1001.2014.3001.5506</a><br>利用Linux内核模块Netfilter hook UDP报文, <a href="https://blog.csdn.net/qq_41791640/article/details/104933006?spm=1001.2014.3001.5506">https://blog.csdn.net/qq_41791640/article/details/104933006?spm=1001.2014.3001.5506</a><br>Netfilter的使用和实现, <a href="https://blog.csdn.net/zhangskd/article/details/22678659?spm=1001.2014.3001.5506">https://blog.csdn.net/zhangskd/article/details/22678659?spm=1001.2014.3001.5506</a></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>netfilter</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>威胁情报</title>
    <url>//post/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5.html</url>
    <content><![CDATA[<h1 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h1><p>网络威胁情报（CTI）仍然可以说是一个新生的、快速发展的领域。但是，情报工作本身在历史上和商业上是一门非常成熟的学科。</p>
<h2 id="情报"><a href="#情报" class="headerlink" title="情报"></a>情报</h2><p>情报的定义有很多，下面列举其中的两个以资说明。</p>
<p>“情报是为回答关于是谁、是什么、在哪里、什么时候、如何和为什么等具体问题而接收或收集的信息…… “英国国家犯罪署（NCA）。<br>“情报是对我们周围世界的了解和预知，是决策和行动的前奏…… “美国中央情报局（CIA）。</p>
<p>然而，无论组织的确切作用和意见的多样性如何，很明显，好的定义一致认为情报的产品是可以帮助决策过程的理解。</p>
<h3 id="数据、信息、情报的区别"><a href="#数据、信息、情报的区别" class="headerlink" title="数据、信息、情报的区别"></a>数据、信息、情报的区别</h3><p>数据、信息和情报这些术语经常被错误地互换使用。</p>
<p><img src="/post/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20210701220816447.png" alt="image-20210701220816447"></p>
<p>数据指的是简单的事实，这些事实往往是大量存在的。在网络安全的背景下，IP地址或日志是典型的数据例子。就其本身而言，原始数据的效用有限。<br>当这些数据被整理以提供有用的输出时，信息就产生了–例如，一系列整理的日志显示了可疑活动的高峰。<br>情报来自于对这些信息的处理和分析，可以用来为决策提供信息。例如，整理后的日志数据与之前关于类似活动的事件报告相联系，这也允许制定一个策略来减轻事件的影响。</p>
<h3 id="以情报为主导的安全"><a href="#以情报为主导的安全" class="headerlink" title="以情报为主导的安全"></a>以情报为主导的安全</h3><p>网络安全越来越被认为是一种优先的商业风险；产品的种类和成熟度越来越高；以及其他因素，如监管要求，都在推动对网络威胁情报服务的需求。</p>
<p>网络威胁情报（Cyber Threat Intelligence, CTI）用于更好地理解、预测和适应恶意行为者的行为，无论他们是犯罪集团、活动甚至是国家。网络威胁情报可以有几种形式，包括关于恶意软件的详细信息、妥协指标（IoC）或恶意行为者用来窃取信息的具体技术。通过掌握这些知识，我们可以更新我们对威胁的防御措施。有许多可能的网络威胁情报来源，如历史事件、开放源码情报（OSINT）、任何威胁反馈、ISACs（信息共享和分析中心）甚至政府威胁的共享计划[^ 5] 。</p>
<h2 id="什么是威胁情报"><a href="#什么是威胁情报" class="headerlink" title="什么是威胁情报"></a>什么是威胁情报</h2><p><img src="http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262089905894.PNG" alt="img"> </p>
<p>图片来源：<a href="https://m.k.sohu.com/d/528075690">https://m.k.sohu.com/d/528075690</a></p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义^1"></a>定义<a href="https://www.sohu.com/a/147187175_354899">^1</a></h3><p>行业内关于“威胁情报”的讨论很多，但是这个词的定义却各有各的说法，但大多数文献中援引的是Gartner在2014年发表的《安全威胁情报服务市场指南》（Market Guide for Security Threat Intelligence Service）中提出的定义，所以我们也来看看Gartner的威胁情报定义，即：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>“威胁情报是关于IT或信息资产所面临的现有或潜在威胁的循证知识，包括情境、机制、指标、推论与可行建议，这些知识可为威胁响应提供决策依据。”</p></blockquote>
<p>如果认为Gartner为威胁情报所下的定义比较让人费解，我们可以参考Jon Friedman和Mark Bouchard在2015年发表的《网络威胁情报权威指南》（Definitive Guide to Cyber Threat Intelligence）中对威胁情报所下的定义：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>“对敌方的情报，及其动机、企图和方法进行收集、分析和传播，帮助各个层面的安全和业务成员保护企业关键资产。”</p></blockquote>
<p>网络威胁分析是识别和评估潜在恶意威胁和文件特性的过程。适当的网络威胁分析是优秀的、可行的网络威胁情报的基础优先级。</p>
<p>传统上，安全防御严格关注于在周边授予或拒绝访问。然而，不断演变的威胁使用一系列的隐身能力来避免被发现。网络威胁分析提供了对文件整个生命周期的持续评估。如果对文件的分析确定它在任何时候都是一个威胁，那么这个威胁将被记录下来并被全面封锁。</p>
<h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容^1"></a>内容<a href="https://www.sohu.com/a/147187175_354899">^1</a></h3><p>针对攻击方的威胁情报应该包含的要点包括了：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>- 攻击者身份：威胁情报需要能够帮助企业将攻击&#x2F;恶意活动最终溯源至相应组织（网络犯罪团体、黑客、政府&#x2F;国家机构等）</p>
<p>- 攻击的原因：了解地方动机，以及他们会在攻击中投入多少精力（APT或仅是投机型攻击），及其针对性有多强等</p>
<p>- 攻击目的：了解攻击者的目的，对于企业和组织基于资产重要性调整响应优先级也是有意义的</p>
<p>- 具体是怎么做的：也就是所谓的TTP（Tatics策略、Technique技术和Procedure程序），这其中也包含了攻击者所用的工具、基础设施等</p>
<p>- 攻击者的位置：结合地方所在国家，以及其地缘政治状况，自然能够帮助企业和组织更好地理解地方情况</p>
<p>- 如何组织情报：包括IOC一类的技术指标（比如IP地址、哈希值等）提供的信息可用来更准确地检测和标记恶意行为</p>
<p>- 如何缓解攻击：企业可用以保护自身的信息</p></blockquote>
<h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><img src="/post/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20210701221224873.png" alt="image-20210701221224873"></p>
<p>Different sources of intelligence Cyber threat intelligence suppliers should draw from a wide range of different sources to enable them to provide a rounded and holistic understanding of the threats that organisations face. This is particularly true because the range of cyber adversaries most organisations face are disparate, and relevant information sources about those threat actors need to match that challenge. Commonly used sources by cyber threat intelligence providers include:Indicators of compromise (IoCs) associated with malicious activity. Hashes of malware samples, IP addresses and domain names can all be used to update firewalls and detection systems, as well as contribute to an understanding of threat actors’ TTPs. IOCs are their own are more akin to data than processed intelligence, though are still included within the spectrum of cyber threat intelligence.<br>Client-derived data, such as that regarding its infrastructure or extracted from a security information and event management (SIEM) tool or other logs can be correlated with other sources, or for pro-active measures such as threat hunting.<br>Deep web, such as information from member-only hacking forums frequented by cybercriminals. These sources can provide valuable insight into the tools and services advertised and requested by cybercriminals, as well as identifying which exploits are being discussed to enable patch prioritisation.<br>Dark web will include marketplaces and shops that are hosted on anonymity-focused networks such as Tor or I2P which criminals use to purchase goods and services. This will enable consumers to identify if their data – ranging from login credentials to valuable intellectual property – is available or being advertised for sale, or if infrastructure they use may be targeted.</p>
<p>Messaging platforms are also used by threat actors to communicate, and can provide intelligence. Rather than relying on semi-public forums, some cybercriminals prefer more direct means of engaging each other to sell their goods and services.<br>Similarly, cyber activists will often use a combination of outmoded Internet Relay Chat (IRC) channels and other messaging platforms to discuss impending operations, which can provide useful insight into potential tactics and targets.<br>Social media can be used by a variety of actors, typically those with low capabilities. Activists may signal their intent to pursue specific targets in advance via social media pages.<br>Criminals may use popular networks as an alternative means of attracting potential customers, particularly in jurisdictions where law enforcement capability is limited and they do not run the risk of arrest. Social media collection may also include coverage of inadvertent data leaks by employees or potential threats from malicious insiders.<br>Human intelligence can be derived from engagement with individuals via several the above sources. However,threat intelligence providers should only engage in such activity under a strict and defined framework and in pursuit of specific intelligence requirements and in a legal and ethical way. Providers also need to ensure that collection efforts from social media and human sources are compliant with legislation such as the General Data Protection Regulation (GDPR).Malware analysis, which allows analysts to extract information such as indicators of compromise from a sample,which can in turn be used to search the client estate. Analysis also allows providers to better understand the latest tactics, techniques and procedures that are being used by threat actors, with a view to informing network defenders how to better respond.<br>Geopolitical developments can be used to derive an understanding of the intent of nation-state actors. For example, understanding how a state’s strategic development objectives coincide with those of the client organisation, or how potential nation-state rivalries will affect the prospect of disruptive attacks in a region in which it operates, will help it understand the threats it faces.<br>Code repositories, such as exploit databases, can provide insight into which exploits are available for adoption by threat actors, and which vulnerabilities should be prioritised for patching as a result.</p>
<p>Paste sites can reveal a wide array of information, including leaked credentials, indications of impending activist operations, code snippets, and evidence of breaches. The example in the image to the right shows a message from a campaign by the Anonymous collective, which goes on to list a series of targets for DDoS attacks.<br>Information sharing platforms can also provide additional context and insight to threat actors’ current activity. These are typically divided along national or sectoral boundaries, and include:• The UK National Cyber Security Centre’s (NCSC) Cyber Security Information Sharing Partnership (CiSP)• The Financial Services Information Sharing and Analysis Center (FS-ISAC)• AlienVault’s Open Threat Exchange (OTX), a crowd-sourced platform used by participants in 140 countries• US-CERT’s (United States Computer Emergency Response Team) Automated Indicator Sharing (AIS) platform• The Asia Pacific (APAC) Intelligence Centre based in Singapore Data from government partners is also available to some sectors and for specific projects. Rather than using these sources in isolation, effective cyber threat intelligence suppliers need to corroborate and fuse together material from different sources to better understand the nature of the threat that their clients face. Ideally, intelligence reports should be multi-sourced – potentially fusing information from at least two source types.</p>
<h3 id="对威胁情报的需求正在增长"><a href="#对威胁情报的需求正在增长" class="headerlink" title="对威胁情报的需求正在增长"></a>对威胁情报的需求正在增长</h3><p>尽管许多安全专业人员仍然对威胁情报的准确性和质量不满意，但它作为网络防御资源的使用正在增长。根据2019年SANS网络威胁情报（CTI）调查，生产或消费CTI的组织比例从60％上升到72％<a href="http://toutiao.secjia.com/%E5%88%A9%E7%94%A8%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E7%BD%91%E5%85%B3tig%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/">^ 2</a>。</p>
<p>网络威胁情报是网络威胁分析的最终结果。这是一组可用于采取行动和防御威胁的调查结果。网络威胁情报不是手动授权或拒绝访问，追踪恶意威胁，并记录以前识别的犯罪分子，而是允许自动的通用行动。例如，如果一个文件被识别为恶意文件，它可以立即在全球所有网络中被阻止。</p>
<p>通过投资网络威胁情报，企业可以访问大量的威胁数据库，这些数据库可以极大地提高他们解决方案的效率。归根结底，安全解决方案的强度取决于为其提供动力的威胁情报。</p>
<h3 id="威胁情报与其他比较"><a href="#威胁情报与其他比较" class="headerlink" title="威胁情报与其他比较"></a>威胁情报与其他比较</h3><p>曾经有一段时间威胁情报与妥协指标（IoC）同义，但现在通常被认为还包括战术，技术和程序（TTP），威胁行为，攻击面意识和战略评估。然后，此安全数据和信息用于创建组织的数字风险图并进行管理。</p>
<h4 id="妥协的指标-Indicators-of-Compromise"><a href="#妥协的指标-Indicators-of-Compromise" class="headerlink" title="妥协的指标(Indicators of Compromise)"></a>妥协的指标(Indicators of Compromise)</h4><p>妥协指标（IOC）被定义为“法医数据，包括在系统日志条目或文件中找到的数据，用于识别系统或网络上的潜在恶意活动。”</p>
<p>通过监控IOC，组织可以检测攻击并迅速采取行动，防止此类攻击发生，或通过阻止早期攻击来限制损害。</p>
<p>有一些用例，允许查询法医文物，如 -</p>
<ul>
<li>通过MD5查找特定文件</li>
<li>搜索实际存储在内存中的特定实体</li>
<li>特定条目或条目集，存储在Windows注册表中</li>
</ul>
<h4 id="其他比较"><a href="#其他比较" class="headerlink" title="其他比较"></a>其他比较</h4><p>作为最纯粹的威胁情报落地应用形态，威胁情报网关（Threat Intelligence Gateway， TIG）与我们熟知的其他安全产品形态，在使用场景上到底有什么区别？<a href="https://www.secrss.com/articles/31430">^3</a></p>
<p>威胁情报网关与其他安全产品如何协同联动？[^6 ]</p>
<h2 id="为什么会有威胁情报"><a href="#为什么会有威胁情报" class="headerlink" title="为什么会有威胁情报"></a>为什么会有威胁情报</h2><p>传统防火墙并不能解决</p>
<h2 id="威胁情报可以干啥"><a href="#威胁情报可以干啥" class="headerlink" title="威胁情报可以干啥"></a>威胁情报可以干啥</h2><p>a rising number of organizations across the world are showing a growing willingness to leverage the open exchange of cyber threat intelligence (CTI) for obtaining a full picture of the fast-evolving cyber threat situation and protecting themselves against cyber-attacks. H</p>
<p>The exchange and collaborative generation of CTI by the means of sharing platforms has proven to be an important aspect of practical application[^4].</p>
<p>This collective information can guide decision making in cyber defense applications utilized by security operation centers (SoCs). </p>
<p><img src="http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262111233067.PNG" alt="![img](http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262089905894.PNG)"></p>
<p><img src="http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262094424869.PNG" alt="img"></p>
<p><img src="http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262099031328.PNG" alt="img"></p>
<p><img src="http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262148816201.PNG" alt="img"></p>
<h2 id="现在都怎么干的"><a href="#现在都怎么干的" class="headerlink" title="现在都怎么干的"></a>现在都怎么干的</h2><h3 id="威胁历史数据"><a href="#威胁历史数据" class="headerlink" title="威胁历史数据"></a>威胁历史数据</h3><p>数据，数据和更多的数据。可行的威胁情报需要过多的威胁历史数据。网络威胁分析和机器学习能力产生了有价值的见解。随着数据集的增大，两者都得到了改善。如果网络威胁情报只有一个10的威胁数据集，它只可能主动阻止10个威胁。随着数据集的增加，威胁情报将获得关于可能威胁您的网络的恶意威胁的更多信息。此外，随着数据量的增加，基于 ml 的分析算法也在不断改进。</p>
<h3 id="自动检测-x2F-阻塞"><a href="#自动检测-x2F-阻塞" class="headerlink" title="自动检测&#x2F;阻塞"></a>自动检测&#x2F;阻塞</h3><p>拥有精确的网络威胁分析、机器学习能力和广泛的威胁历史数据是很棒的，但是网络威胁情报系统需要能够利用这些工具来自动化行动。它不仅需要对检测到的威胁做出反应，还需要采取积极主动的行动，永久性地阻止威胁。</p>
<p>网络威胁的数量正呈指数级增长，并且在可预见的未来可能还会继续增长。手动操作根本无法跟上步伐。因此，当务之急是企业部署一个整合式威胁管理解决方案，能够识别亚洲的威胁，并立即阻止这种威胁在南美洲。</p>
<h3 id="网络威胁分析"><a href="#网络威胁分析" class="headerlink" title="网络威胁分析"></a>网络威胁分析</h3><p>网络威胁情报必须有精心设计的网络威胁分析。企业处理的数据比以往任何时候都多，所以黑客的财务刺激比以往任何时候都大，黑客变得更加老练和协调。这带来了新的挑战，需要更多创新的网络威胁分析技术。</p>
<h3 id="机器学习能力"><a href="#机器学习能力" class="headerlink" title="机器学习能力"></a>机器学习能力</h3><p>威胁防御的两个最令人担忧的趋势是威胁数量的增加和常见威胁的快速演变。为了跟上这些趋势，网络威胁情报需要在威胁情况下利用机器学习。</p>
<p>机器学习可以识别大量数据集中的模式和预测威胁，所有这些都是以机器速度进行的。安全行动小组可以利用这一点，迅速发现需要深入人员分析的高级威胁并对其进行优先排序。为了开发有效的机器学习能力，组织应该考虑以下要求<a href="https://www.cisco.com/c/en/us/products/security/what-is-cyber-threat-intelligence.html#~key-components">^ 7</a>:</p>
<ul>
<li>数据集的多样性和精确性。不同行业、规模和地理位置的组织所遇到的恶意软件的均衡表示，并通过不同的攻击载体传递，对于全面覆盖是必不可少的</li>
<li>多层处理。机器学习管道的每个处理阶段都应该提高检测的准确性和逼真度，以确保安全小组处理优先级高、上下文丰富的检测</li>
<li>端点和网络数据的相关性。通过对多层次处理结果的相关性分析，系统可以加强检测能力，提高检测精度和自学习能力，更快地检测出更多的威胁</li>
<li>深入的领域专业知识和持续培训的分类器。在构建一个不容易操作的健壮的机器学习系统时，领域知识和持续学习是这个难题的关键部分</li>
</ul>
<h2 id="威胁情报系统-平台"><a href="#威胁情报系统-平台" class="headerlink" title="威胁情报系统\平台"></a>威胁情报系统\平台</h2><p>威胁情报平台集中收集来自大量数据源和格式的威胁数据。威胁情报数据量巨大，因此威胁情报平台的设计目的是将数据聚合到一个地方，最重要的是，以可理解和可用的格式显示数据。</p>
<p><img src="https://pic1.zhimg.com/80/v2-235bbe4669a4f1ec8b8f042b70252e70_720w.jpg" alt="img"></p>
<p>与其他IT系统发展相比，网络威胁情报系统发展还处于初级阶段，但这个领域的主导厂商以国外的为主，包括FireEye、Cyveilance、IBM X-Force Exchange</p>
<p>LogRhythm、VeriSign、AlienVault(AlienVault开放威胁交换(OTX)是全球权威的开放威胁信息共享和分析网络。OTX提供了一个由威胁研究人员和安全专业人员组成的全球社区，有来自140个国家的5万多名参与者，每天贡献400多万个威胁指标。)；国内的360威胁情报中心和微步在线Threatbook从2015年起步，离一个完整、成熟的威胁情报平台还有一段路要走。</p>
<p>ThreatMiner，<a href="https://www.threatminer.org/">https://www.threatminer.org/</a></p>
<p>Harpoon：OSINT威胁情报工具</p>
<h3 id="开源软件来实现情报威胁系统"><a href="#开源软件来实现情报威胁系统" class="headerlink" title="开源软件来实现情报威胁系统"></a>开源软件来实现情报威胁系统</h3><p>开源工具非OSSIM莫属，该系统中OTX所提供的功能可满足威胁情报系统的要求。。OSSIM具体部署与使用大家可参考《开源安全运维平台-OSSIM最佳实践》一书。</p>
<p><img src="https://bkimg.cdn.bcebos.com/pic/f9198618367adab493101be28bd4b31c8601e44b?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5/format,f_auto" alt="img"></p>
<h2 id="威胁情报网关Threat-Intelligence-Gateway"><a href="#威胁情报网关Threat-Intelligence-Gateway" class="headerlink" title="威胁情报网关Threat Intelligence Gateway"></a>威胁情报网关Threat Intelligence Gateway</h2><p>落地产品</p>
<p><img src="http://n1.itc.cn/img8/wb/sohulife/2021/04/20/161892262137860997.PNG" alt="img"></p>
<h2 id="威胁情报的挑战"><a href="#威胁情报的挑战" class="headerlink" title="威胁情报的挑战"></a>威胁情报的挑战</h2><h4 id="网络威胁情报交换（cyber-threat-intelligence-CTI-exchange）"><a href="#网络威胁情报交换（cyber-threat-intelligence-CTI-exchange）" class="headerlink" title="网络威胁情报交换（cyber threat intelligence (CTI) exchange）"></a>网络威胁情报交换（cyber threat intelligence (CTI) exchange）</h4><p>, modeling CTI is challenging due to the explicit and implicit relationships among CTI and the heterogeneity of cyber-threat infrastructure nodes involved in CTI. Owing to the limited labels of cyber threat infrastructure nodes involved in CTI, automatically identifying the threat type of infrastructure nodes for early warning is also challenging.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/69594768">https://zhuanlan.zhihu.com/p/69594768</a></p>
<h2 id="FootNotes"><a href="#FootNotes" class="headerlink" title="FootNotes"></a>FootNotes</h2><p>[^4]: Measuring and visualizing cyber threat intelligence quality</p>
<p>[^ 5]: Cybersecurity threat intelligence knowledge exchange based on blockchain</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>(i)基于 Ethereum 区块链的网络威胁情报(CTI)共享激励模型。新的进化经济激励措施是通过 Ether 和一种新的威胁情报数字资产 CTI 令牌(ERC20兼容)的组合提供的。(ii)新增强版的同侪。动态风险管理(DRM)过程中网络威胁情报共享系统的语义方法。为此，我们支持在所有级别(操作、战术和战略级别)以 SWRL 和 STIXTMv2的 OWL 增强版的形式交换 CTI 语义 web 算法(不包括交换 IoC 数据)。(三)模拟模型优化和实验，以证明其好处和限制，特别是在成本方面。</p></blockquote>
]]></content>
  </entry>
  <entry>
    <title>小心! 网络犯罪分子正在对加密货币用户进行攻击</title>
    <url>//post/%E5%B0%8F%E5%BF%83!%20%E7%BD%91%E7%BB%9C%E7%8A%AF%E7%BD%AA%E5%88%86%E5%AD%90%E6%AD%A3%E5%9C%A8%E5%AF%B9%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E6%94%BB%E5%87%BB.html</url>
    <content><![CDATA[<h1 id="小心-网络犯罪分子正在对加密货币用户进行攻击"><a href="#小心-网络犯罪分子正在对加密货币用户进行攻击" class="headerlink" title="小心! 网络犯罪分子正在对加密货币用户进行攻击"></a>小心! 网络犯罪分子正在对加密货币用户进行攻击</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/f464_shutterstock_1076473562.jpg" alt="Watch Out! Cybercriminals are Hitting Hard at Cryptocurrency Users"></p>
<p>随着网络犯罪分子不断发展他们的攻击技术和恶意软件，非法的加密挖矿活动正在飞速增长。上升的主要原因之一是快速增长的加密货币汇率。</p>
<p>此外，新数字货币的引入和加密货币的正式交易，使人们对加密货币滥用和加密货币诈骗带来的新威胁产生了怀疑。根据Akamai最近的报告，在2020年3月至2021年5月期间，虚假的加密货币交易所钓鱼网址激增超过500%。这些钓鱼网址最终使攻击者能够秘密地盗取钱财。然而，攻击者正在将重点从URL转移到恶意应用程序，以欺骗用户并赚取更多利润。</p>
<h2 id="BitScam和CloudScam"><a href="#BitScam和CloudScam" class="headerlink" title="BitScam和CloudScam"></a>BitScam和CloudScam</h2><p>最近，Lookout威胁实验室的安全研究人员发现了170多个安卓应用，这些应用欺骗对加密货币感兴趣的人。<br>根据研究人员的发现，这些应用程序被归类为BitScam和CloudScam。这些应用程序承诺帮助受害者进行云采矿，而不需要额外的商品或服务。<br>这两个版本都提供了加密采矿的订阅和服务，用户可以通过Google Play的应用内付费系统来启用。<br>BitScam与CloudScam的唯一区别是在支付选项中增加了比特币和以太坊。<br>然而，受害者并不知道，攻击者正在眼皮下利用他们。据悉，攻击者至少骗取了35万美元的加密货币资金。</p>
<h2 id="更深层次-的攻击"><a href="#更深层次-的攻击" class="headerlink" title="更深层次 的攻击"></a>更深层次 的攻击</h2><p>联邦调查局发布了一份关于正在进行的针对加密货币所有者和第三方平台的攻击的警告。<br>该警告显示，攻击者正在使用几种战术来控制目标的加密货币交易所账户并窃取数字货币。<br>冒充支付平台和利用SIM卡交换攻击是攻击者用来发动攻击的一些战术。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>随着加密货币变得更加重要，看到它在越来越多的受到攻击将不足为奇，例如DDoS勒索和勒索软件攻击。鉴于与加密货币相关的攻击对消费者和企业的潜在影响，强烈建议建立主动的安全监测和控制。</p>
]]></content>
  </entry>
  <entry>
    <title>不要让你对家人的爱，变成泄露数据隐私的“帮凶”</title>
    <url>//post/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%8D%93%E8%BF%BD%E8%B8%AA%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8%E5%8F%97%E5%88%B0%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BD%B1%E5%93%8D%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%9A%B4%E9%9C%B2%E5%8F%97%E5%AE%B3%E8%80%85%E7%9A%84%E9%9A%90%E7%A7%81%E5%92%8C%E5%AE%89%E5%85%A8.html</url>
    <content><![CDATA[<h1 id="不要让你对家人的爱，变成泄露数据隐私的“帮凶”"><a href="#不要让你对家人的爱，变成泄露数据隐私的“帮凶”" class="headerlink" title="不要让你对家人的爱，变成泄露数据隐私的“帮凶”"></a>不要让你对家人的爱，变成泄露数据隐私的“帮凶”</h1><p>研究人员发现，常见的安卓追踪软件应用受到漏洞的影响，可能暴露受害者的隐私和安全。</p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20171122/7d0c6c6292c74c65864d65745062eacb.jpeg" alt="img"></p>
<p>手机追踪软件，也被称为spouseware，被追踪者用来监视受害者。该应用程序可以收集GPS位置，监视对话，访问浏览器历史记录、图像和存储在设备上的其他敏感数据，一般用来作为保护儿童的解决方案。例如现在很多这种的手表(<strong>图文无关</strong>)</p>
<p><img src="https://www.wdszb.com/uploads/170419/1-1F419155F2448.jpg" alt="查看源图像"></p>
<p><strong>但它们提供的间谍软件功能也可能被第三方滥用。</strong></p>
<h2 id="众多安卓追踪软件应用存在安全风险"><a href="#众多安卓追踪软件应用存在安全风险" class="headerlink" title="众多安卓追踪软件应用存在安全风险"></a>众多安卓追踪软件应用存在安全风险</h2><p>据ESET研究人员称，在对86个安卓追踪软件应用的分析中，在58个安卓追踪软件应用中发现了超过150个安全漏洞，这些漏洞使受害者暴露在其他隐私和安全风险中。</p>
<p>研究人员手动分析了86个不同供应商提供的安卓平台的追踪软件应用。安装和远程监视或控制追踪软件的人被定义为<strong>追踪者</strong>，而<strong>受害者</strong>是追踪者使用追踪软件监视的目标人物。<strong>攻击者</strong>是追踪者和受害者通常不知道的第三方。攻击者可以利用如追踪软件或其相关监控服务中的安全问题或隐私缺陷等，发动攻击。最常见的问题包括不安全地传输受害者的PII和将敏感数据储存在外部媒介上。</p>
<p><img src="/post/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%8D%93%E8%BF%BD%E8%B8%AA%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8%E5%8F%97%E5%88%B0%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BD%B1%E5%93%8D%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%9A%B4%E9%9C%B2%E5%8F%97%E5%AE%B3%E8%80%85%E7%9A%84%E9%9A%90%E7%A7%81%E5%92%8C%E5%AE%89%E5%85%A8/Users\dianwoshishi\AppData\Roaming\Typora\typora-user-images\image-20210701202721911.png" alt="image-20210701202721911"></p>
<p>攻击者可以利用该缺陷获得对受害者设备的控制，它还可以通过上传捏造的证据来威胁受害者。</p>
<p><img src="https://hackaday.com/wp-content/uploads/2016/03/grabbing-file-off-computer.jpg?w=400" alt="img"></p>
<h2 id="目前修复动态"><a href="#目前修复动态" class="headerlink" title="目前修复动态"></a>目前修复动态</h2><p>研究人员在开发团队的90天协调信息披露政策(coordinated disclosure policy)后向其披露了该漏洞。截至目前，只有六家厂商解决了研究人员发现的漏洞，只有七家厂商计划修复这些漏洞，有一家厂商决定不修复报告的问题。</p>
<h2 id="研究人员对使用此类软件的人员发出警告"><a href="#研究人员对使用此类软件的人员发出警告" class="headerlink" title="研究人员对使用此类软件的人员发出警告"></a>研究人员对使用此类软件的人员发出警告</h2><p>研究人员总结说，这项研究应该作为对未来追踪软件客户的警告，让他们重新考虑使用软件来对付他们的配偶和亲人，因为这不仅是不道德的，而且可能导致泄露他们配偶的私人和私密信息，使他们面临网络攻击和欺诈的风险。</p>
<p>同时，这对追踪者来说也是有风险的，因为追踪者和受害者之间可能存在密切的关系，因此他们的私人信息也可能被暴露。</p>
]]></content>
  </entry>
  <entry>
    <title>应用商店下载量达580万的应用程序竟然盗取用户的密码</title>
    <url>//post/%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E4%B8%8B%E8%BD%BD%E9%87%8F%E8%BE%BE580%E4%B8%87%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%AB%9F%E7%84%B6%E7%9B%97%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E5%AF%86%E7%A0%81.html</url>
    <content><![CDATA[<h1 id="应用商店下载量达580万的应用程序竟然盗取用户的密码"><a href="#应用商店下载量达580万的应用程序竟然盗取用户的密码" class="headerlink" title="应用商店下载量达580万的应用程序竟然盗取用户的密码"></a>应用商店下载量达580万的应用程序竟然盗取用户的密码</h1><p><img src="https://techviral.net/wp-content/uploads/2017/11/OMG-Google-Detects-New-Android-Malware-That-Can-Spy-On-Users.jpg" alt="查看源图像"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>研究人员发现了谷歌商店(Google Play)中9个盗取凭证的应用程序，这些应用能够偷取用户的Facebook登录凭证。</p>
<p><img src="https://cdn.arstechnica.net/wp-content/uploads/2021/07/google-play-800x532.jpeg" alt="Apps with 5.8 million Google Play downloads stole users’ Facebook passwords"></p>
<h2 id="盗取用户名密码"><a href="#盗取用户名密码" class="headerlink" title="盗取用户名密码"></a>盗取用户名密码</h2><p>据安全公司Dr.Web发表的一篇文章称，为了赢得用户的信任并降低他们的警惕性，这些应用程序提供了功能齐全的照片编辑和取景、运动和训练、星座和删除安卓设备上的垃圾文件等服务。所有被确认的应用程序都为用户提供了一个选项，即通过登录他们的Facebook账户来禁用应用内广告。选择该选项的用户看到一个真正的Facebook登录框，其中包含输入用户名和密码的字段。</p>
<p><img src="https://cdn.wccftech.com/wp-content/uploads/2016/10/malware-android.jpg" alt="img"></p>
<h2 id="来自同一木马变体"><a href="#来自同一木马变体" class="headerlink" title="来自同一木马变体"></a>来自同一木马变体</h2><p>研究人员确定了藏在应用程序中的五个恶意软件变体。其中三个是原生安卓应用，其余两个使用谷歌的Flutter框架，该框架是为跨平台兼容而设计。Dr.Web说，它把所有这些都归类为同一个木马，因为它们使用相同的配置文件格式和相同的JavaScript代码来窃取用户数据。</p>
<h2 id="受影响的应用清单"><a href="#受影响的应用清单" class="headerlink" title="受影响的应用清单"></a>受影响的应用清单</h2><p>大部分的下载是针对一个名为PIP Photo的应用程序，其访问量超过580万次。覆盖面次之的应用程序是Processing Photo，下载量超过50万次。其余的应用是</p>
<p>Rubbish Cleaner，垃圾清理器：超过10万次下载<br>Inwell Fitness，英威健身：超过10万次下载<br>Horoscope Daily，星座日报：超过100,000次下载<br>App Lock Keep：超过50,000次下载<br>Lockit Master：超过5,000次下载<br>Horoscope Pi，星座Pi：超过5,000次下载 1,000次下载<br>App Lock Manager：10次下载</p>
<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>在Google Play搜索显示，所有的应用程序都已从Play中删除。谷歌发言人表示，该公司还禁止所有9个应用程序的开发者进入商店，这意味着他们将不被允许提交新的应用程序。谷歌这样做是对的，但这对开发者来说无所谓，因为他们可以用不同的名字注册一个新的开发者账户，只需一次性支付25美元即可。</p>
<p>任何下载了上述应用程序的人都应该彻底检查他们的设备和他们的Facebook账户，看看是否有任何被破坏的迹象。从已知的安全公司下载一个免费的安卓防病毒应用程序，并扫描其他恶意应用程序。</p>
]]></content>
  </entry>
  <entry>
    <title>微软披露路由器NETGEAR固件漏洞</title>
    <url>//post/%E5%BE%AE%E8%BD%AF%E6%8A%AB%E9%9C%B2NETGEAR%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<h1 id="微软披露路由器NETGEAR固件漏洞"><a href="#微软披露路由器NETGEAR固件漏洞" class="headerlink" title="微软披露路由器NETGEAR固件漏洞"></a>微软披露路由器NETGEAR固件漏洞</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2021/07/netgear-800x400.png" alt="img"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>网络安全研究人员披露了影响NETGEAR DGN2200v1系列路由器的关键安全漏洞，这些漏洞可以使认证绕过设备并访问存储的凭证。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这三个HTTPd认证安全漏洞的CVSS评分为7.1-9.4，影响运行v1.0.0.60之前的固件版本的路由器，作为协调漏洞披露过程的一部分，该公司在2020年12月打了补丁。</p>
<p>微软365防御者研究团队的Jonathan Bar Or说，越来越多的固件攻击和通过VPN设备和其他面向互联网的系统进行的勒索软件攻击，这是在操作系统层之外和之下发起攻击的例子。由于这些类型的攻击已经变得很普遍，用户甚至必须确保运行其硬件的单一用途软件（如路由器）的安全。</p>
<p>这些漏洞允许使用认证旁路访问路由器管理页面，使攻击者能够达到对路由器的完全控制，还可以通过加密的侧信道攻击获得保存的路由器凭证，甚至通过利用配置备份&#x2F;恢复功能恢复存储在路由器内存中的用户名和密码。</p>
<p>研究人员还发现，凭证是用一个恒定的密钥进行加密的，随后可以用它来检索明文密码和用户名。</p>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>建议所有NETGEAR DGN2200v1用户下载并更新到最新固件，以避免任何潜在的攻击。</p>
]]></content>
  </entry>
  <entry>
    <title>恶意软件投放：不容忽视的伪装威胁</title>
    <url>//post/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E6%8A%95%E6%94%BE%EF%BC%9A%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86%E7%9A%84%E4%BC%AA%E8%A3%85%E5%A8%81%E8%83%81.html</url>
    <content><![CDATA[<h1 id="恶意软件投放：不容忽视的伪装威胁"><a href="#恶意软件投放：不容忽视的伪装威胁" class="headerlink" title="恶意软件投放：不容忽视的伪装威胁"></a>恶意软件投放：不容忽视的伪装威胁</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/6e20_shutterstock_667515631.jpg" alt="Malware Dropper: A Threat in Disguise That Cannot be Ignored"></p>
<p>企业正受到恶意软件投放器(dropper)的打击，这种投放器使得攻击者能够进行多阶段的攻击。这使得企业面临更高的恶意软件威胁、数据被盗和系统被破坏等风险。</p>
<h2 id="什么是恶意软件投放器"><a href="#什么是恶意软件投放器" class="headerlink" title="什么是恶意软件投放器"></a>什么是恶意软件投放器</h2><p>Droppers是特洛伊木马的一种类型。它们的标志性目的是，一旦它们出现在一个系统中，就安装其他恶意软件。事实上，它们被命名为投放器(droppers )，因为它们将恶意软件和恶意软件组件投放到一个被破坏的系统中。这种活动为投放者赢得了 “催生恶意软件的恶意软件 “的绰号。</p>
<p>为了更好地避免被发现，投放者通常不会保存到被攻击系统的磁盘上。相反，投放者通常在其目的达到后自行删除。它们在推进攻击目标的过程中经常执行不同的行动。</p>
<h2 id="传播方式"><a href="#传播方式" class="headerlink" title="传播方式"></a>传播方式</h2><p>droppers 程序可以通过多种方式传播。最常见的外挂程序传播方式包括。</p>
<ul>
<li>访问恶意网站</li>
<li>点击恶意链接</li>
<li>垃圾邮件的附件</li>
<li>插入受感染的可移动媒体</li>
<li>使用受感染的互联网代理</li>
<li>下载受感染的免费软件</li>
</ul>
<p>droppers 也可能通过受感染的应用程序传播–甚至是那个广泛使用的、看似合法的应用程序。研究人员最近发现，CamScanner，一个下载量超过1亿的流行的安卓应用，已经有一段时间在其中隐藏了一个droppers 程序。</p>
<h2 id="最新的恶意软件投放器活动"><a href="#最新的恶意软件投放器活动" class="headerlink" title="最新的恶意软件投放器活动"></a>最新的恶意软件投放器活动</h2><p>Proofpoint研究人员剖析了JSSLoader恶意软件的一个新变种，它为威胁者提供了躲避检测和加载额外有效载荷(payload)的机会。</p>
<ul>
<li>在另一项研究中，Proofpoint发现了一个新的Smoke Loader活动，该活动将Raccoon Stealer和RedLine等窃取数据的恶意软件作为最终的有效载荷。该活动的初始感染过程涉及将受害者引诱到一个提供商业和个人使用的隐私工具的虚假网站。</li>
<li>Sload，也被称为Starslord loader，在针对欧洲、英国和意大利的多个供应商的恶意活动中被发现。恶意软件创建者使用VBS和PowerShell等脚本作为其最初立足点(initial foothold)的一部分，诱使用户执行加载器。</li>
<li>一种名为Matanbuchus Loader的新恶意软件即服务，能够从C2基础设施中投放第二阶段的恶意软件，也被各种攻击者使用。</li>
</ul>
<h2 id="下载器的发展造成了更大的破坏"><a href="#下载器的发展造成了更大的破坏" class="headerlink" title="下载器的发展造成了更大的破坏"></a>下载器的发展造成了更大的破坏</h2><ul>
<li>不仅JSSLoader已经进化到为其操作者提供多阶段攻击的多种选择，而且另一个名为Buer Loader的恶意软件下载器也已被改造，以帮助在不被发现的情况下在被攻击的系统中获得立足点。</li>
<li>Proofpoint发现，名为RustyBuer的新变种已经影响到全球50多个垂直行业的200多个组织。</li>
</ul>
<h2 id="基于TLS的恶意流量"><a href="#基于TLS的恶意流量" class="headerlink" title="基于TLS的恶意流量"></a>基于TLS的恶意流量</h2><ul>
<li>在Sophos进行的一项研究中，研究人员发现，初始阶段的恶意软件，如加载器（loaders）、投放器（droppers）和基于文件的安装器（installers ），在很大程度上依赖于恶意的TLS流量，以确保他们对受害者机器的访问。</li>
<li>Sophos解释说，使用TLS是一种逃避基本有效载荷检查的方式。此外，在恶意软件投放器中利用该协议并不需要太复杂，因为支持TLS的基础设施可以有效提供恶意软件或恶意代码片段。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Droppers 是一种著名的恶意软件类型，从特洛伊木马的早期就已经存在了。除了下载和安装恶意软件外，人们还观察到攻击者表现出不同的行为，使其与其他恶意软件不同。这些行为包括搜索可用的安全控件，连接到可疑的网站，并试图隐藏与网站的连接。此外，随着勒索软件和持续的恶意电子邮件威胁的增加，预计加载器的存在越来越多，可能会见证一个上升。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://resources.infosecinstitute.com/topic/malware-spotlight-droppers/">https://resources.infosecinstitute.com/topic/malware-spotlight-droppers/</a></p>
]]></content>
  </entry>
  <entry>
    <title>打印机软件中存在16年的漏洞可让黑客获取管理权限</title>
    <url>//post/%E6%89%93%E5%8D%B0%E6%9C%BA%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%AD%98%E5%9C%A816%E5%B9%B4%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%8F%AF%E8%AE%A9%E9%BB%91%E5%AE%A2%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E6%9D%83%E9%99%90.html</url>
    <content><![CDATA[<h1 id="打印机软件中存在16年的漏洞可让黑客获取管理权限"><a href="#打印机软件中存在16年的漏洞可让黑客获取管理权限" class="headerlink" title="打印机软件中存在16年的漏洞可让黑客获取管理权限"></a>打印机软件中存在16年的漏洞可让黑客获取管理权限</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2021/07/printer-800x400.jpg" alt="img"></p>
<h2 id="速揽"><a href="#速揽" class="headerlink" title="速揽"></a>速揽</h2><p>在惠普、施乐和三星打印机驱动程序中发现的一个存在16年的安全漏洞，允许攻击者在使用有漏洞的驱动程序软件的系统上获得管理权限。这个被称为CVE-2021-3438的安全漏洞是特定型号打印机的SSPORT.SYS驱动程序中的缓冲区溢出，可能导致用户权限的本地升级。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在惠普、施乐和三星打印机驱动程序中发现的一个存在16年的安全漏洞，允许攻击者在使用有漏洞的驱动程序软件的系统上获得管理权限。这个被称为CVE-2021-3438的安全漏洞是特定型号打印机的SSPORT.SYS驱动程序中的缓冲区溢出，可能导致用户权限的本地升级。</p>
<p>这个高危漏洞自2005年起就存在于打印机软件中，影响到全球数以亿计的设备和数百万的用户。</p>
<p>SentinelOne的研究人员发现，这个有问题的驱动程序会自动与打印机软件一起安装，并在每次系统重启后被Windows加载。这使得它成为提升权限的完美目标，因为即使在打印机没有连接到目标设备时，也很容易滥用这个漏洞。要成功利用这个漏洞，需要本地用户访问，这意味着威胁者将需要首先在目标设备上获得一个立足点。一旦他们得到这一点，他们就可以滥用这个安全漏洞，在不需要用户交互的情况下，在低复杂度的攻击中提升权限。</p>
<p>研究人员表示，在成功利用驱动漏洞后，可能会让攻击者有可能安装程序，查看、改变、加密或删除数据，或创建具有完全用户权限的新账户。</p>
<p>由于没有证据表明这一漏洞在现实中被利用但单目前有数以亿计的企业和用户存在漏洞，攻击者会寻找那些采取适当防护措施的人。惠普、施乐和三星的企业和家庭用户尽快应用这两家供应商提供的补丁。</p>
]]></content>
  </entry>
  <entry>
    <title>打着安全的幌子公然给客户安装恶意软件</title>
    <url>//post/%E6%89%93%E7%9D%80%E5%AE%89%E5%85%A8%E7%9A%84%E5%B9%8C%E5%AD%90%E5%85%AC%E7%84%B6%E7%BB%99%E5%AE%A2%E6%88%B7%E5%AE%89%E8%A3%85%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6.html</url>
    <content><![CDATA[<h1 id="打着安全的幌子公然给客户安装恶意软件"><a href="#打着安全的幌子公然给客户安装恶意软件" class="headerlink" title="打着安全的幌子公然给客户安装恶意软件"></a>打着安全的幌子公然给客户安装恶意软件</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/shutterstock_255112744.jpg" alt="Malicious Privacy Tools Advertised to Extract Private Data"></p>
<p>最近，来自Proofpoint的研究人员发现了一种新的网络安全威胁，它试图用一个看起来很专业的网站的虚假幌子来欺骗人们，声称可以提供更强的安全性。这种伪装可以说是一种讽刺，因为它实际上最终在受害者的机器上部署了信息窃取的恶意软件。</p>
<h1 id="发现了什么？"><a href="#发现了什么？" class="headerlink" title="发现了什么？"></a>发现了什么？</h1><p>一些威胁者开发了一个看起来合法的网站，伪装成隐私工具服务，声称提供实用工具来保护个人和商业数据。</p>
<ul>
<li>这个所谓的隐私工具服务被宣传为一个类似zip的实用工具，可以加密用户数据确保安全。</li>
<li>该网站提供了有关所谓服务的详细信息，包括指导用户下载和使用隐私工具的分步说明。</li>
<li>按照指示，受害者最终会安装Smoke Loader恶意软件，它是一个具有多种功能的模块化下载器。<br>Smoke Loader工具进一步下载了两个数据窃取的恶意软件：Redline和Raccoon Stealer。</li>
</ul>
<h1 id="最近的信息窃取者攻击"><a href="#最近的信息窃取者攻击" class="headerlink" title="最近的信息窃取者攻击"></a>最近的信息窃取者攻击</h1><p>在过去的一段时间里，有几个攻击者被观察到通过使用虚假的假装或其他方法来引诱他们的受害者来传播信息窃取恶意软件。</p>
<ul>
<li>在上个月，一些攻击者被发现滥用谷歌搜索结果中的一些点击付费（PPC）广告，会下载恶意的AnyDesk、Dropbox和Telegram软件包。这些假的应用程序最终会使受害者感染Redline、Taurus、Tesla和Amadey信息窃取者恶意软件。</li>
<li>早些时候，一些威胁者被发现滥用微软Build（MSBuild）引擎，用Remcos RAT和Quasar RAT以及RedLine Stealer感染受害者。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最新的活动揭示了攻击者在使这种以隐私为主题的诱饵变得现实和有效方面所付出的越来越多的努力。此外，信息窃取越来越多，引起了人们对地下黑市中私人信息不断增长的需求的担忧。因此，建议用户通过使用可靠的反恶意软件解决方案提供保护。</p>
]]></content>
  </entry>
  <entry>
    <title>救援机器人队伍将驰援佛罗里达州救援现场，是搜救行动的有力工具</title>
    <url>//post/%E6%95%91%E6%8F%B4%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B0%86%E9%A9%B0%E6%8F%B4%E4%BD%9B%E7%BD%97%E9%87%8C%E8%BE%BE%E5%B7%9E%E6%95%91%E6%8F%B4%E7%8E%B0%E5%9C%BA.html</url>
    <content><![CDATA[<h1 id="救援机器人队伍将驰援佛罗里达州救援现场，是搜救行动的有力工具"><a href="#救援机器人队伍将驰援佛罗里达州救援现场，是搜救行动的有力工具" class="headerlink" title="救援机器人队伍将驰援佛罗里达州救援现场，是搜救行动的有力工具"></a>救援机器人队伍将驰援佛罗里达州救援现场，是搜救行动的有力工具</h1><p><img src="https://www.freethink.com/media/pages/articles/rescue-robots/3285291516-1625231404/rescue-robots-banner-2400x1000.jpg" alt="img"></p>
<p>截至7月3日，已有37人从6月24日清晨倒塌的佛罗里达州公寓楼中获救。然而，还有140多人仍然下落不明–现在已经派出<strong>救援机器人</strong>来寻找他们。</p>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><p>搜救工作往往是与时间赛跑–在大楼倒塌这样的情况下，每过一个小时，找到幸存者的可能性就会减少。</p>
<p>然而，对于急救人员来说，倒塌的建筑物也是一个非常危险的地方，所以他们必须非常慎重地在其中穿行–一个错误的动作，就可能导致难以想象的后果。</p>
<p>7月1日上午，佛罗里达州的另一部分建筑开始出现可能倒塌的迹象，因此急救人员在当天的大部分时间里被从现场撤出。当搜索重新开始时，他们的进入受到限制。</p>
<h2 id="救援机器人"><a href="#救援机器人" class="headerlink" title="救援机器人"></a>救援机器人</h2><p>机器人可以成为搜救行动的有力工具，它使用摄像机和其他传感器来寻找幸存者的迹象，而不会将人类救援人员置于危险之中。</p>
<p>较小的救援机器人还可以进入人类无法–或不应该–驾驭的狭小空间。</p>
<p><img src="https://www.unmannedsystemstechnology.com/wp-content/uploads/2013/04/iRobot-110-FirstLook.jpg" alt="img"></p>
<p>“机器人公司Teledyne Flir的无人地面系统副总裁汤姆-弗罗斯特告诉《华盛顿邮报》：”在这样的坍塌情况下，桩的结构不健全，经常容易发生移动。”让机器人爬到空隙深处比让人爬到空隙中要安全得多。”</p>
<h2 id="提供帮助"><a href="#提供帮助" class="headerlink" title="提供帮助"></a>提供帮助</h2><p>据《邮报》报道，Teledyne Flir公司已经向迈阿密-戴德消防局（MDFR）派出了至少两个救援机器人，以帮助处理佛罗里达州的灾难。</p>
<p>其中一个是重达7磅、类似坦克的机器人，名为FirstLook。它配备了摄像头和麦克风，可以在跌落到混凝土上的16英尺处生存。</p>
<p><img src="http://cdn.shopify.com/s/files/1/0059/3932/products/iRobot_110_FirstLook_14.jpg?v=1339531708" alt="img"></p>
<p>“弗罗斯特说：”你可以把这个机器人扔进窗户或扔到屋顶上，然后到达真正难以到达的地方。</p>
<p>另一个是名为PackBot的手提箱大小的机器人。它在9&#x2F;11恐怖袭击世界贸易中心后协助了救援工作，被设计用来移动物体和携带多达40磅的货物。</p>
<p><img src="http://shvachko.net/wp-content/uploads/2013/04/iRobot_510_PackBot.jpg" alt="img"></p>
<h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>目前还不清楚MDFR是否已经部署了这两个救援机器人，或计划在未来部署。</p>
<p>然而，第一波救援已经使用了无人机、声纳和其他技术–由于安全问题限制了人类救援人员目前能做的事情，地面机器人可能是救援工作的一个有价值的补充。</p>
]]></content>
  </entry>
  <entry>
    <title>一个用Go编程语言编写的新木马被用于勒索攻击</title>
    <url>//post/%E6%96%B0%E7%9A%84GoLang%E6%9C%A8%E9%A9%AC.html</url>
    <content><![CDATA[<h1 id="一个用Go编程语言编写的新木马被用于勒索攻击"><a href="#一个用Go编程语言编写的新木马被用于勒索攻击" class="headerlink" title="一个用Go编程语言编写的新木马被用于勒索攻击"></a>一个用Go编程语言编写的新木马被用于勒索攻击</h1><p><img src="https://cystory-images.s3.amazonaws.com/GoLang_Malware.png" alt="img"></p>
<p>被称为ChaChi的恶意软件，在2020年上半年被发现，远程访问木马（RAT）的原始变体已经与针对法国地方政府当局的网络攻击有关，但现在，一个更为复杂的变体已经出现。现有的最新样本已与针对美国大型学校和教育机构发起的攻击有关。</p>
<h2 id="Go语言开发的恶意软件"><a href="#Go语言开发的恶意软件" class="headerlink" title="Go语言开发的恶意软件"></a>Go语言开发的恶意软件</h2><p>ChaChi是用GoLang（Go）编写的，这种编程语言由于其通用性和跨平台代码编译的便利性，现在被攻击者使用。 </p>
<p><img src="https://www.cybersafe.news/wp-content/uploads/2021/06/Golang-800x400.png" alt="img"></p>
<p>据Intezer称，在过去几年中，基于Go的恶意软件样本大约增加了2000%。据黑莓威胁研究和情报部门的研究团队称，由于这是一个新现象，许多核心分析工具仍在开发。这可能使分析Go的恶意软件更具挑战性。</p>
<p><img src="https://unit42.paloaltonetworks.com/wp-content/uploads/2019/07/golang-hacker.jpg" alt="img"></p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>ChaChi之所以这样命名，是因为Chashell和Chisel是恶意软件在攻击过程中使用的两个现成的工具。Chashell是一个通过DNS提供的反向外壳，而Chisel是一个端口转发系统。</p>
<h2 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h2><p>与ChaChi的第一个变种相比，该恶意软件具有较差的混淆和低级别的攻击能力，现在能够执行典型的RAT活动，包括创建后门和数据渗透，以及通过Windows本地安全授权子系统服务（LSASS）进行证书转储、网络枚举、DNS隧道、SOCKS代理功能、服务创建和跨网络横向移动。该恶意软件使用一个可开源的GoLang工具gobfuscate进行混淆。</p>
<h2 id="黑客组织PYSA"><a href="#黑客组织PYSA" class="headerlink" title="黑客组织PYSA"></a>黑客组织PYSA</h2><p>黑莓研究人员认为，该木马是PYSA&#x2F;Mespinoza的作品，该威胁组织以发起勒索软件活动和使用扩展名而闻名。当受害者的文件被加密时，PYSA代表 “保护你的系统Amigo”。</p>
<p>通常PYSA专注于 “猎杀大型游戏”( “big game hunting” )，并挑选那些能够支付大笔赎金的目标。这些攻击是有针对性的，由人类操作员控制，而不是自动化执行。</p>
]]></content>
  </entry>
  <entry>
    <title>时尚零售商Guess披露数据泄露</title>
    <url>//post/%E6%97%B6%E5%B0%9A%E9%9B%B6%E5%94%AE%E5%95%86Guess%E6%8A%AB%E9%9C%B2%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2.html</url>
    <content><![CDATA[<h1 id="时尚零售商Guess披露数据泄露"><a href="#时尚零售商Guess披露数据泄露" class="headerlink" title="时尚零售商Guess披露数据泄露"></a>时尚零售商Guess披露数据泄露</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2021/07/guess.jpg" alt="img"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>美国时尚品牌和零售商Guess在2月份的勒索软件攻击导致数据被盗后，又遭遇了数据泄露。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>该公司已经开始通知受影响的客户有关数据泄露的情况，其中指出，经调查发现，在2021年2月2日至2021年2月23日期间，Guess的系统遭到未经授权的访问。</p>
<p>经过调查，在2021年5月26日，确定与某些人有关的个人信息可能已经被未经授权的行为者使用。在这次攻击中暴露的信息包括社会安全号码、驾驶执照号码、护照号码和&#x2F;或金融账户号码等细节。尽管受影响的个人数量没有透露，但提交给缅因州总检察长办公室的信息显示，在2月份的攻击中，有超过1300人的数据被暴露或被访问。</p>
<p>Guess没有提供任何关于勒索软件攻击背后的威胁者的细节，但DarkSide勒索软件团伙已将Guess列入其数据泄露网站。</p>
<p>该团伙声称，在试图加密他们的系统之前，已经从这家时尚零售商的网络中窃取了价值超过200GB的文件。</p>
<h2 id="措施和进展"><a href="#措施和进展" class="headerlink" title="措施和进展"></a>措施和进展</h2><p>这家时尚零售商在2021年6月3日完成了对存储在被入侵系统中的文件的全面审查后，确定了所有受影响个人的地址。</p>
<p>Guess已经通过Experian向所有受影响的个人提供免费的身份盗窃保护服务和一年的免费信用监测。</p>
<p>Guess公司已经实施了额外的措施来提高其安全协议，并正在与执法部门合作，作为正在进行的事件调查的一部分。</p>
<p>截至2021年5月，Guess在美洲、欧洲和亚洲直接经营1041家零售店，其分销商和合作伙伴在全球另有539家店。属于Guess零售网络的商店目前在大约100个国家经营。</p>
]]></content>
  </entry>
  <entry>
    <title>（转载）来网络空间钓鱼吧</title>
    <url>//post/%E6%9D%A5%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E9%92%93%E9%B1%BC%E5%90%A7.html</url>
    <content><![CDATA[<h1 id="（转载）来网络空间钓鱼吧"><a href="#（转载）来网络空间钓鱼吧" class="headerlink" title="（转载）来网络空间钓鱼吧"></a>（转载）来网络空间钓鱼吧</h1><p><img src="https://img.php.cn/upload/article/000/000/024/5c2dbc0a34396146.jpg"></p>
<h2 id="什么是网络钓鱼？"><a href="#什么是网络钓鱼？" class="headerlink" title="什么是网络钓鱼？"></a>什么是网络钓鱼？</h2><p>网络钓鱼是一种尝试使用欺骗性电子邮件和网站收集个人信息的攻击方式。攻击者会伪装成信誉良好的实体或个人通过电子邮件或其他通信渠道，使用网络钓鱼电子邮件分发可执行各种功能的恶意链接或附件，从受害者中提取登录凭据或帐户信息；或者自动下载恶意软件，让受害者使用恶意软件感染自己的计算机。</p>
<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP.7PzuDJygEAmoeVP7YAWqZgHaDx?pid=ImgDet&rs=1"></p>
<h2 id="网络钓鱼的类型"><a href="#网络钓鱼的类型" class="headerlink" title="网络钓鱼的类型"></a>网络钓鱼的类型</h2><p>网络钓鱼很猖獗，这使得它很危险。模拟网站与真实网站普通人无法区分，黑客们正在寻找方法来克服日益复杂的垃圾邮件过滤。除了电子邮件和网站钓鱼之外，还有“vishing”（语音网络钓鱼），“smishing”（短信网络钓鱼）和网络犯罪分子不断提出的其他几种网络钓鱼技术。 下面我们来看看常见的网络钓鱼攻击类型。</p>
<h3 id="1、鱼叉式网络钓鱼攻击"><a href="#1、鱼叉式网络钓鱼攻击" class="headerlink" title="1、鱼叉式网络钓鱼攻击"></a>1、鱼叉式网络钓鱼攻击</h3><p>这是一种个人触摸的大量网络钓鱼。发件人将使用可用信息看似合法。此类别中最常见的伪装是银行，攻击可以发送您的姓名，地址等。</p>
<p>它针对特定的个人或公司，通常是用来收集的受害者特定信息，以更成功地将该信息表示为真实信息。鱼叉式网络钓鱼电子邮件可能包括对受害者组织的同事或管理人员的引用，以及受害者姓名，地点或其他个人信息的使用。</p>
<p><img src="https://inews.gtimg.com/newsapp_bt/0/10449960979/1000"></p>
<h3 id="2、捕鲸攻击（行政网络钓鱼）"><a href="#2、捕鲸攻击（行政网络钓鱼）" class="headerlink" title="2、捕鲸攻击（行政网络钓鱼）"></a>2、捕鲸攻击（行政网络钓鱼）</h3><p>这是一种专门针对组织内的高级管理人员的钓鱼攻击，通常是为了窃取大笔资金。</p>
<p>典型的捕鲸攻击针对的是能够授权付款的员工，网络钓鱼消息似乎是来自管理人员的命令，用于向供应商授予大额付款，而实际上是向攻击者付款。</p>
<h3 id="3、克隆网络钓鱼"><a href="#3、克隆网络钓鱼" class="headerlink" title="3、克隆网络钓鱼"></a>3、克隆网络钓鱼</h3><p>它会收集先前已发送的电子邮件并复制其内容，将任何合法链接替换为恶意链接。然后使用欺骗帐户将电子邮件发送给原始电子邮件的收件人。基本上，攻击者克隆了合法的电子邮件。</p>
<p>大多数克隆网络钓鱼的目标是感染目标计算机上的病毒，恶意软件传播到分支机器网络。随着链接的消失，更多用户被感染，然后发送更多受感染的链接。</p>
<h3 id="4、域欺骗"><a href="#4、域欺骗" class="headerlink" title="4、域欺骗"></a>4、域欺骗</h3><p>它是一种新的网络钓鱼形式，依赖于DNS缓存污染，将用户从合法站点重定向到欺诈站点，并欺骗用户使用他们的登录凭据尝试登录欺诈站点。</p>
<h3 id="5、语音网络钓鱼"><a href="#5、语音网络钓鱼" class="headerlink" title="5、语音网络钓鱼"></a>5、语音网络钓鱼</h3><p>它也称为vishing，是一种通过语音通信媒体发生的网络钓鱼形式，包括IP语音（VoIP）或POTS（普通老式电话服务）。犯罪者会使用语音合成软件留下声称通知受害者银行或信用账户中的可疑活动的语音邮件，并请求受害者回复恶意电话号码以验证他的身份 - 从而危及受害者的账户凭证。</p>
<h3 id="6、短信网络钓鱼"><a href="#6、短信网络钓鱼" class="headerlink" title="6、短信网络钓鱼"></a>6、短信网络钓鱼</h3><p>它也称为SMishing或SMShing，犯罪者会使用短信来说服受害者披露帐户凭据或安装恶意软件。</p>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://www.php.cn/windows-414137.html">https://www.php.cn/windows-414137.html</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>网络战</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>欧盟将成立联合网络部门</title>
    <url>//post/%E6%AC%A7%E7%9B%9F%E5%B0%86%E6%88%90%E7%AB%8B%E8%81%94%E5%90%88%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%B7%A5%E4%BD%9C%E7%BB%84.html</url>
    <content><![CDATA[<h1 id="欧盟将成立联合网络部门"><a href="#欧盟将成立联合网络部门" class="headerlink" title="欧盟将成立联合网络部门"></a>欧盟将成立联合网络部门</h1><p>2021年6月23日，欧盟委员会已宣布计划建立一个联合网络部门(Joint Cyber Unit)，以应对大规模的网络攻击。</p>
<p><img src="https://th.bing.com/th/id/R140d41d13c7defe4ab06784a6c675230?rik=we3K7vZ/LEn+AA&pid=ImgRaw"></p>
<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>这不是欧盟委员会第一次提出在整个欧洲建立一个协调的网络部门的想法。此前欧盟也试图建立这样一个组织，但收效甚微。欧盟成员国认为他们自己可以完全掌控自己的安全问题，导致很难说服他们与其他国家合作。</p>
<p>然而，随着电子设备互联数量的增加、5G 网络的广泛安装以及利用 COVID-19 大流行造成的混乱而实施的网络攻击，给欧盟带来了新的挑战。尤其是过去几年席卷该地区的网络攻击，特别是在医疗保健领域，促使欧盟国家寻求其他方式来打击网络犯罪。</p>
<p>欧盟面临的压力越来越大，需要采取措施应对这些网络攻击。</p>
<h2 id="导火索"><a href="#导火索" class="headerlink" title="导火索"></a>导火索</h2><p>网络攻击是一种国家安全威胁，欧洲的网络安全事件从 2019 年的 432 起增加到 2020 年的 756 起。</p>
<p>4 月，包括欧盟委员会在内的一系列欧盟机构遭到重大网络攻击。尤其是最近针对爱尔兰和美国关键服务的勒索软件事件“引起了人们的关注”。</p>
<p>今年五月爱尔兰的 Health Service Executive (HSE) 遭到名为 Conti 的勒索软件组织的攻击，该组织扰乱了 IT 系统，对许多医院造成了重大破坏。</p>
<p>同样是五月，美国燃料供应遭到黑客攻击。一个名为 Darkside 的网络犯罪团伙迫使美国燃料供应商Colonial Pipeline 离线近一周，导致恐慌性购买和燃料短缺。</p>
<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.ngeiTMQCTZaWVNaCWDNhoQHaE8?pid=ImgDet&rs=1"></p>
<p>勒索软件黑客使用恶意软件来扰乱和窃取组织的计算机数据 - 向受害者收取费用以将服务恢复正常。勒索软件攻击已造成超过 3.5 亿美元的损失。</p>
<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.4hKr-zd_OP96oSeLBNek0AHaFP?pid=ImgDet&w=1600&h=1131&rs=1"></p>
<p>美国政府最近还成立了勒索软件工作组，而英国国家网络安全中心警告说，勒索软件是英国最大的网络威胁。</p>
<p>再此背景下，提出了建立联合网络部门，来应对这些网络事件。</p>
<h2 id="部门简介"><a href="#部门简介" class="headerlink" title="部门简介"></a>部门简介</h2><p>欧盟委员会已宣布计划建立一个联合网络部门。委员会声明称，联合网络部门“旨在汇集欧盟（EU）及其成员国可用的资源和专业知识，以有效预防、阻止和应对大规模网络事件和危机”。</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>该部门计划为“网络犯罪警察、网络机构、外交官、军事服务和网络安全公司协调响应和共享资源“提供一个对抗网络攻击的虚拟和物理平台，以便与成员国合作并通过安全渠道共享资源。最终，联合网络部门将实现成员国和欧盟机构之间的互助协议以及国家和跨境监测和检测。</p>
<h3 id="职能"><a href="#职能" class="headerlink" title="职能"></a>职能</h3><p>该部门职能包括：协调成员国和欧盟机构之间对严重网络事件的响应；提供一个协作平台，让受网络攻击困扰的欧盟成员国能够获得其他成员国的帮助，抵御网络攻击；在发生严重攻击时，一个由多国网络专家组成的专门团队将迅速部署到欧洲国家；</p>
<h3 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h3><p>欧盟计划中的联合网络单位，位于欧盟网络安全局 (ENISA) 和欧盟机构、机构和机构的计算机应急响应小组 (CERT-EU) 布鲁塞尔新办事处旁边。</p>
<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>明年 6 月投入使用，并在一年后，即 2023 年 6 月 30 日之前完全建立。</p>
<h3 id="资金来源"><a href="#资金来源" class="headerlink" title="资金来源"></a>资金来源</h3><p>根据该机构的声明，设立该部门的投资将来自欧盟委员会数字欧洲计划(European Commission Digital Europe Programme)。 投资将包括“构建物理和虚拟平台，建立和维护安全的通信渠道，以及提高检测能力。”</p>
<p>用于发展成员国网络防御能力等更长期任务的资源将来自欧洲国防基金(European Defence Fund)。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>勒索软件和基础设施安全</li>
</ul>
<p>​        近年来，大规模网络事件被报道的越来越多，其中针对关键基础设施的攻击尤为引人注意，如输油管道、卫生服务、供水系统等。尤其是勒索软件低成本、高收益、难解决的特点，使得勒索软件横行。勒索软件盯上基础设施的原因是：与物理世界息息相关，一旦中招，就不得不支付赎金。</p>
<ul>
<li>协作防御</li>
</ul>
<p>​        欧盟在网络攻击的响应中采取的是协作平台的方式，这也许是未来网络安全防御的趋势。在当今网络空间中，面对大规模网络攻击，合作共赢是一个趋势。随着技术的进步，在网络攻击中谁也不能全身而退，唯有合作，才能将损失减到最小。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://abcnews.go.com/International/irelands-health-service-hit-significant-ransomware-attack/story?id=77685241">https://abcnews.go.com/International/irelands-health-service-hit-significant-ransomware-attack/story?id=77685241</a></p>
<p><a href="https://balkaninsight.com/2021/06/23/eu-sets-up-joint-cyber-unit-to-tackle-steep-rise-in-cyber-attacks/">https://balkaninsight.com/2021/06/23/eu-sets-up-joint-cyber-unit-to-tackle-steep-rise-in-cyber-attacks/</a></p>
<p><a href="https://igca.org/2021/06/23/eu-to-launch-cybersecurity-joint-task-force/">https://igca.org/2021/06/23/eu-to-launch-cybersecurity-joint-task-force/</a></p>
<p><a href="https://www.siliconrepublic.com/enterprise/joint-cyber-unit-eu-cyberattacks">https://www.siliconrepublic.com/enterprise/joint-cyber-unit-eu-cyberattacks</a></p>
<p><a href="https://www.thedefensepost.com/2021/06/23/eu-joint-cyber-unit/">https://www.thedefensepost.com/2021/06/23/eu-joint-cyber-unit/</a></p>
<p><a href="https://news.yahoo.com/eu-wants-emergency-team-nightmare-123014135.html?guccounter=1&amp;guce_referrer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8&amp;guce_referrer_sig=AQAAAG2x8KqN3MAlhHZKrQqweB3N_umneTJv2XRD9ToL2zQWF4Nx7CDTTXjNXZHD2PDsdYEdplyyY3cg5P00EInHKrEjTulc1Y3OIkS2J1qp1WbWATAli91CdA4WR-SLe7u9n8F9UJdE8DRlOwdp1tEBmSk15xfgPCqSXIpttYN6Tn3q">https://news.yahoo.com/eu-wants-emergency-team-nightmare-123014135.html?guccounter=1&amp;guce_referrer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8&amp;guce_referrer_sig=AQAAAG2x8KqN3MAlhHZKrQqweB3N_umneTJv2XRD9ToL2zQWF4Nx7CDTTXjNXZHD2PDsdYEdplyyY3cg5P00EInHKrEjTulc1Y3OIkS2J1qp1WbWATAli91CdA4WR-SLe7u9n8F9UJdE8DRlOwdp1tEBmSk15xfgPCqSXIpttYN6Tn3q</a></p>
]]></content>
  </entry>
  <entry>
    <title>犯罪分子进入一个网络需要多少钱？可能是7200美元</title>
    <url>//post/%E7%8A%AF%E7%BD%AA%E5%88%86%E5%AD%90%E8%BF%9B%E5%85%A5%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E9%9C%80%E8%A6%81%E5%A4%9A%E5%B0%91%E9%92%B1%EF%BC%9F%E5%8F%AF%E8%83%BD%E6%98%AF7200%E7%BE%8E%E5%85%83.html</url>
    <content><![CDATA[<h1 id="犯罪分子进入一个网络需要多少钱？可能是7200美元"><a href="#犯罪分子进入一个网络需要多少钱？可能是7200美元" class="headerlink" title="犯罪分子进入一个网络需要多少钱？可能是7200美元"></a>犯罪分子进入一个网络需要多少钱？可能是7200美元</h1><p><img src="https://cybernews.com/wp-content/uploads/2021/07/hacker-2-750x375.jpg" alt="Average cost to break into a network – $7,200"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Verizon数据泄露调查报告（DBIR）显示，勒索软件是泄露事件当中的第三大热门行动。”报告的作者Phil Langlois在一次网络研讨会上说：”这很令人吃惊。平均而言，网络犯罪分子进入一个网络要花费7200美元。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Verizon分析了来自全球88个国家的样本，近8万起事件，其中5,300起是确认的泄露事件。研究强调，事件和漏洞之间是有区别的。事件是指损害信息资产的完整性、保密性或可用性的安全事件，而漏洞是一个导致数据被确认披露给未授权方的事件。</p>
<h2 id="三种最常见的入侵类型"><a href="#三种最常见的入侵类型" class="headerlink" title="三种最常见的入侵类型"></a>三种最常见的入侵类型</h2><p>研究人员将他们观察到的事件和漏洞归纳为八个核心模式，代表了绝大多数的事件。当我们谈论漏洞时，社会工程、基本网络应用程序攻击和系统入侵是最流行的模式。Phil Langlois简要地介绍了这三种模式。</p>
<p><strong>社会工程。</strong>研究人员发现，他们分析的大约85%的漏洞涉及人为因素。”有人点击了一个链接，错误地配置了一个防火墙，或类似的东西，”Langlois说明道。研究人员还看到网络钓鱼有了相对显著的增长。以前，它占数据泄露的1&#x2F;4，而现在它徘徊在36%左右。</p>
<p><strong>基本的网络应用程序攻击</strong>是那些在最初的网络应用程序被破坏后有少量的步骤或额外的行动。它们非常专注于直接攻击目标，从获取电子邮件和网络应用程序数据，到重新利用网络应用程序进行恶意软件分发、污损或未来的DDoS攻击。Langlois说：”我们谈论的是单步攻击，在这种攻击中，对手利用的往往是受损的凭证、弱口令，有时还有漏洞，”。他称其为互联网噪音（internet noise）：不断看到凭证被使用和暴力攻击的尝试。</p>
<p><strong>系统入侵</strong>涉及一个高级攻击者。这种模式代表了一个专门的攻击者使用黑客和恶意软件技术的组合来实现其目标。系统入侵的三个主要组成部分是勒索软件、一般的高级威胁，以及magecart攻击，即攻击者在应用程序中注入恶意的javascript以窃取信用卡信息。例如，电子商务安全供应商Sansec报告说，Lazarus集团一直在使用Magecart支付卡盗刷来攻击美国和欧盟的电子零售商。</p>
<p>Langlois强调说，赎金软件在增长，现在占他们分析的泄露事件的10%。他说：”这是一个相当戏剧性的上升”。</p>
<h2 id="犯罪分子接入一个网络需要多少钱？"><a href="#犯罪分子接入一个网络需要多少钱？" class="headerlink" title="犯罪分子接入一个网络需要多少钱？"></a>犯罪分子接入一个网络需要多少钱？</h2><p>初始访问代理（Initial access brokers ）催生了勒索软件。犯罪分子在暗网购买数据或出售数据和访问权限。最主要的目标行业是零售、金融服务、工业品、医疗保健和技术部门。</p>
<p>研究人员正在研究各种非法市场。自2020年以来，他们已经看到了500个不同的网络访问权限的销售清单。这意味着，如果你有一个不安全的网络，可能会被出售。</p>
<p>根据数字风险保护公司Digital Shadows的数据，平均而言，网络犯罪分子进入一个网络要花费7200美元。</p>
<p>远程桌面协议（RDP）访问是列出的最常见的访问类型，平均价格为9,874美元。</p>
]]></content>
  </entry>
  <entry>
    <title>由SolarWinds提供的Serv-U管理的文件传输服务中的一个RCE漏洞被人利用</title>
    <url>//post/%E7%94%B1SolarWinds%E6%8F%90%E4%BE%9B%E7%9A%84Serv-U%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AARCE%E6%BC%8F%E6%B4%9E%E8%A2%AB%E4%BA%BA%E5%88%A9%E7%94%A8.html</url>
    <content><![CDATA[<h1 id="由SolarWinds提供的Serv-U管理的文件传输服务中的一个RCE漏洞被人利用"><a href="#由SolarWinds提供的Serv-U管理的文件传输服务中的一个RCE漏洞被人利用" class="headerlink" title="由SolarWinds提供的Serv-U管理的文件传输服务中的一个RCE漏洞被人利用"></a>由SolarWinds提供的Serv-U管理的文件传输服务中的一个RCE漏洞被人利用</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/08ab_shutterstock_1092298922.jpg" alt="SolarWinds Zero-Day Vulnerability Under Active Attack"></p>
<p>由SolarWinds提供的Serv-U管理的文件传输服务中的一个RCE漏洞被人利用。SolarWinds公司早些时候通过供应链攻击成为目标，该公司已发布补丁以修复该漏洞。</p>
<h2 id="发生了什么？"><a href="#发生了什么？" class="headerlink" title="发生了什么？"></a>发生了什么？</h2><p>微软已经提出了有限的和目标客户受到被追踪为CVE-2021-35211的零日漏洞影响的证据。然而，SolarWinds 並沒有准确估计有多少客戶可能受到该漏洞的影响。<br>该漏洞影响到Serv-U 15.2.3 HF1及之前的版本。成功利用该漏洞后，攻击者可在受感染的系统上运行任意代码。<br>此外，该漏洞使攻击者能够安装恶意程序并查看、更改或删除重要数据。然而，该漏洞在Serv-U 15.2.3版热修复（HF）2中得到解决。<br>该公司要求管理员注意任何通过SSH从IP地址98[.]176[.]196[.]89和68[.]235[.]178[.]32或208[.]113[.]35[.]58通过TCP 443的潜在可疑连接。<br>SolarWinds在其最近的公告中表示，发现的零日与SUNBURST供应链攻击没有任何关系。此外，它不影响任何其他产品，特别是Orion平台。</p>
<h2 id="最近的供应链攻击"><a href="#最近的供应链攻击" class="headerlink" title="最近的供应链攻击"></a>最近的供应链攻击</h2><p>有几起事件被曝光，其中有供应链攻击。<br>最近，卡西亚在一次供应链攻击中被REvil勒索软件盯上，目标是其虚拟系统管理员解决方案中的关键安全漏洞（CVE-2021-30116&#x2F;19&#x2F;20）。<br>6月，对航空业的一次巨大的供应链攻击与中国国家行为者APT41有关。<br>5月，加拿大邮政遭遇数据泄露事件，影响到其95万名客户。该安全漏洞是由于基于恶意软件的供应链攻击而发生的。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最近的供应链攻击突出了现代网络和供应链的脆弱性。攻击者越来越多地发现广泛使用的软件链中的漏洞，以部署恶意软件。因此，建议企业遵循安全机构提供的建议，并定期审查其网络安全态势。</p>
]]></content>
  </entry>
  <entry>
    <title>网络战武器——震网(Stuxnet)病毒</title>
    <url>//post/%E7%BD%91%E7%BB%9C%E6%88%98%E6%AD%A6%E5%99%A8%E2%80%94%E2%80%94%E9%9C%87%E7%BD%91(Stuxnet)%E7%97%85%E6%AF%92.html</url>
    <content><![CDATA[<h1 id="网络战武器——震网-Stuxnet-病毒"><a href="#网络战武器——震网-Stuxnet-病毒" class="headerlink" title="网络战武器——震网(Stuxnet)病毒"></a>网络战武器——震网(Stuxnet)病毒</h1><h2 id="震网事件"><a href="#震网事件" class="headerlink" title="震网事件"></a>震网事件</h2><p> 2010 年 6 月 17 日，白俄罗斯一家小 公司 VirusBlockAda 的安全研究人员 发现一种能感染可移动存储设备的恶意软 件。2010年7月，“震网”（Stuxnet）蠕虫攻击事件浮出水面，引发了国际主流安全厂商和安全研究者的全面关注，卡巴斯基、赛门铁克、安天等安全厂商，Ralph Langne等著名安全研究者，以及多国的应急组织和研究机构，都投入到了全面的分析接力中。2010 年 11 月，伊朗总统艾哈迈迪内贾 德公开承认，一种计算机病毒对“我国（核） 离心机中为数不多的几台机制造了一些问 题，”</p>
<p>最终使这场攻击的大量细节被呈现出来：这是一起经过长期规划准备和入侵潜伏作业；借助高度复杂的恶意代码和多个零日漏洞作为攻击武器；以铀离心机为攻击目标；以造成超压导致离心机批量损坏和改变离心机转数导致铀无法满足武器要求为致效机理，以阻断伊朗核武器进程为目的的攻击。</p>
<h3 id="事件时间轴"><a href="#事件时间轴" class="headerlink" title="事件时间轴"></a>事件时间轴</h3><p>下图取自安天实验室关于震网的报告：</p>
<p><img src="https://www.antiy.cn/images/20190930/1-1.jpg"></p>
<h2 id="震网病毒"><a href="#震网病毒" class="headerlink" title="震网病毒"></a>震网病毒</h2><p>Stuxnet 是一种计算机蠕虫，大约写于 2005 年到 2010 年之间。主要针对西门子型号为S7-315 和 S7-417 的工控机。其中对于315在攻击发生时，就让他宕机，对于417就使用类似中间人攻击的方式，对工控系统进行欺骗。具体可参考[3].</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>工作原理如下图所示，蠕虫的基本操作。</p>
<p><img src="https://static.oschina.net/uploads/space/2018/0520/075415_tRMq_2720166.jpg"></p>
<h2 id="震网影响"><a href="#震网影响" class="headerlink" title="震网影响"></a>震网影响</h2><h3 id="Stuxnet-是网空武器针对工业设备的首件案例。"><a href="#Stuxnet-是网空武器针对工业设备的首件案例。" class="headerlink" title="Stuxnet 是网空武器针对工业设备的首件案例。"></a>Stuxnet 是网空武器针对工业设备的首件案例。</h3><p>Stuxnet 成功地 影响了一个非虚拟实体。这是武器研制的一 项重大进展——在计算机打开后才存在的一 个 软 件 能 成 功 地 对 真 实 世 界 造 成 破 坏。 Stuxnet 清楚地展示，网空武器在军事行动中 能发挥重要作用。</p>
<h3 id="Stuxnet-所引发的军事革命-的最后一个方面是，它证明一些安全假设是-站不住脚的。"><a href="#Stuxnet-所引发的军事革命-的最后一个方面是，它证明一些安全假设是-站不住脚的。" class="headerlink" title="Stuxnet 所引发的军事革命 的最后一个方面是，它证明一些安全假设是 站不住脚的。"></a>Stuxnet 所引发的军事革命 的最后一个方面是，它证明一些安全假设是 站不住脚的。</h3><h4 id="常见的第一个假设是，物理隔-离的系统更安全。"><a href="#常见的第一个假设是，物理隔-离的系统更安全。" class="headerlink" title="常见的第一个假设是，物理隔 离的系统更安全。"></a>常见的第一个假设是，物理隔 离的系统更安全。</h4><p>按照定义，SCADA 系统控 制对使命具有关键意义的设备，很多管理人 员不把这些计算机同外部网络相连，以物理 隔离的方式来保证安全，结果是采用可移动 媒介把文件传至计算机。Stuxnet 的设计者利 用了这一假设，使病毒通过 U 盘等可移动存 储设备来传播。一旦 U 盘被感染，病毒软件 本身就在后来使用被感染驱动器的计算机上 运行 ；使用者只要在视窗上点击相关图形， 便开始被感染。这是 Stuxnet 利用其中一个 零日漏洞的直接应用。</p>
<h4 id="被-Stuxnet-证明是错误的另外一个关键-安全假设，是数字签名证书设立的信任关系。"><a href="#被-Stuxnet-证明是错误的另外一个关键-安全假设，是数字签名证书设立的信任关系。" class="headerlink" title="被 Stuxnet 证明是错误的另外一个关键 安全假设，是数字签名证书设立的信任关系。"></a>被 Stuxnet 证明是错误的另外一个关键 安全假设，是数字签名证书设立的信任关系。</h4><p>为了提供更大的稳定性，当代操作系统，包 括微软视窗，限制计算机的程序访问系统部 件。一个正常的程序要求系统经由驱动软件 呼叫硬件。鉴于这种情况，驱动软件比其他 程序具更高权限访问低层级系统部件。为了 避免轻易产生恶意驱动软件，微软视窗依赖 数字签名证书识别。Stuxnet 为了防止被杀毒 软件发现，使用了合法的数字签名证书。这 是此前没有发现的 Stuxnet 的另外一个方 面。早期的 Stuxnet 版本使用瑞昱（Realtek） 半导体系统公司提供的证书，后来的版本使 用智微（JMicron）科技公司的证书。使用这 些证书使病毒在微软视窗面前呈现合法软件 的假象。ESET 的安全专家注意到，两家公司 都在台湾地区，因此怀疑这些证书系被盗窃。 此外，他们相信，这极可能是实物盗窃（甚 至可能是内贼所为），因为在互联网的黑市上 驱动软件的数字证书并不常见。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol>
<li><strong>网络空间作为一个新的虚拟空间，网络作战的参与方的能量不能以现实实体的大小来标定。</strong></li>
</ol>
<p>最近的事件表面，即使是个人，也能够宣告对公司、企业发动勒索；即使是组织，也能在网络空间中，对某国发动攻击。那么，网络空间的国家意志如何体现呢？在美国，或许就是网络空间作战司令部吧。</p>
<ol start="2">
<li><strong>网络空间已经渗透入生活的方方面面，发动网络攻击对现实社会的影响巨大。</strong></li>
</ol>
<p>前段时间，美国东部输油管道被勒索，导致供应紧张，这件事情前后还报道了有相关的对物理基础设施的攻击事件，足以见到网络武器的威力。一枪一炮或许威力有限，但是对信息社会来说，信息类攻击的损失无可估量，每天都上演的DDoS分布式拒绝服务攻击造成了极大的经济损失。</p>
<ol start="3">
<li><strong>与自然空间相比，人造空间还是有差距啊。</strong></li>
</ol>
<p>在网络空间中，规则是协议，落地是代码，协议和代码都是人设计和实现的，所以难免有漏洞，只要还有人的参与，漏洞就依旧会存在。自然空间就不一样了，规律就是规律(谁设计的呢？)，例如热力学第一定律（解释了为什么没有永动机），熵增定律（解释了人为啥会内卷）</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p> 闲扯一句：这就是为什么唯物辩证法说，一定要掌握事物运行的规律，运动和静止都是相对的等等</p>
<p>马克思诚不欺我也</p></blockquote>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]震网事件的九年再复盘与思考，<a href="https://www.antiy.cn/research/notice&amp;report/research_report/20190930.html">https://www.antiy.cn/research/notice&amp;report/research_report/20190930.html</a></p>
<p>[2]震网——掀起网空战争军事革命， <a href="http://www.knowfar.org.cn/publication/uploadfiles/0204/0129/4.1.pdf">http://www.knowfar.org.cn/publication/uploadfiles/0204/0129/4.1.pdf</a></p>
<p>[3]  Stuxnet: Dissecting a Cyberwarfare Weapon, <a href="https://courses.cs.duke.edu/spring20/compsci342/netid/readings/stuxnet-dissect.pdf">https://courses.cs.duke.edu/spring20/compsci342/netid/readings/stuxnet-dissect.pdf</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
        <category>网络战</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>网络武器的兴起及其对网络空间的相对影响(译)</title>
    <url>//post/%E7%BD%91%E7%BB%9C%E6%AD%A6%E5%99%A8%E7%9A%84%E5%85%B4%E8%B5%B7%E5%8F%8A%E5%85%B6%E5%AF%B9%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E7%9A%84%E7%9B%B8%E5%AF%B9%E5%BD%B1%E5%93%8D.html</url>
    <content><![CDATA[<h1 id="网络武器的兴起及其对网络空间的相对影响-译"><a href="#网络武器的兴起及其对网络空间的相对影响-译" class="headerlink" title="网络武器的兴起及其对网络空间的相对影响(译)"></a>网络武器的兴起及其对网络空间的相对影响(译)</h1><p>曾几何时，我们生活在这样一个世界，在这个世界中，战争由勇敢的士兵面对面的进行交锋，而今天战争的形态发生了深刻的变化。网络空间的发展，使得战争的形态发生了巨大的变化，处于各种目的的网络攻击行为在网络空间中此起彼伏。网络武器，作为一种新的武器形态，在网络空间作战中展现了惊人的力量，flame、Stuxnet、Duqu等网络武器更是将网络作战带到了一个更高的高度。随着网络空间的快速发展，网络武器还将会对网络空间带来什么样的变化呢？</p>
<h2 id="网络战争"><a href="#网络战争" class="headerlink" title="网络战争"></a>网络战争</h2><p>美国政府安全专家理查德·A·克拉克在其著作《网络战争》（2010 年 5 月）中将“网络战争”定义为“<em>一个民族国家为了造成损害或中断而侵入另一个国家的计算机或网络的行为</em>”。</p>
<p><img src="https://mk0resourcesinf5fwsf.kinstacdn.com/wp-content/uploads/100512_1551_TheRiseofCy1.jpg" alt="img"><br>专家提供的定义强调了将网络战争行为与其他网络行动区分开来的两个基本因素：民族国家的承诺和可能以造成破坏或监视敌人网络为目的的进攻意图。</p>
<p>网络空间被主要政府认为是空间、陆地、海洋和空中等第五个战争领域，因此，主要国家正在大规模投资开发新的网络能力来保护它。</p>
<p>这是美国政府在网络空间的立场。美国国防部副部长威廉·J·林恩 (William J. Lynn) 表示“作为一个理论问题，五角大楼已正式承认网络空间是战争中的一个新领域。. . [这] 已变得与陆地、海洋、空中和太空一样对军事行动至关重要。”美国政府的这一声明公开承认了与网络空间驻军相关的重要性以及用于开发新一代技术和工具以在这个充满陷阱的额外领域保护国家的努力的重要性。</p>
<p>军事部门加强了对通过网络空间传播的威胁可能对公民安全和政府稳定构成严重威胁的认识。然而，这种考虑也适用于其他场景，包括将网络空间中的军事行动用于进攻目的，与常规攻击相比，这些行动具有许多优势。</p>
<p>与导致常规攻击的方式不同，网络攻击可以在和平时期以无声的方式进行，这导致必须考虑需要高度警惕的极其阴险的威胁。</p>
<p>世界各地的政府都关注其数字基础设施的安全级别，并正在推动建立熟练的网络单位以支持新领域的行动。奥巴马总统在 2009 年的立场宣布美国的数字基础设施是“国家战略资产”，仅仅一年后，政府创建了一个新的美国网络司令部 (USCYBERCOM)，其主要任务是保卫美国军事网络并全面实施频谱军事网络空间行动，以便在所有领域采取行动。</p>
<p>美国并不是唯一一个投资网络战能力的国家。中国和俄罗斯的运作方式完全相同，朝鲜和伊朗等其他国家也在提高他们在网络空间的存在感。</p>
<p>官方消息称，至少有140个国家正在开发网络武器，网络战行动的数量急剧增加。据估计，由于外国的进攻，全世界每天都会对政府系统进行数千次攻击……其中有多少会成功？</p>
<p>每场战争都使用适当的武器进行，在网络战中，我们假设使用网络武器、工具和软件来冒犯网络空间中的敌人具有相关重要性。但是，尽管“网络武器”一词的使用率很高，但今天还没有正式的法律定义。例如，让我们考虑国防部的军事和相关术语词典，由 550 页的国防部定义组成，不包含网络武器的具体定义，国际法也没有以详尽的方式定义什么是用于网络武器。</p>
<p>缺乏全球公认的网络武器定义的影响是严重的。缺乏定义使得无法区分网络武器及其正确使用方式，无法评估攻击者的法律和政治责任以及网络战背景下造成的真实威胁水平。</p>
<h2 id="为什么使用网络武器是政府行之有效的选择？"><a href="#为什么使用网络武器是政府行之有效的选择？" class="headerlink" title="为什么使用网络武器是政府行之有效的选择？"></a>为什么使用网络武器是政府行之有效的选择？</h2><p>成功的主要因素是这些类型技术的效率和降低的成本。Stuxnet 病毒是网络武器的真正第一个例子，它证明了类似工具可能对关键基础设施产生的影响。</p>
<p>网络武器的使用有点吵。这些代理因被利用的漏洞的性质而被压制，这为攻击者提供了真正的优势。事实上，攻击者可以及时采取行动，避免泄露攻击的真正来源。在覆盖范围内运作的可能性代表着逃避国际社会的制裁，因为该罪行的匿名性质允许规避国际社会对军事进攻的批准。</p>
<p>从军事角度来看，网络武器的准备阶段很容易被窥探。让我们考虑一下，通过情报研究更容易发现常规武器（例如导弹、无人机、战斗机）的构造。网络武器的发展很难确定。</p>
<p>网络武器的使用是对常规军事打击的补充。有可能：</p>
<ul>
<li>支持摧毁敌方防御基础设施的进攻行动。</li>
<li>通过评估代理感染敌方系统的能力来探索敌方的技术能力。</li>
</ul>
<p>这些优势使网络战对那些尽管军事开支资金减少但能够在新领域与最重要国家竞争的“小”国非常有吸引力。</p>
<h2 id="网络武器的目标是什么？"><a href="#网络武器的目标是什么？" class="headerlink" title="网络武器的目标是什么？"></a>网络武器的目标是什么？</h2><p>频谱非常广泛。一般来说，网络武器可以打击一个国家的每一个关键基础设施和重要系统，例如：</p>
<ul>
<li>工业控制系统尤其值得关注的是那些监督工厂运行的组件，用于能源生产和提供各种服务，例如供水设施。</li>
<li>电力供应网。</li>
<li>领土控制系统。</li>
<li>医院和政府控制。</li>
<li>通信网络。</li>
<li>防御系统。</li>
<li>军用空中交通和空域控制系统。</li>
<li>金融和银行系统。</li>
</ul>
<p>在最近的一次采访中，卡巴斯基安全公司首席执行官尤金卡巴斯基就网络空间主题宣布：</p>
<p>“网络领域就像现实世界一样，在现实世界中，我们有条约和监督机构来监督遵守情况。它适用于核武器、生物和化学武器，那么为什么不使用网络呢？”</p>
<p>该声明是详尽无遗的，并强调了成立国际网络监管委员会的必要性，但首先有必要为网络武器的概念提供一个有效的定义，并且从法律的角度这样做是必要的，以确定其目的使用，使用它的上下文，冒犯的主体&#x2F;客体，当然还有攻击的目标。</p>
<p>网络战专家意大利律师 Stefano Mele 在他的出版物“网络武器——法律和战略方面”中提供了一个非常有趣的网络武器定义：</p>
<p><code>“网络武器是[一种]器具、设备或任何计算机指令集，旨在非法破坏具有关键基础设施性质的计算机或电信系统、其中包含的或与之相关的信息、数据或程序，或促进其运营的全部或部分中断或变更。”</code></p>
<p>安全专家常用的网络武器的另一个有效定义如下：</p>
<p><code>“旨在通过网络空间冒犯他人的设备、设备或任何计算机指令集。”</code></p>
<p>这两个定义都是完整且具有法律效力的，并且证明网络武器是由国家资助的，并且有能力对关键基础设施造成巨大破坏并造成人员伤亡。</p>
<p>一旦我们定义了一种网络武器，就可以将其专门设计用于冒犯的情况与那些最初为其他功能设计的工具的不当使用可能用于攻击目的的情况区分开来。</p>
<p>也可以将其与网络战行动中使用的其他工具（例如网络间谍工具）区分开来。</p>
<p>最具争议的问题之一是是否有可能将“网络武器”定义为一种网络间谍工具，它呈现出一种模块化结构，使恶意软件的使用成为可能。根据定义，由于没有对人造成伤害或没有对关键基础设施造成严重破坏的责任，因此它不被视为网络武器，但许多专家提出了合理的反对意见。这些工具包还可用于通过简单地加载为示波器开发的适当模块来对特定目标进行攻击。</p>
<p>举个例子，让我们考虑一下恶意软件 Duqu：它有一个国家支持的起源，但孤立的实例主要揭示了网络间谍的目的。尽管如此，安全公司已经认识到它是使用创建 Stuxnet 的相同平台开发的，即“Tilded 平台”。该恶意软件创建了已知具有模块化结构的创新平台，可以指定其行为。这意味着配备适当组件的 Duqu 也可用于进攻目的。</p>
<h2 id="案例研究——震网"><a href="#案例研究——震网" class="headerlink" title="案例研究——震网"></a>案例研究——震网</h2><p>为了了解网络武器的效率，可以分析与其传播相关的数字。该主题的一个有趣来源是赛门铁克档案“Symantec W32.Stuxnet Dossier Version 1.4（2011 年 2 月）”，其中提供了有关感染的有用统计数据和信息。Stuxnet 被许多专家认为是历史上第一个网络武器。事实上，国家支持的攻击第一次袭击了外国的关键基础设施，其具体意图是摧毁它们。</p>
<p>Stuxnet 是一种于 2009 年检测到的恶意软件，它感染了部署在伊朗关键基础设施（如天然气管道或发电厂）中的特定工业控制系统。Stuxnet 的最终目标是通过重新编程可编程逻辑控制器 (PLC) 来破坏这些设施，使其按照攻击者的意图运行，很可能超出其指定的边界。该代理已开发用于摧毁伊朗的核计划。</p>
<p>Stuxnet 是一个大型、复杂的恶意软件，具有许多不同的组件和功能，包括零日漏洞利用、Windows rootkit、有史以来第一个 PLC rootkit、防病毒规避技术、复杂的进程注入和挂钩代码、网络感染例程、点对点对等更新，以及命令和控制界面。与感染地理分布相关的图表为我们提供了两条重要信息：</p>
<p><img src="https://mk0resourcesinf5fwsf.kinstacdn.com/wp-content/uploads/100512_1551_TheRiseofCy2.png" alt="img"></p>
<p>各种传播技术的使用意味着 Stuxnet 已经超出了最初的目标。正如直方图所示，伊朗并不是恶意软件唯一针对的国家。进一步的感染被认为是由于使用混杂的初始传播方法造成的无意“附带损害”。作者是否能够控制代理的传播？根据许多军方官员的声明，不可能确定恶意软件只会感染目标。</p>
<p>该代理主要攻击伊朗，伊朗报告了大约 60% 的受感染主机。该国的感染集中度可能表明这是最初的目标，也是最初感染的地方。</p>
<p>下图报告了受感染 PC 对不同 Stuxnet 变体的影响。事实上，各种实例因传播方法和组成它们的模块而异。代理及时变异；这是网络武器的另一个特点，可以改变其行为，改变其中一个模块的结构。只需加载新的有效负载，就可以使恶意软件更具攻击性。</p>
<p><img src="https://mk0resourcesinf5fwsf.kinstacdn.com/wp-content/uploads/100512_1551_TheRiseofCy3.png" alt="img"></p>
<h2 id="对网络空间的影响"><a href="#对网络空间的影响" class="headerlink" title="对网络空间的影响"></a>对网络空间的影响</h2><p>恶意代理在网络空间中的传播可能会导致人员伤亡和关键基础设施的破坏。这些作为网络武器设计的直接影响是相当可观的，但也存在网络武器不受控制的扩散造成的“附带损害”。</p>
<p>网络攻击可能造成与常规攻击类似的损害，所显示的案例表明对公民的严重影响。网络攻击和相关损害的主要目标是：</p>
<ul>
<li><em><strong>电子国防系统</strong></em>——通过入侵一个国家的防御系统，可以控制其常规武器，例如有可能向该国或其他国家发射导弹。</li>
<li><strong>医院</strong>——*医院和医疗中心的电子系统可能会受到网络攻击，从而影响其功能，造成严重后果。</li>
<li>***关键设施的控制系统——***网络攻击可能会破坏化工厂或核电站的管理系统，改变生产流程并使大片区域面临破坏的风险。</li>
<li><em><strong>供水</strong>——</em>水是人们必不可少的资源。供应中断可能会导致大片地区缺水。控制系统的更改可能使其能够正常工作，但容易受到连续攻击（例如水中毒）的影响。</li>
<li><em><strong>全自动交通管制系统和民用和军用空中交通管制</strong>——</em>所有这些系统都不需要售票员或司机，也不需要对交通的指挥和控制提供合理的帮助。考虑攻击对列车控制系统或空中交通管理系统的影响。*</li>
<li>***电网管理系统***——这个目标代表了一个国家的重要系统。攻击这些系统可能会中断电力供应，从而导致计算机、火车、医院和电信服务等国家的活动完全受阻。这些代表了网络攻击的特权目标，它们的防御是每个网络战略的基础。</li>
<li>***银行系统和金融平台——***金融系统是一个国家的重要资产，它们的封锁可能会导致严重的问题，例如对目标经济活动的封锁。尽管无法直接造成人员伤亡，但网络攻击可能会导致一个国家的金融崩溃。情况令人担忧；如果我们认为当今的全球金融严格依赖于每个国家的经济，那么针对某个国家的网络攻击可能会对整个经济体系造成严重且不可预测的后果。</li>
</ul>
<p>但网络武器的存在是一个危险因素，可能对网络空间产生严重影响。大量使用恶意应用程序和网络战技术的后果通常对公民的安全和隐私产生重大影响。</p>
<p>最近几个月，世界各地都检测到不同的无声恶意软件窃取敏感数据并破坏目标系统。Stuxnet、Flame 和 Gauss 等代理肯定是国家资助项目的结果，这些项目不仅感染了真正的最终目标，而且威胁着地球特定地区许多国家的基础设施。</p>
<p>使用网络武器最危险的影响之一是难以预测其扩散。网络空间没有界限，美国政府前空军情报、监视和侦察主管约翰·P·卡夏诺将军证实了这一概念，并宣称：</p>
<p><code>*“我们永远无法 100% 保证网络攻击会按计划进行。”*</code></p>
<p>这意味着网络武器也可能以不可预测的方式打击不被视为目标的其他系统或网络。在极端情况下，它也可能以某种“回旋镖效应”攻击作者所在的国家。</p>
<p>网络空间中网络武器的存在可能会开启恶意个人对其源代码进行逆向工程的可能性。外国政府、网络恐怖分子、黑客行动主义者和网络犯罪分子可以检测、隔离和分析代理，设计和传播难以缓解的新网络威胁。</p>
<p>这些代理很难被发现，并且可以静默运行多年，例如 Gauss 恶意软件对受害者和网络空间中的其他实体造成严重损害。</p>
<p>在网络攻击的情况下，使国土安全面临严重风险的另一个因素是公民缺乏对网络战和攻击时正确响应程序的认识。大多数人完全忽略了“网络战”这个词以及网络作战对现实世界的影响。当然，在正在进行的《网络战争》中，知识的泄露是一个相当大的因素，可以让对手晋级。</p>
<p>该司令部战略倡议小组负责人托马斯·戈斯上校宣布：</p>
<p>*<strong>“虽然技术在网络空间领域发挥着重要作用，但在 21 世纪的网络战场上获胜的并不是技术 [……] 一次又一次，在行动和演习中，人们会有所作为。”<br>*</strong></p>
<p>该声明是对该主题适当教育水平的战略重要性的完美综合。《2012 年陆军战略规划指南》呼吁该军种继续招募、教育、培训和留住网络专业人员，为下一代网络专业人员建立管道。</p>
<h2 id="黑客的新角色和新0day市场的诞生"><a href="#黑客的新角色和新0day市场的诞生" class="headerlink" title="黑客的新角色和新0day市场的诞生"></a>黑客的新角色和新0day市场的诞生</h2><p>“网络武器”的一个基本要素是利用未知漏洞。它被称为零日漏洞，是影响其效率并使目标成为特定应用程序或基础设施成为可能的一个因素。政府和私营企业突然发现在最常见的应用程序中发现错误的重要性，为新的贵重商品创造了新的市场。</p>
<p><img src="https://mk0resourcesinf5fwsf.kinstacdn.com/wp-content/uploads/100512_1551_TheRiseofCy4.jpg" alt="img"><br>美国国家安全局局长亚历山大在 Defcon 2012</p>
<p>新漏洞的利用是黑客工作的特权，这引起了极大的兴趣。在被攻陷主应用的产品制造商和政府眼中，黑客的形象完全改变了。过去，黑客主要是为了自己的乐趣和衡量他们的技能的需要，远离政府事务。今天，他们是市场中的关键人物，其特点是任何涉及漏洞信息的交易都是“即时”的。</p>
<p>一旦发现漏洞，就必须高度重视，避免泄露，并且必须提交给在新市场中作为经纪人运营并能够对发现保密的适当组织，“短路”一个需求和报价。</p>
<p>市场及其参与者笼罩在神秘之中。许多专家认为，它需要监管，但问题远非简单。引入对此类漏洞利用谈判的控制可能会劫持销售到难以监控的领域，从而产生危险的后果。</p>
<p>政府对这些黑客攻击非常感兴趣，因为他们可以将它们用于网络行动，例如网络间谍活动或利用目标基础设施。中国、俄罗斯和美国，以及朝鲜和伊朗，都公开表现出对黑客世界的浓厚兴趣。在许多情况下，政府已经宣布招募最优秀的黑客来创建新的网络单位，例如，在上一届 Defcon 黑客大会期间，美国国家安全局局长基思·B·亚历山大将军曾要求黑客帮助保护网络空间。</p>
<h2 id="网络战争时代——没有规则的冲突"><a href="#网络战争时代——没有规则的冲突" class="headerlink" title="网络战争时代——没有规则的冲突"></a>网络战争时代——没有规则的冲突</h2><p>全球安全社区都意识到我们正处于网络时代，如今网络冲突是在没有规则和法规的情况下进行的。每个国家都能够投资于网络能力的发展，并且由于技术的性质，每个国家都可以在不被发现的情况下使用它，并及时造成严重破坏。</p>
<p>像往常一样，普通民众受无声网络攻击的影响最大。使人们面临网络攻击风险的主要因素是：</p>
<ul>
<li>计算机和通信网络的大规模扩散。</li>
<li>关键系统之间的非托管和易受攻击的互连。</li>
<li>技术格局的快速演变。</li>
<li>网络空间缺乏边界。</li>
</ul>
<p>从监管的角度来看，必须提供以下回应：</p>
<ul>
<li><p>在网络空间使用武力是什么意思？</p>
</li>
<li><p>什么时候应该将网络攻击视为武装攻击？</p>
</li>
<li><p>对网络攻击的相应响应的方法和级别是什么？</p>
</li>
<li><p>哪种规则应该适用于这种响应？</p>
</li>
<li><p>我们如何确定参与网络运营的行为者的法律责任？</p>
</li>
<li><p>我们如何平衡国家安全需要和保护公民个人自由的迫切需要？</p>
</li>
</ul>
<p>网络空间是一个相当重要的新领域，必须以与常规战争中的核或化学武器库完全相同的方式来管理网络武器的使用。尤金·卡巴斯基 (Eugene Kaspersky) 在论点上表示：</p>
<p>“*<strong>网络领域就像现实世界一样，在现实世界中，我们有条约和监督机构来监督遵守情况。它适用于核武器、生物和化学武器，那么为什么不使用网络呢？”*</strong></p>
<p>网络武器的开发相对简单，近年来观察到的网络武器竞赛需要全球公认的监管。一个代表世界所有国家的单一机构将定义一套网络规则，并设法规范网络空间中网络武器和其他网络工具的使用，这是可取的。</p>
<p>目标非常具有挑战性。政府有明显的优势，在这个关键时刻不想限制他们在网络战争中的能力。他们意识到，许多对手正在秘密地继续在如此关键的领域进行投资，并且害怕可能让他们措手不及的网络攻势。在此前提下，很难预测这场争论将如何演变，与此同时，一些安全专家正试图将监管机构正式化以适用于网络战。</p>
<p>关于该主题的最有趣的作品之一是<strong>“****适用于网络战的国际</strong>法塔林手册<strong>”</strong>，这是一份由独立的“国际专家组”撰写的文件，旨在研究现有的国际法规范如何适用于这种“新”形式的战争。</p>
<p>该研究试图阐明国家在网络空间界定管辖权、控制和法律责任的立场。</p>
<p>*<strong>«一国对其造成的网络操作承担国际法律责任，并构成违反国际义务。»<br>*</strong></p>
<p>专家们根据第一版草案的摘要为网络攻击和网络武器等概念提供了法律定义：</p>
<p>*<strong>«网络攻击是网络操作，无论是进攻性还是防御性，合理预期会造成人员伤亡或物体损坏或破坏»<br>*</strong></p>
<p>该手册提供了有关目标的详细说明，强调了在攻击大坝、堤坝和核电站时的注意义务，以及保护儿童、记者、医疗和宗教人员的需要。在网络战中，背景是引入网络武器概念的基础，专家们已经接近它，定义<strong>网络战</strong>的**“手段”是网络武器及其相关的网络系统。<br>**</p>
<p><em>网络武器是网络战争手段，其设计、使用或预期用途能够造成人员伤亡。</em><strong>网络战</strong>的**“方法”是进行敌对行动的网络战术、技术和程序。<br>**</p>
<p>可以提供一个手段和方法示例，参考使用僵尸网络进行的 DDoS 攻击。在这种情况下，僵尸网络是网络战的“手段”，而 DDoS 攻击是“方法”。</p>
<p>该手册还阐述了两个基本概念：</p>
<ul>
<li>禁止使用本质上会造成多余（在没有军事优势的情况下加剧痛苦）或不必要的痛苦的网络战手段或方法。</li>
<li>每次使用网络战争的手段或方法时，都需要进行法律审查，以确定其技术描述、目标性质、对目标的影响、精确度和预期影响范围。</li>
</ul>
<p>您是否相信在当前场景中这些概念可以控制应用程序？</p>
<p>很明显，在我们面临严重且无法弥补的后果之前，引入监管平台是可取的。</p>
<h2 id="关于网络能力发展的经济数据"><a href="#关于网络能力发展的经济数据" class="headerlink" title="关于网络能力发展的经济数据"></a>关于网络能力发展的经济数据</h2><p>在文章的第一部分，已经介绍了当前的网络战场景。大多数国家都在投资以提高其网络能力以用于防御目的，但不仅如此。不仅仅是收集有关正在进行的项目的信息，而且在许多情况下，政府会提供有关这些项目的详细信息，以公开展示他们对网络战的承诺。</p>
<p>X计划无疑是最著名的项目之一，由美国政府推动并由 DARPA 部门开发，用于开发新的网络战技术。该项目并不是美国唯一正在进行的项目。空军研究实验室 (AFRL) 根据一项名为敏捷网络技术 (ACT) 的计划向六家公司提供了价值高达 3 亿美元的合同，以一种形式按需提供网络武器。合同称为不确定交货-不确定数量 (IDIQ)。由于此事缺乏透明度，没有关于俄罗斯和中国等其他活跃国家进行的类似项目的具体信息，但可以肯定的是，这些政府正在大量投资于网络战技术。俄罗斯武装部队在“信息环境：原则、规则、和建立信任措施”宣布了国家对网络武器发展和监管的需求。还要考虑英国和伊朗所付出的努力。</p>
<p>最近，其他国家已确认参与新领域。这个斯堪的纳维亚国家的国防部旨在创建恶意软件和漏洞利用来发起针对威胁的在线反击。北约（<em>北大西洋公约组织）</em>也将在 2012 年投资约 5800 万美元以提升其防御能力。</p>
<p><img src="https://mk0resourcesinf5fwsf.kinstacdn.com/wp-content/uploads/100512_1551_TheRiseofCy5.png" alt="img"></p>
<p>**图 – 各国的网络战费用<br>**</p>
<p>上表提出了一些与网络战最活跃国家的总费用相关的数字。注意中国和美国已经为开发新的网络技术分配了大量投资。</p>
<p>分析网络战的全球费用，可以了解每个国家展示战略重要性以采用适当的网络战略，当然还有开发网络武器库的经济影响。</p>
<h2 id="网络武器的成本是多少？"><a href="#网络武器的成本是多少？" class="headerlink" title="网络武器的成本是多少？"></a>网络武器的成本是多少？</h2><p>很难确定开发网络武器的确切成本，这取决于许多变量，但著名黑客查理米勒提供了有效且现实的估计，他在演示文稿中提出了一些有趣的数字«<em>如何建立一个攻击美国的网络军队</em>»</p>
<p>黑客假设了一个总持续时间为几年的项目，涉及大约 592 名专业人员，涵盖从漏洞分析师到经理的各种工作角色。该研究表明，网络武器的开发需要高技能的专业人员，这些专业人员的结构具有严格的等级制度，并且在设备方面具有无限的可用性。模拟显示年薪为 4,590 万美元（平均年薪为 77,534 美元）和设备费用为 300 万美元。</p>
<p><img src="https://mk0resourcesinf5fwsf.kinstacdn.com/wp-content/uploads/100512_1551_TheRiseofCy6.png" alt="img"></p>
<p>**图 – 网络武器开发团队的组成<br>**</p>
<p>尽管数量看起来很昂贵，但如果与常规武器的成本相比，它确实便宜。出于这个原因，许多政府正在建立致力于开发新的进攻性技术的网络单位。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>文章提出了与网络武器概念相关的几个方面，提供了不同视角下的实际网络战场景图，强调了定义全球公认的监管平台的重要性。尽管许多政府普遍关注，但一些专家认为网络武器的概念过于“抽象”，因此低估了其危害性。这些怀疑论者提出的主要论点是：</p>
<ul>
<li>迄今为止，政府网络武器影响了数千人。</li>
<li>所有众所周知的网络武器的“火力”都远低于人们通常认为的。</li>
<li>网络武器的主要好处可能是与常规军事进攻结合使用；这意味着网络冲突的“武器化”工具的收益回报可能比通常假设的要可疑得多。</li>
</ul>
<p>综合他们对网络武器论点的观点，“网络战争实际上不是战争，因为没有人命损失，网络武器也是如此”，但分析最近发生的事件和不断发现的恶意状态——赞助恶意软件，可以了解网络空间中的重大活动以及对民用和军用基础设施的相关不可预测的影响。</p>
<p>各国政府对网络战具有高度敏感性，并意识到通过网络空间进行的网络威胁可能以与常规攻击完全相同的方式影响国土安全。</p>
<p>未来的特点是加强国家支持的网络行动。网络空间将发生深刻变化，网络安全的概念也将随之发生变化。政府、企业和私营企业必须为迎接挑战做好准备，而不是低估风险。</p>
<p>让我们以一段从黑客世界电影《重启》预告片中提取的声明结束，该声明综合了保护一个国家数字资产的重要性：</p>
<p><strong>“我们都连接在一个庞大的全球网络上，谁控制了网络，谁就控制了世界。”</strong></p>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>The Rise of Cyber Weapons and Relative Impact on Cyberspace，<a href="https://resources.infosecinstitute.com/topic/the-rise-of-cyber-weapons-and-relative-impact-on-cyberspace/">https://resources.infosecinstitute.com/topic/the-rise-of-cyber-weapons-and-relative-impact-on-cyberspace/</a></p>
]]></content>
  </entry>
  <entry>
    <title>《供应链安全培训法》:美将立法建立标准化网络安全培训，防范网络安全威胁</title>
    <url>//post/%E7%BE%8E%E5%B0%86%E7%AB%8B%E6%B3%95%E5%BB%BA%E7%AB%8B%E6%A0%87%E5%87%86%E5%8C%96%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%9F%B9%E8%AE%AD%EF%BC%8C%E9%98%B2%E8%8C%83%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81.html</url>
    <content><![CDATA[<h1 id="《供应链安全培训法》-美将立法建立标准化网络安全培训，防范网络安全威胁"><a href="#《供应链安全培训法》-美将立法建立标准化网络安全培训，防范网络安全威胁" class="headerlink" title="《供应链安全培训法》:美将立法建立标准化网络安全培训，防范网络安全威胁"></a>《供应链安全培训法》:美将立法建立标准化网络安全培训，防范网络安全威胁</h1><p><img src="https://130e178e8f8ba617604b-8aedd782b7d22cfe0d1146da69a52436.ssl.cf1.rackcdn.com/senate-bill-proposes-cyber-training-for-federal-employees-showcase_image-5-a-16982.png" alt="Sen. Gary Peters, D-Mich. (left), 和 Sen. Ron Johnson, R-Wis."></p>
<p>美参议院提出的一项两党法案，将为采购技术服务(注：购买信息设备及服务)的联邦雇员创建一个标准化的网络安全培训计划。</p>
<p>支持该立法提案的立法者说，这将有助于美国政府防范安全威胁和其他供应链的脆弱性。</p>
<p>该法案名为《供应链安全培训法》( Supply Chain Security Training Act)，由担任参议院国土安全和政府事务委员会主席的密歇根州参议员加里-彼得斯和担任该委员会成员的威斯康星州议员罗恩-约翰逊提出。该法案将指示美国总务管理局与国土安全部、国防部和管理与预算办公室协调，为负有采购的联邦官员创建一个供应链安全培训。该法案还将要求管理和预算局为联邦机构采用和使用该计划制定指南。</p>
<h2 id="进入美政府系统的-“后门"><a href="#进入美政府系统的-“后门" class="headerlink" title="进入美政府系统的 “后门"></a>进入美政府系统的 “后门</h2><p>彼得斯强调了这项措施的国家安全重要性，告诫威胁者不要进入美国系统。</p>
<p>“彼得斯说：”最近针对美国网络的攻击表明，我们的外国对手和犯罪组织将不惜一切代价入侵网络，窃取信息并破坏我们的国家安全。”联邦雇员在购买软件和设备时，需要知道如何识别可能的威胁，因为这些软件和设备可能会让坏人有后门进入政府信息系统。”</p>
<p>彼得斯说，该法案将有助于加强政府的安全态势。</p>
<h2 id="最近的攻击"><a href="#最近的攻击" class="headerlink" title="最近的攻击"></a>最近的攻击</h2><p>拟议的立法是在最近一连串的攻击之后提出的，包括2020年12月检测到的SolarWinds供应链攻击。据报道，该活动导致9个美国机构（包括财政部和商务部）以及100家公司（包括微软、SolarWinds和VMWare）遭到后续攻击。</p>
<p>5月，Colonial Pipeline Co.的管道横跨东海岸，成为勒索软件攻击的受害者，导致该公司暂时停止运营。Colonial Pipeline随后向据说在东欧运作的犯罪集团DarkSide支付了440万美元的赎金，以获得一个解密器。联邦调查局后来追回了230万美元的赎金。</p>
<p>同样在5月，肉类加工巨头JBS遭受了勒索软件攻击，中断了在美国、加拿大和澳大利亚的业务。联邦调查局将这次攻击归咎于REvil，又称Sodinokibi，这是一个勒索软件即服务（ransomware-as-a-service）的操作。JBS后来表示，它向犯罪团伙支付了价值1100万美元的加密货币。</p>
<p>而在最近几天，出现了关于REvil供应链勒索软件攻击软件供应商Kaseya的细节，该攻击可能已经影响到全球多达1500个组织。</p>
<p>约翰逊在评论拟议的法案时说：”在我们的对手正在探测网络漏洞以破坏我们的系统和窃取信息的时候，对为政府购买和销售商品和服务的联邦工作人员进行反情报培训至关重要。这种类型的培训将有助于弥补我们在网络和物理安全防御方面的差距。”</p>
<p>彼得斯和约翰逊在2019年提出了类似的立法。那项法案得到了参议院的批准，但没有得到众议院的投票，其目的是让联邦人员做好准备，以识别和减轻在软件采购过程中出现的反情报威胁。</p>
<h2 id="建立在行政命令基础之上"><a href="#建立在行政命令基础之上" class="headerlink" title="建立在行政命令基础之上"></a>建立在行政命令基础之上</h2><p>新的提案希望建立在乔-拜登总统于5月12日发布的网络安全行政命令的基础上，该命令要求政府部门为软件建立基线安全标准–包括应用程序的可见性和对安全数据的访问。该指令还要求供应商在开发过程中纳入安全性。此外，将创建一个新的标签，类似于能源之星的标签，供政府和私营企业确定软件是否是安全开发的）。</p>
<p>在关于该行政命令的补充文件中，白宫指出：”我们有太多的软件，包括关键软件，存在严重的漏洞，被我们的对手所利用。” 利用联邦政府的购买力，政府希望 “从头开始在所有软件中建立安全”。</p>
]]></content>
  </entry>
  <entry>
    <title>警报! 物联网恶意软件Mirai和其他十几个变种依然活跃</title>
    <url>//post/%E8%AD%A6%E6%8A%A5!%20Mirai%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C%E6%B4%BB%E8%B7%83%EF%BC%8C%E5%85%B6%E4%BB%96%E5%8D%81%E5%87%A0%E4%B8%AA%E5%8F%98%E7%A7%8D%E4%B9%9F%E6%98%AF%E5%A6%82%E6%AD%A4.html</url>
    <content><![CDATA[<h1 id="警报-物联网恶意软件Mirai和其他十几个变种依然活跃"><a href="#警报-物联网恶意软件Mirai和其他十几个变种依然活跃" class="headerlink" title="警报! 物联网恶意软件Mirai和其他十几个变种依然活跃"></a>警报! 物联网恶意软件Mirai和其他十几个变种依然活跃</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Mirai僵尸网络自2016年首次出现以来，已经有近五年的时间。自Mirai出现以来，一直是一个持续的物联网安全威胁。该恶意软件及其几个变种被认为是2021年第一季度引发对物联网（55%）和Linux（38%）系统攻击激增的原因。物联网设备制造商需要及时修补漏洞，并遵循适当的物联网安全标准。</p>
<p><img src="https://i.pcmag.com/imagery/articles/04radPg0HVCyUfpdTaKkJ63-2.1569487823.fit_lim.jpg" alt="img"></p>
<p>Mirai僵尸网络自2016年首次出现以来，已经有近五年的时间。自Mirai出现以来，一直是一个持续的物联网安全威胁。在McAfee最近的一份报告中，该恶意软件及其几个变种被认为是2021年第一季度引发对物联网（55%）和Linux（38%）系统攻击激增的原因。 安全研究人员警告说，恶意软件一直在控制世界各地的路由器、网络摄像机和DVR，以创建一个能够扰乱互联网的巨大僵尸网络。</p>
<p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/90cf_shutterstock_530465965.jpg" alt="Alert! Mirai Botnet is Active and So are its Dozen Other Variants"></p>
<p>物联网恶意软件在互联网上扫描使用默认或薄弱用户名和密码的物联网设备。他们还寻求利用已知的，有时甚至是零日(0Day)漏洞来增加他们获得设备访问权限的机会。一旦触发漏洞，就会自动下载并执行恶意二进制文件，使物联网设备成为僵尸网络的一部分，然后可能被攻击者控制参与分布式拒绝服务（DDOS）攻击，导致被攻击目标服务中断。一些威胁者甚至将这些控制的僵尸网络作为一项服务（DDoS-for-Hire&#x2F; DDoS as a Service)出售。</p>
<h2 id="变种继续增长"><a href="#变种继续增长" class="headerlink" title="变种继续增长"></a>变种继续增长</h2><p>自从Mirai的作者发布源代码以来，威胁者一直在通过创建他们自己的物联网僵尸网络军队的来发动大量的攻击。<br>虽然各种Mirai变体不断增加新的功能和漏洞，但其结构和目标仍然是相同的。</p>
<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.kDawNYcjW-OuXL0ZbHHzawHaFW?pid=ImgDet&rs=1" alt="See the source image"></p>
<h2 id="评估Mirai的突出地位"><a href="#评估Mirai的突出地位" class="headerlink" title="评估Mirai的突出地位"></a>评估Mirai的突出地位</h2><p>Fortinet的研究人员在跟踪物联网僵尸网络活动的过程中遇到了许多有趣的方面。<br>一个用于此目的的新蜜罐(Honeypot)系统被发现每天收到约200次攻击，在短短三周内总和接近4700次攻击。<br>这些攻击中约有4000次与Mirai变体有关。根据这些攻击，使用最多的变种是Hajime, SYLVEON, Kyton, PEDO, DNXFCOW, SORA, Cult, BOTNET, OWARI, 和Ecchi。<br>除了蜜罐，研究人员还发现Mirai的一个变种MANGA正在积极更新其列表中的漏洞载体。其中一些漏洞是针对OptiLink ONT1GEW GPON、Cisco HyperFlex和Tenda路由器中发现的漏洞。</p>
<h2 id="另一个Mirai变体Moobot的活动出现了高峰"><a href="#另一个Mirai变体Moobot的活动出现了高峰" class="headerlink" title="另一个Mirai变体Moobot的活动出现了高峰"></a>另一个Mirai变体Moobot的活动出现了高峰</h2><p>根据AT&amp;T外星人实验室(AT&amp;T Alien Labs)的说法，另一个Mirai变体Moobot的活动出现了高峰。<br>事实证明，它是从一个新的网络地下恶意软件域推送出来的，该域被称为Cyberium，一直在锚定大量的Mirai变体活动。<br>研究人员观察到，Moobot正在积极扫描Tenda路由器中的一个远程代码执行漏洞。<br>Moobot的主要特征之一是在代码中多次使用硬编码字符串，如生成执行时使用的进程名称。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>随着智能设备的数量不断爆炸，物联网在未来仍将是恶意软件运作的温床。显然，Mirai变种在攻击和发展方面的活跃状态使其更加令人担忧。它也再次强调物联网设备制造商需要及时修补漏洞，并遵循适当的物联网安全标准。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux系统下的系统资源和网络资源控制</title>
    <url>//post/%E8%B5%84%E6%BA%90%E4%BF%9D%E9%9A%9C.html</url>
    <content><![CDATA[<h2 id="今日珠宝"><a href="#今日珠宝" class="headerlink" title="今日珠宝"></a>今日珠宝</h2><p>宝格丽BVLGARI系列戒指</p>
<p>18K玫瑰金材质镶嵌7颗钻石，非常经典优雅的设计风格。指圈大小63号（正品实拍）</p>
<p><img src="https://pic1.zhimg.com/80/v2-a78042ef069ac261a2b24c645c26204c_720w.jpg" alt="宝格丽BVLGARI系列戒指"></p>
<p>原文为<a href="https://zhuanlan.zhihu.com/p/376501404">知乎</a>，现转移到个人博客。<br><a href="https://zhuanlan.zhihu.com/p/376501404" target="_blank" class="LinkCard">知乎原文</a></p>
<h1 id="Linux系统下的系统资源和网络资源控制"><a href="#Linux系统下的系统资源和网络资源控制" class="headerlink" title="Linux系统下的系统资源和网络资源控制"></a>Linux系统下的系统资源和网络资源控制</h1><p>众所周知，在互联网诞生之初都是各个高校和科研机构相互通讯，并没有网络流量控制方面的考虑和设计，IP协议的原则是尽可能好地为所有数据流服务，不同的数据流之间是平等的。然而多年的实践表明，这种原则并不是最理想的，有些数据流应该得到特别的照顾， 比如，远程登录的交互数据流应该比数据下载有更高的优先级。</p>
<p>同样，我们希望操作系统内的资源也是不平等的，我们总是希望某些进程占用更多的资源，以满足我们当前最迫切的需求，比如看电影的时候，我们希望视频播放器更多的资源，而不希望这个时候浏览器占用过多的资源。</p>
<p>因此细粒度的对操作系统资源的控制是我们每一个人都想做的事，自己的地盘自己做主。</p>
<h2 id="限制系统资源"><a href="#限制系统资源" class="headerlink" title="限制系统资源"></a>限制系统资源</h2><p>在Linux上限制系统资源主要使用的工具是<code>cgroup</code>.</p>
<p>基本语法不在赘述，相关文章很多<code>见参考资料</code>。我们想限制的系统资源主要是CPU，内存还有IO设备(例如，硬盘读写速度)。在Linux系统中，这些资源的分配和管理都由相应目录<code>/cgroup/cpu/,/cgroup/memory ,/cgroup/blkio</code>下配置。下面举例进行说明：例如你想建一个cpu控制策略，取名为<code>foo</code>,则你只需要在目录<code>/cgroup/cpu/</code>中<code>mkdir foo</code>，操作系统会为你创造一些列文件，就可以用操作文件的方式控制你的系统了。如下例：</p>
<h3 id="cpu限制实例"><a href="#cpu限制实例" class="headerlink" title="cpu限制实例"></a><strong>cpu限制实例</strong></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1. [root@localhost &#x2F;]# mkdir -p &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F; 
2. [root@localhost &#x2F;]# mkdir -p &#x2F;cgroup&#x2F;cpuset&#x2F;foo&#x2F; 
3. [root@localhost &#x2F;]# echo 50000 &gt; &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F;cpu.cfs_quota_us 
4. [root@localhost &#x2F;]# echo 100000 &gt; &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F;cpu.cfs_period_us 
5. [root@localhost &#x2F;]# echo &quot;0&quot; &gt; &#x2F;cgroup&#x2F;cpuset&#x2F;foo&#x2F;cpuset.mems 
6. [root@localhost &#x2F;]# echo &quot;1&quot; &gt; &#x2F;cgroup&#x2F;cpuset&#x2F;foo&#x2F;cpuset.cpus 
7. [root@localhost &#x2F;]# echo 28819 &gt; &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F;tasks  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="内存限制实例"><a href="#内存限制实例" class="headerlink" title="内存限制实例"></a><strong>内存限制实例</strong></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1. [root@localhost &#x2F;]# mkdir -p &#x2F;cgroup&#x2F;memory&#x2F;foo 
2. [root@localhost &#x2F;]# echo &gt; &#x2F;cgroup&#x2F;memory&#x2F;foo&#x2F;memory.limit_in_bytes 
3. [root@localhost &#x2F;]# echo 44476 &gt; &#x2F;cgroup&#x2F;memory&#x2F;foo&#x2F;tasks  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>内存参数</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cgroup.event_control       #用于eventfd的接口
memory.usage_in_bytes      #显示当前已用的内存
memory.limit_in_bytes      #设置&#x2F;显示当前限制的内存额度
memory.failcnt             #显示内存使用量达到限制值的次数
memory.max_usage_in_bytes  #历史内存最大使用量
memory.soft_limit_in_bytes #设置&#x2F;显示当前限制的内存软额度
memory.stat                #显示当前cgroup的内存使用情况
memory.use_hierarchy       #设置&#x2F;显示是否将子cgroup的内存使用情况统计到当前cgroup里面
memory.force_empty         #触发系统立即尽可能的回收当前cgroup中可以回收的内存
memory.pressure_level      #设置内存压力的通知事件，配合cgroup.event_control一起使用
memory.swappiness          #设置和显示当前的swappiness
memory.move_charge_at_immigrate #设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去
memory.oom_control         #设置&#x2F;显示oom controls相关的配置
memory.numa_stat           #显示numa相关的内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</blockquote>
<h3 id="IO限制实例"><a href="#IO限制实例" class="headerlink" title="IO限制实例"></a><strong>IO限制实例</strong></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1. [root@localhost ~]# mkdir -p &#x2F;cgroup&#x2F;blkio&#x2F;foo 
2. [root@localhost ~]# echo &#39;8:0  10485760&#39; &gt; &#x2F;cgroup&#x2F;blkio&#x2F;foo&#x2F;blkio.throttle.read_bps_device 
3. [root@localhost ~]# echo 45033 &gt; &#x2F;cgroup&#x2F;blkio&#x2F;foo&#x2F;tasks 
#  注2：8:0对应主设备号和副设备号，可以通过ls -l &#x2F;dev&#x2F;sda查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="一个限制内存和CPU的具体例子"><a href="#一个限制内存和CPU的具体例子" class="headerlink" title="一个限制内存和CPU的具体例子"></a>一个限制内存和CPU的具体例子</h3><p>之前在学习cgroup的时候，较多的都是减少原理和一些简单的例子，但这对直观的取理解cgroup还是有点障碍，所以学习的过程中，参考他人的博客结合自己的理解写了一个例子，供大家参考。</p>
<p>例子分为两个部分</p>
<h4 id="0x01-被限制应用"><a href="#0x01-被限制应用" class="headerlink" title="0x01 被限制应用"></a>0x01 被限制应用</h4><p>被限制应用是一个CPU消耗型，具体见下面代码</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>直接编译，假如这里编译出的程序名为<code>deadloop</code>, <code>top</code>查看如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     
31404 root  20   0    4220    656    588 R  98.7  0.0   8:45.27 deadloop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h4 id="0x02-限制规则"><a href="#0x02-限制规则" class="headerlink" title="0x02 限制规则"></a>0x02 限制规则</h4><p>这里我们做两个方面的工作：限制CPU使用率和限制内存。具体代码如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 增加规则代码
#!&#x2F;bin&#x2F;bash
# 规则集合在testdead
gname&#x3D;&#39;testdead&#39;
value&#x3D;50000
prog&#x3D;$1
mem_val&#x3D;1024000

rmdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$&#123;gname&#125;;
rmdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname;

mkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$gname;
mkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname;

echo $value | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$gname&#x2F;cpu.cfs_quota_us;
echo $mem_val | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname&#x2F;memory.limit_in_bytes;

for x in $(pidof $prog)
do 
	echo $x  | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$gname&#x2F;tasks;
	echo $x | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname&#x2F;tasks

	echo 0 | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname&#x2F;memory.swappiness
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 删除规则代码
#!&#x2F;bin&#x2F;bash

dname&#x3D;testdead

cgdelete cpu:$dname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述规则应用后，<code>top</code>查看如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">31404 root  20   0    4220    656    588 R  49.8  0.0   8:08.46 deadloop   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以看出，两次的CPU使用率不一样，显示出了cgroup的限制效果。</p>
<h2 id="限制网络资源"><a href="#限制网络资源" class="headerlink" title="限制网络资源"></a>限制网络资源</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Linux操作系统中，报文分组从输入网卡(入口)接收进来，经过路由的查找， 以确定是发给本机的，还是需要转发的。如果是发给本机的，就直接向上递交给上层的协议，比如TCP，如果是转发的， 则会从输出网卡(出口)发出。网络流量的控制通常发生在输出网卡处。虽然在路由器的入口处也可以进行流量控制，Linux也具有相关的功能， 但一般说来， 由于我们无法控制自己网络之外的设备， 入口处的流量控制相对较难。本文将集中介绍出口处的流量控制。</p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>流量控制（<code>Traffic Control</code>， <code>tc</code>）是<code>Linux</code>内核提供的流量限速、整形和策略控制机制。它以<code>qdisc-class-filter</code>的树形结构来实现对流量的分层控制</p>
<p>在Linux中，流量控制都是通过TC这个工具来完成的。通常， 要对网卡进行流量控制的配置，需要进行如下的步骤:</p>
<ul>
<li><p>为网卡配置一个队列;</p>
</li>
<li><p>在该队列上建立分类;</p>
</li>
<li><p>根据需要建立子队列和子分类;</p>
</li>
<li><p>为每个分类建立过滤器。</p>
</li>
</ul>
<p><img src="/post/%E8%B5%84%E6%BA%90%E4%BF%9D%E9%9A%9C/tc2.jpeg" alt="Traffic Control"></p>
<h3 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h3><p>从上图中可以看到，tc由<code>qdisc</code>、<code>fitler</code>和<code>class</code>三部分组成：</p>
<ul>
<li><p><code>qdisc</code>通过队列将数据包缓存起来，用来控制网络收发的速度</p>
<ul>
<li>常见的classless qdisc有：choke, codel, p&#x2F;bfifo,fq, fq_codel, gred, hhf, ingress,mqprio, multiq, netem, pfifo_fast, pie, red, rr, sfb, sfq, tbf。linux默认使用的就是fifo_fast。</li>
<li>常见的classful qdisc有：ATM, CBQ, DRR, DSMARK, HFSC, HTB, PRIO, QFQ</li>
</ul>
</li>
<li><p><code>class</code>用来表示控制策略</p>
<ul>
<li><p>分类只存在于可分类排队规则（classful qdisc）（例如，HTB和CBQ）中。</p>
</li>
<li><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p><strong>default</strong> 这是HTB排队规则的一个可选参数，默认值为0， 当值为0时意味着会绕过所有和rootqdisc相关联的分类，然后以最大的速度出队任何未分类的流量。 </p>
<p><strong>rate</strong> 这个参数用来设置流量发送的最小期望速率。这个速率可以被当作承诺信息速率(CIR), 或者给某个叶子分类的保证带宽。 </p>
<p><strong>ceil</strong> 这个参数用来设置流量发送的最大期望速率。租借机制将会决定这个参数的实际用处。 这个速率可以被称作“突发速率”。 </p>
<p><strong>burst</strong> 这个参数是rate桶的大小(参见令牌桶这一节)。HTB将会在更多令牌到达之前将burst个字节的数据包出队。 </p>
<p><strong>cburst</strong> 这个参数是ceil桶的大小（参见令牌桶这一节）。HTB将会更多令牌(ctoken)到达之前将cburst个字节的数据包出队。 </p>
<p><strong>quantum</strong> 这个是HTB控制租借机制的关键参数。正常情况下，HTB自己会计算合适的quantum值，而不是由用户来设定。对这个值的轻微调整都会对租借和整形造成巨大的影响，因为HTB不仅会根据这个值向各个子分类分发流量(速率应高于rate，小于ceil)，还会根据此值输出各个子分类中的数据。 </p>
<p><strong>r2q</strong> 通常,quantum 的值由HTB自己计算，用户可以通过此参数设置一个值来帮助HTB为某个分类计算一个最优的quantum值。</p></blockquote>
</li>
</ul>
</li>
<li><p><code>filter</code>用来将数据包划分到具体的控制策略中</p>
<ul>
<li>包含了一个分类器实现，常见的分类器如u32，u32分类器可以允许用户基于数据包的属性来选择数据包。</li>
</ul>
</li>
</ul>
<p>语法不再赘述，相关参考资料里有。</p>
<h3 id="入流量调度"><a href="#入流量调度" class="headerlink" title="入流量调度"></a>入流量调度</h3><p>Linux中的QoS分为入口(Ingress)部分和出口(Egress)部分，入口部分主要用于进行入口流量限速(policing)，出口部分主要用于队列调度(queuing scheduling)。</p>
<p>大多数排队规则(qdisc)都是用于输出方向的，输入方向只有一个排队规则，即ingress qdisc。ingress qdisc本身的功能很有限，但可用于重定向incoming packets。通过Ingress qdisc把输入方向的数据包重定向到虚拟设备ifb，而ifb的输出方向可以配置多种qdisc，就可以达到对输入方向的流量做队列调度的目的。</p>
<p><img src="/post/%E8%B5%84%E6%BA%90%E4%BF%9D%E9%9A%9C/1354528849_1019.png" alt="输入流量调度示意"></p>
<p>IFB说明：</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>IFB — Intermediate Functional Block device。<br>Q: How can we use qdisc (e.g., netem) on incoming traffic?<br>A: You need to use IFB. This network device allows attaching queueing disciplines to incoming packets.<br>To use an IFB, you must have IFB support in your kernel (configuration option CONFIG_IFB). Assuming that you have a modular kernel, the name of the IFB module is ifb and may be loaded using the command <code>modprobe ifb</code> (if you have modprobe installed) or <code>insmod /path/to/module/ifb</code>.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ip link set ifb0 up
ip link set ifb1 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>By default, two IFB devices(ifb0 and ifb1) are created.<br>IFB allows for queueing incoming traffic for shaping instead of dropping.</p>
<p>参考资料:<a href="https://blog.csdn.net/eydwyz/article/details/53392227">https://blog.csdn.net/eydwyz/article/details/53392227</a></p></blockquote>
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bash
#fb驱动并创建ifb网卡(使用ifconfig -a 如果看到已有则无需该步骤)
#分别为出设备和入设备
outdevice&#x3D;ens33
indevice&#x3D;ifb0

modprobe ifb numifbs&#x3D;1
# up网卡
ip link set dev $indevice up

# ------
	# 清除原有的根队列(根据实际情况操作,非必要) 
	tc qdisc del dev $outdevice root 2&gt;&#x2F;dev&#x2F;null
	tc qdisc del dev $outdevice ingress 2&gt;&#x2F;dev&#x2F;null
	tc qdisc del dev $indevice root 2&gt;&#x2F;dev&#x2F;null
 
	#  将$outdevice的ingress流量全部重定向到 $indevice 处理
	tc qdisc add dev $outdevice handle ffff: ingress
	tc filter add dev $outdevice parent ffff: protocol ip u32 match u32 0 0 action mirred egress redirect dev $indevice
	 
	# $outdevice的出向限速:$outdevice添加根队列,使用htb,添加1:1类,使用htb 
	tc qdisc add dev $outdevice root handle 1: htb r2q 625 default 65
	tc class add dev $outdevice parent 1: classid 1:1 htb rate 1000Mbit
	 
	# $outdevice的入向限速:$indevice添加根队列,使用htb,添加1:1类,使用htb 
	tc qdisc add dev $indevice root handle 1: htb r2q 625 default 65
	tc class add dev $indevice parent 1: classid 1:1 htb rate 1000Mbit
	 
	# $outdevice的出向限速:$outdevice设备添加子类\对应的filter配置规则和子类的队列
	tc class add dev $outdevice parent 1:1 classid 1:10 htb rate 10Mbit
	tc filter add dev $outdevice parent 1: protocol all prio 1 u32 match ip dst 192.168.0.2 classid 1:10
	tc qdisc add dev $outdevice parent 1:10 handle 10: sfq
	 
	# $outdevice的出向限速:$outdevice设备添加子类\对应的filter配置规则和子类的队列 
	tc class add dev $outdevice parent 1:1 classid 1:11 htb rate 20Mbit
	tc filter add dev $outdevice parent 1: protocol all prio 1 u32 match ip dst 192.168.0.3 classid 1:11
	tc qdisc add dev $outdevice parent 1:11 handle 11: sfq
	 
	 
	# $outdevice的入向限速:$indevice设备添加子类\对应的filter配置规则和子类的队列
	tc class add dev $indevice parent 1:1 classid 1:10 htb rate 10Mbit
	tc filter add dev $indevice parent 1: protocol all prio 1 u32 match ip src 192.168.0.2 classid 1:10
	tc qdisc add dev $indevice parent 1:10 handle 10: sfq
	 
	 
	# $outdevice的入向限速:$indevice设备添加子类\对应的filter配置规则和子类的队列 
	tc class add dev $indevice parent 1:1 classid 1:11 htb rate 20Mbit
	tc filter add dev $indevice parent 1: protocol all prio 1 u32 match ip src 192.168.0.3 classid 1:11
	tc qdisc add dev $indevice parent 1:11 handle 11: sfq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="网络压力测试"><a href="#网络压力测试" class="headerlink" title="网络压力测试"></a>网络压力测试</h3><p>压力测试工具使用<code>iperf网络测试工具</code></p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>常用参数指南（详见附录）：</p>
<p>-c&#x2F;s：客户端模式&#x2F;服务端模式</p>
<p>-p：指定iperf测试端口</p>
<p>-i：指定报告间隔</p>
<p>-b：设置UDP的发送带宽，单位bit&#x2F;s</p>
<p>-t：设置测试的时长，单位为秒，不设置默认10s</p>
<p>-l：指定包大小，TCP默认8k，UDP默认1470字节</p></blockquote>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 针对TCP进行带宽性能测试
#服务端命令：
iperf -s -i 1 -p 3389
#
iperf -c 192.168.158.128 -p 3389 -i 1

#针对UDP进行带宽性能测试
#服务端命令
iperf -u -s -i 1 -p 3389
#客户端命令
iperf -u -c 192.168.158.128 -p 3389 -b 1500M -i 1 
# 参考资料：iperf网络测试工具， https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1688469<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>带宽查看使用工具<code>iftop</code></p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><pre><code>TX：发送流量
RX：接收流量
TOTAL：总流量
Cumm：运行iftop到目前时间的总流量
peak：流量峰值
rates：分别表示过去 2s 10s 40s 的平均流量
</code></pre></blockquote>
<p>执行脚本前后，对于网络带宽进行检测，发现流量带宽明显受到TC的控制。实验成功。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文通过对Linux操作系统中<code>cgroup</code>、<code>tc</code>的使用，实现了对Linux操作系统中系统资源和网络资源的控制。本文的方法和工具在写作过程中可能还有用到，但是没有写进来的，欢迎大家留言或通过微信公众号联系我，我会尽力为大家解答。</p>
<h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><h3 id="如何获取进程ID"><a href="#如何获取进程ID" class="headerlink" title="如何获取进程ID"></a>如何获取进程ID</h3><h4 id="根据进程名称获取pid"><a href="#根据进程名称获取pid" class="headerlink" title="根据进程名称获取pid"></a>根据进程名称获取pid</h4><p> 最简单的方法是使用 <strong>pidof</strong> 命令，用法：pidof  process_name，例如：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看初始进程的pid
pidof init
# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>有事可能因为同一个名称的程序启动了多个进程，使用pidof时会返回多个pid，使用空格分开</p>
<h4 id="查找当前激活状态的网络链接及进程ID"><a href="#查找当前激活状态的网络链接及进程ID" class="headerlink" title="查找当前激活状态的网络链接及进程ID"></a>查找当前激活状态的网络链接及进程ID</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lsof -i -n（不反向解析DNS）
# eg
lsof -i -n | awk   &#39;&#123;print $2, $9&#125;&#39;
# 输出为
#PID NAME
#29646 192.168.153.129:51044-&gt;13.250.177.223:https
#29646 192.168.153.129:52970-&gt;54.149.208.57:https

lsof -i -n -P  | awk &#39;&#123;print $1, $2,$5,$9&#125;&#39;
# 输出时，不解析端口，应该将https-&gt;443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>Linux 资源隔离机制 – CGroup <a href="https://zhuanlan.zhihu.com/p/47590418">https://zhuanlan.zhihu.com/p/47590418</a></p>
<p><a href="https://www.cnblogs.com/caoxiaojian/p/5633430.html">CGroup 介绍、应用实例及原理描述</a> <a href="https://www.cnblogs.com/caoxiaojian/p/5633430.html">https://www.cnblogs.com/caoxiaojian/p/5633430.html</a></p>
<p>流量控制 <a href="https://tonydeng.github.io/sdn-handbook/linux/tc.html">https://tonydeng.github.io/sdn-handbook/linux/tc.html</a></p>
<p>Traffic Control HOWTO <a href="https://tldp.org/HOWTO/Traffic-Control-HOWTO/">https://tldp.org/HOWTO/Traffic-Control-HOWTO/</a></p>
<p>Linux TC(Traffic Control)框架原理解析， <a href="https://blog.csdn.net/dog250/article/details/40483627">https://blog.csdn.net/dog250/article/details/40483627</a></p>
<p> <a href="https://www.cnblogs.com/yulia/p/10346339.html">linux下使用tc(Traffic Control) 流量控制命令模拟网络延迟和丢包</a></p>
<p>TC流量控制 <a href="https://blog.csdn.net/who538592/article/details/79483323">https://blog.csdn.net/who538592/article/details/79483323</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>系统管理</tag>
        <tag>网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>这款木马的传播者已被逮捕</title>
    <url>//post/%E8%BF%99%E6%AC%BE%E6%9C%A8%E9%A9%AC%E7%9A%84%E4%BC%A0%E6%92%AD%E8%80%85%E5%B7%B2%E8%A2%AB%E9%80%AE%E6%8D%95.html</url>
    <content><![CDATA[<h1 id="这款木马的传播者已被逮捕"><a href="#这款木马的传播者已被逮捕" class="headerlink" title="这款木马的传播者已被逮捕"></a>这款木马的传播者已被逮捕</h1><p><img src="https://www.cybersafe.news/wp-content/uploads/2021/07/trojan-780x400.jpg" alt="img"></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>哥伦比亚的执法部门已经逮捕了一名涉嫌传播Gozi木马的网络犯罪分子。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这位罗马尼亚国民Mihai Ionut Paunescu，也被称为 “病毒”，是2007年至2012年期间，影响超过一百万台个人电脑的三名主要嫌疑人之一。</p>
<p>他在波哥大埃尔多拉多国际机场被捕，并因被指控经营防弹托管服务(bulletproof hosting service)而面临被引渡到美国。Paunescu在纽约南区法院面临计算机入侵和金融欺诈的指控。此前，Paunescu于2012年在其本国被捕，但他之前能够避免引渡。</p>
<h2 id="防弹托管"><a href="#防弹托管" class="headerlink" title="防弹托管"></a>防弹托管</h2><p>防弹托管(bulletproof hosting service)通常被网络犯罪分子用于后台基础设施，用于传播垃圾邮件、恶意软件、漏洞工具包，以及托管被盗数据。这些在线服务对其客户的违法活动视而不见。威胁者以每周500美元的价格出租恶意软件及其基础设施，这被认为是当今恶意软件即服务（MaaS）犯罪设置的早期形式。</p>
<h2 id="Gozi木马"><a href="#Gozi木马" class="headerlink" title="Gozi木马"></a>Gozi木马</h2><p>2007年首次发现的Gozi银行木马是通过附在电子邮件中的武器化PDF文件传播的。下载后，该恶意软件会潜伏在后台，收集银行账户信息和账户细节，然后发送到木马的命令和控制（C2）服务器，供操作者用于访问账户和进行欺诈性交易。</p>
<p>Gozi的源代码在2010年被泄露，许多变种被创造出来，目前仍在使用中。</p>
<p>2016年，Gozi的俄罗斯创造者Nikita “76” Kuzmin在承认各种计算机入侵和欺诈指控后在美国法院被判刑。</p>
<p>据估计，该恶意软件给受害者造成的损失高达数千万美元。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>//post/%E9%92%88%E5%AF%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E9%A9%B1%E5%8A%A8%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B0%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<hr>
<p>title: 针对人工智能驱动的人脸识别系统的新攻击方法<br>date: 2022-02-26 14:10:48</p>
<hr>
<h1 id="针对人工智能驱动的人脸识别系统的新攻击方法"><a href="#针对人工智能驱动的人脸识别系统的新攻击方法" class="headerlink" title="针对人工智能驱动的人脸识别系统的新攻击方法"></a>针对人工智能驱动的人脸识别系统的新攻击方法</h1><p><img src="https://cyware-ent.s3.amazonaws.com/image_bank/0526_shutterstock_1367090597.jpg" alt="A New Attack on AI-driven Facial Recognition Systems"></p>
<p>来自Adversa的研究人员开发了一种名为Adversarial Octopus的攻击技术，可以对面部识别系统进行定向攻击。它影响了当前几个人工智能驱动的面部识别工具，使它们暴露在严重的攻击之下。</p>
<h2 id="关于新的攻击"><a href="#关于新的攻击" class="headerlink" title="关于新的攻击"></a>关于新的攻击</h2><p>研究人员开发了这种针对人工智能驱动的面部识别系统的新攻击，可以改变照片的方式，使人工智能系统识别出不同的人或任选的人。<br>这种攻击的主要特点是，它可以针对各种人工智能的实现，如物理设备和在线API。它可以适应目标环境。<br>这种类型的攻击既可用于规避场景，如制作隐蔽的深度欺骗，也可用于通过欺骗计算机视觉算法，对场景进行“投毒”，并可能导致严重后果。<br>该攻击能够绕过面部识别服务、应用程序和API。此外，它影响了最先进的在线面部识别搜索引擎，即PimEyes。</p>
<h2 id="对PimEyes搜索引擎的攻击"><a href="#对PimEyes搜索引擎的攻击" class="headerlink" title="对PimEyes搜索引擎的攻击"></a>对PimEyes搜索引擎的攻击</h2><p>这个针对PimEyes的对抗性Octopus 攻击是用攻击框架中的以下技术开发的。<br>为了提供更好的可转移性，它在各种面部识别模型上与随机模糊和噪音一起训练。<br>为了提供更好的准确性，该系统被创建为在神经网络的每一层计算对抗性变化，并使用随机人脸检测框架。<br>为了获得更好的可感知性，它对每个像素的微小变化进行了优化，并使用特殊函数来平滑对抗性噪声。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这种攻击表明，人工智能系统在安全方面需要更多的关注，而这种新的攻击方法将有助于提高人们的认识。它将帮助企业处理目前对抗性机器学习系统中存在的问题。此外，研究人员正在与企业协调，以保护他们的人工智能应用免受这种攻击。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cyware.com/news/a-new-attack-on-ai-driven-facial-recognition-systems-4ece656a">https://cyware.com/news/a-new-attack-on-ai-driven-facial-recognition-systems-4ece656a</a></p>
]]></content>
  </entry>
  <entry>
    <title>颠覆传统网络安全结构--Zero Trust</title>
    <url>//post/%E9%9B%B6%E4%BF%A1%E4%BB%BB.html</url>
    <content><![CDATA[<h1 id="颠覆传统网络安全结构–Zero-Trust"><a href="#颠覆传统网络安全结构–Zero-Trust" class="headerlink" title="颠覆传统网络安全结构–Zero Trust"></a>颠覆传统网络安全结构–Zero Trust</h1><p>《林海雪原》中，侠客般的杨子荣靠着“黑话”&#x2F;“暗号”，赢得了土匪头子“座山雕”的信任，成功打入土匪内部，智取了威虎山。</p>
<p>假如将这一场景类比于网络，它与早期的网络攻击何其相似。</p>
<p>传统的网络安全中，用户与系统之间依靠防火墙隔离，用户只需完成如“盖地虎，镇河妖”的“暗号”就可访问系统内部整个网络区域，使网络存在非常大的安全隐患。随着企业业务复杂性的增加、黑客的“进化”以及网络虚拟化等技术的发展，安全防御方式也在进一步提升，“盖地虎，镇河妖”式“暗号”已不能支撑整个网络安全系统.[8]</p>
<p>为了解决这个问题，零信任模型被提出，一些大的机构也提出了自己的零信任体系，如NIST[6],NSA[7],奇安信[5]等。可以看出，零信任模型作为一种颠覆性的安全结构设计，已经逐渐得到人们的认可。下面我们就简要的介绍一下零信任的相关知识。</p>
<h2 id="传统的网络安全结构"><a href="#传统的网络安全结构" class="headerlink" title="传统的网络安全结构"></a>传统的网络安全结构</h2><p>据加利福尼亚州旧金山的计算机安全研究所称，60％到80％的网络滥用事件来自内部网络。因为传统的防火墙和入侵检测系统（IDS）主要是针对网络外部发起的攻击，而对来自内部的网络攻击是无效的。传统的基于边界的网络安全方法是先连接，后信任，在网络边界验证用户身份，确定用户是否值得信任。如果用户被认定为是可信任的，就能进入网络，而一旦通过边界进入到网络内部，访问基本就通行无阻了。如防火墙、入侵防御系统等，是一种城堡护城河式保护。</p>
<p>传统的网络安全结构把不同的网络（或者单个网络的一部分）划分为不同的区域，不同区域之间使用防火墙进行隔离。每个区域都被授予某种程度的信任，它决定了哪些网络资源允许被访问。这种安全模型提供了非常强大的纵深防御能力。比如，互联网可访问的Web服务器等高风险的网络资源，被部署在特定的区域（一般称为“隔离区”, DMZ），该区域的网络流量被严密监控和严格控制。这是一种常见的网络安全架构。</p>
<p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617162619409.png" alt="传统的网络安全架构"></p>
<p>这种保护机制可以称为，<strong>城堡护城河式保护</strong>：传统的基于边界的网络安全方法是<strong>先连接，后信任</strong>，在网络边界验证用户身份，确定用户是否值得信任。如果用户被认定为是可信任的，就能进入网络，而一旦通过边界进入到网络内部，访问基本就通行无阻了。</p>
<p>传统的安全模型主要有以下缺点。</p>
<ul>
<li>缺乏网络内部的流量检查。</li>
<li>主机部署缺乏物理及逻辑上的灵活性。</li>
<li>存在单点故障</li>
</ul>
<h3 id="以横向移动举例说明传统的网络安全结构的问题"><a href="#以横向移动举例说明传统的网络安全结构的问题" class="headerlink" title="以横向移动举例说明传统的网络安全结构的问题"></a>以横向移动举例说明传统的网络安全结构的问题</h3><p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617163038490.png" alt="攻击者在办公网络中横向移动，最终进入生产网络"></p>
<p>① 通过钓鱼邮件锁定企业的员工。</p>
<p>② 攻陷办公网的员工计算机，获得Shell。</p>
<p>③ 在办公网络中横向移动。</p>
<p>④ 定位拥有特权的计算机。</p>
<p>⑤ 安装键盘记录器的特权计算机本地提权。</p>
<p>⑥ 窃取开发人员的口令。</p>
<p>⑦ 从特权计算机攻击生产应用主机。</p>
<p>⑧ 利用开发人员口令在生产应用主机上提升权限。</p>
<p>⑨ 从应用程序中窃取数据库口令。</p>
<p>⑩ 通过失陷的应用主机外泄数据库中的数据。</p>
<blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot="">
<path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path>
<path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path>
<path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path>
<path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path>
</svg>
</span><p>横向移动（Lateral Movement）就是当攻击者获得了某台内网机器的控制权限后，会以被攻陷的主机为跳板，继续访问或控制其他内网机器的过程.</p>
<p><img src="https://alln-extcloud-storage.cisco.com/ciscoblogs/lateral-movement.jpg" alt="查看源图像"></p></blockquote>
<p>在上述过程中，一旦攻击者获取了内网的某台主机的访问控制权限，又由于现有防御策略对内网控制不那么强， 攻击者可以通过一些系列操作，实现内网的横向移动，最终控制整个内部网络。</p>
<p>如何解决这个问题呢？首先问题的关键是<strong>信任</strong>出了问题。传统网络安全结构，对内网中的用户具有一定的默认权限，即默认信任内网用户。因此尽可能减少信任是更明智的做法。</p>
<h2 id="零信任架构"><a href="#零信任架构" class="headerlink" title="零信任架构"></a>零信任架构</h2><p>一种解决上述粗粒度的访问控制的方式是进行更加细粒度的访问控制，即分段安全。分段安全用物理安全设备分割网络可以实现更强的违规控制。但此种方法成本昂贵</p>
<h3 id="分段安全的缺陷"><a href="#分段安全的缺陷" class="headerlink" title="分段安全的缺陷"></a>分段安全的缺陷</h3><p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617164143293.png" alt="image-20210617164143293"></p>
<ul>
<li><p>传统的周边安全缺乏必要的控制来限制攻击和恶意软件在周边的移动(上图左)。</p>
</li>
<li><p>用物理安全设备分割网络可以实现更强的违规控制，但会迅速增加成本并产生变更管理挑战，特别是在工作负载变得可移动的情况下(上图右)。</p>
</li>
</ul>
<h3 id="解决方案：零信任"><a href="#解决方案：零信任" class="headerlink" title="解决方案：零信任"></a>解决方案：零信任</h3><p>零信任网络模型在2010年由John Kindervag提出，后来Gartner和Forrester由对零信任概念、应用场景、迁移方式进行了完善和补充。</p>
<p>零信任架构的做法是先信任，后连接，意味着每个用户、设备、服务或应用程序都是不可信任的，必须经历身份和访问管理过程才能获得最低级别的信任和关联访问特权。零信任模型不信任任何人，所有对数据和服务(统称为资源)的访问都需要授权,这是和传统网络安全方法的主要区别。</p>
<p>《零信任网络：在不可信网络中构建安全系统》[3]对零信任安全进行了抽象：</p>
<ul>
<li><p>网络无时无刻不处于危险的环境中</p>
</li>
<li><p>网络中自始至终存在外部或内部威胁</p>
</li>
<li><p>网络位置不足以决定网络的可信程度</p>
</li>
<li><p>所有的设备、用户和网络流量都应当经过认证和授权</p>
</li>
<li><p>安全策略必须是动态的，并基于尽可能多的数据源计算而来。</p>
</li>
</ul>
<h3 id="基于零信任的网络安全架构"><a href="#基于零信任的网络安全架构" class="headerlink" title="基于零信任的网络安全架构"></a>基于零信任的网络安全架构</h3><p>利用分布式策略实施和应用零信任原则，可以构建如下图所示的网络安全架构</p>
<p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617162810842.png" alt="零信任架构"></p>
<p>其中，零信任架构的支撑系统称为控制平面，其他部分称为数据平面，数据平面由控制平面指挥和配置。</p>
<h3 id="零信任的数据平面和控制平面"><a href="#零信任的数据平面和控制平面" class="headerlink" title="零信任的数据平面和控制平面"></a>零信任的数据平面和控制平面</h3><ul>
<li><p>数据平面。零信任网络中的数据平面由直接处理网络流量的应用程序、防火墙、代理服务器和路由器组成。</p>
</li>
<li><p>控制平面。零信任网络中的控制平面由一系列组件构成，这些组件接收并处理来自数据平面的请求，这些请求或者是希望访问网络资源，或者是授予网络资源的访问权限。访问受保护资源的请求首先经过控制平面处理，包括设备和用户的身份认证与授权。细粒度的控制策略也在这一层进行，控制平面可以基于组织中的角色、时间或设备类型进行授权。一旦控制平面完成检查，确定该请求具备合法的授权，它就会动态配置数据平面，接收来自该客户端（且仅限该客户端）的访问流量。此外，控制平面还能够为访问请求者和被访问的资源协调配置加密隧道的具体参数，包括一次性的临时凭证、密钥和临时端口号等。</p>
<p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617165425098.png" alt="零信任客户端与控制平面进行交互以访问服务资源"></p>
</li>
</ul>
<h2 id="奇安信零信任安全白皮书"><a href="#奇安信零信任安全白皮书" class="headerlink" title="奇安信零信任安全白皮书"></a>奇安信零信任安全白皮书</h2><h3 id="零信任架构的关键能力模型"><a href="#零信任架构的关键能力模型" class="headerlink" title="零信任架构的关键能力模型"></a>零信任架构的关键能力模型</h3><p>零信任架构的本质是以身份为基石的动态可信访问控制，聚焦身份、信任、业务访问和动态访问控制等维度的安全能力，基于业务场景的人、流程、环境、访问上下文等多维的因素，对信任进行持续评估，并通过信任等级对权限进行动态调整，形成具备较强风险应对能力的动态自适应的安全闭环体系。</p>
<p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617170017904.png" alt="image-20210617170017904"></p>
<h3 id="零信任架构核心逻辑架构组件"><a href="#零信任架构核心逻辑架构组件" class="headerlink" title="零信任架构核心逻辑架构组件"></a>零信任架构核心逻辑架构组件</h3><p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617170113622.png" alt="零信任架构核心逻辑架构组件"></p>
<ul>
<li><p>可信代理</p>
<p>可信代理是零信任架构的数据平面组件，是确保业务安全访问的第一道关口，是动态访问控制能力的策略执行点。</p>
<p>可信代理拦截访问请求后，通过动态访问控制引擎对访问主体进行认证，对访问主体的权限进行动态判定。只有认证通过、并且具有访问权限的访问请求才予以放行。同时，可信代理需要对所有的访问流量进行加密。全流量加密对可信代理也提出了高性能和高伸缩性的需求，支持水平扩展是零信任可信代理必须具备的核心能力。</p>
<p><strong>在零信任网络模型下，授权的主体必须是网络代理。网络代理</strong>指在网络请求中用于描述请求发起者的信息集合，一般包括用户、应用程序和设备共3类实体信息。作为网络活动的首要参与者，网络代理在信任评分计算过程中，同样发挥着重要作用。评估网络代理的信任度时，信任引擎不仅仅可以使用网络代理自身包含的信息，还可以使用其历史行为记录。<strong>信任评估系统</strong>会根据访问活动日志之类的信息进行实时计算，并更新用户、应用程序和设备的信任评分。网络代理只能是一种“尽力而为”的数据集，某些字段总是会因为各种原因而缺失。网络代理属于授权范畴</p>
</li>
<li><p>动态访问控制引擎</p>
<p>动态访问控制引擎和可信代理联动，对所有访问请求进行认证和动态授权，是零信任架构控制平面的策略判定点。</p>
<p>动态访问控制引擎对所有的访问请求进行权限判定，权限判定不再基于简单的静态规则，而是基于上下文属性、信任等级和安全策略进行动态判定。动态访问控制进行权限判定的依据是身份库、权限库和信任库。其中身份库提供访问主体的身份属性，权限库提供基础的权限基线，信任库则由身份分析引擎通过实时的风险多维关联和信任评估进行持续维护。</p>
</li>
<li><p>信任评估引擎</p>
<p>信任评估引擎是是零信任架构中实现持续信任评估能力的核心组件，和动态访问控制引擎联动，为其提供信任等级评估作为授权判定依据。</p>
<p>信任评估引擎持续接收可信代理、动态访问控制引擎的日志信息，结合身份库、权限库数据，基于大数据和人工智能技术，对身份进行持续画像，对访问行为进行持续分析，对信任进行持续评估，最终生成和维护信任库，为动态访问控制引擎提供决策依据。另外，信任评估引擎也可以接收外部安全分析平台的分析结果，包括：终端可信环境感知、持续威胁检测、态势感知等安全分析平台，这些外部风险源可以很好的补充身份分析所需的场景数据，丰富上下文，从而进行更精准的风险识别和信任评估。</p>
<p>在零信任网络里，<strong>信任引擎</strong>是对特定的网络请求或活动进行风险分析的系统组件，其职责是对网络请求及活动的风险进行<strong>数值评估</strong>，策略引擎基于这个风险评估进行进一步的授权决策，以确定是否允许此次访问请求。成熟的信任引擎除了使用静态规则，还大量采用机器学习技术来实现信任评分功能。信任引擎一般会混合使用基于规则的静态评分方法和机器学习方法。应该同时对网络代理及网络代理的构成要素（设备、用户及应用程序）进行风险评分。将这些风险评分同时传递给策略引擎，策略引擎根据具体的规则决定使用哪些评分参与授权决策。信任评分的暴露存在风险，应该不直接提供信任评分给用户，但明确标识出能提升信任评分的影响因子。信任引擎是使用历史数据的主要组件。信任评分是对系统和组件当前信任程度的量化表示，策略制定者可以基于访问资源所需的信任等级来定义策略。</p>
<p><strong>可变信任</strong>是零信任网络的一个令人兴奋的思想。传统网络策略关注的是允许哪些系统以何种方式进行访问。这种二元决策框架容易导致两类问题，一方面可能导致策略定义太严格，使用过程中需要不断进行人为调整；一方面可能导致策略定义太宽松，使安全系统事实上缺少安全断言。此外，传统的策略框架基于交互的具体细节来定义策略，这会使其不可避免地陷入类似“猫捉老鼠”的状况，总是需要根据曾经遭遇过的威胁不断调整策略。零信任模型提出了可变信任的概念，使用一个数值来代表系统组件的信任级别，然后基于这个数值编写策略，使得一条策略能够有效覆盖一定的范围，又不会因为边界条件过多而使策略复杂化。因为使用了不那么具体的细节来定义策略，并在授权判定时引入了信任评分，所以这样的授权系统能够应对新出现的威胁。零信任网络不再给网络参与者定义和分配基于二元决策的策略，而是持续监视参与者的网络活动，并据此持续更新其信任评分，然后使用这个评分作为授权策略判定的依据之一。</p>
</li>
<li><p>身份安全基础设施</p>
<p>身份基础设施是是实现零信任架构以身份为基石能力的关键支撑组件。</p>
<p>身份基础设施至少包含身份管理和权限管理功能组件，通过身份管理实现各种实体的身份化及身份生命周期管理，通过权限管理，对授权策略进行细粒度的管理和跟踪分析。</p>
<p>零信任架构的身份安全基础设施需要能满足现代IT环境下复杂、高效的管理要求，传统的静态、封闭的身份与权限管理机制已经不能满足新技术环境的要求，无法支撑企业构建零信任安全架构的战略愿景，需要足够敏捷和灵活，需要为更多新的场景和应用进行身份和权限管理。另外，为了提高管理效率，自助服务和工作流引擎等现代身份管理的关键能力也必不可少。</p>
<p>为了有效地管理网络中的信任，人们必须能够明确地识别可信信息，特别是在身份认证和身份识别的场景下。<strong>PKI</strong>是提供身份认证的最佳方法。</p>
</li>
</ul>
<h2 id="零信任案例"><a href="#零信任案例" class="headerlink" title="零信任案例"></a>零信任案例</h2><p><img src="/post/%E9%9B%B6%E4%BF%A1%E4%BB%BB/image-20210617171531839.png" alt="image-20210617171531839"></p>
<p>在这个例子中[7]，一个恶意的网络行为者通过一个基于互联网的移动代码漏洞损害了用户的设备。或者，该行为者是一个有恶意的内部授权用户。在一个典型的、非零信任的情况下，行为者使用用户的证书，列举网络，提升权限，并通过网络横向移动，破坏大量的数据存储，并最终实现持久化控制。</p>
<p>在 “零信任 “网络中，被破坏的用户的证书和设备已经被认为是恶意的，而且网络被分割，限制了枚举和横向移动的机会。虽然恶意行为者可以同时以用户和设备的身份进行认证，但对数据的访问将根据安全策略、用户角色以及用户和设备属性进行限制。在一个成熟的零信任环境中，即使用户被允许访问，数据加密和数字权利管理也可以提供额外的保护，限制哪些数据可以被访问，可以对敏感数据采取的行动。此外，还将持续监测账户、设备、网络活动和数据访问的异常活动。虽然在这种情况下仍会发生一定程度的损害，但损害是有限的，防御系统检测和启动适当的缓解反应的时间也大大减少。</p>
<h2 id="零信任和传统安全结构的区别"><a href="#零信任和传统安全结构的区别" class="headerlink" title="零信任和传统安全结构的区别"></a>零信任和传统安全结构的区别</h2><p>边界安全模型与零信任模型存在根本上的差别。边界安全模型试图在可信资源和不可信资源（本地网络和互联网）之间建一堵墙，而零信任模型则“认输”了，它接受“坏人”无处不在的现实。零信任模型不是依靠建造城墙来保护墙内柔弱的身体，而是让全体民众都拥有了自保的能力。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li>构建零信任网络并不需要太多新的技术，而是采用全新的方式使用现有技术。</li>
<li>零信任模型颠覆了传统网络安全模型，不信任任何人是零信任的核心。</li>
<li>零信任的核心是计算，这肯定会增加设备的负载；同时动态的信任评估也需要相互之间的协作。零信任之路，仍在路上。</li>
</ol>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>[1]零信任（Zero Trust）简介， <a href="https://blog.csdn.net/baidu_41700102/article/details/104314323">https://blog.csdn.net/baidu_41700102/article/details/104314323</a></p>
<p>[2]What Is Zero Trust Security?<a href="https://www.mcafee.com/enterprise/zh-cn/security-awareness/cloud/what-is-zero-trust.html">https://www.mcafee.com/enterprise/zh-cn/security-awareness/cloud/what-is-zero-trust.html</a></p>
<p>[3]零信任网络：在不可信网络中构建安全系统,【美】埃文·吉尔曼（Evan Gilman），道格·巴斯（Doug Barth）,人民邮电出版社</p>
<p>[4]国内首份零信任安全白皮书：全面解读零信任安全架构， <a href="https://www.secrss.com/articles/18624">https://www.secrss.com/articles/18624</a></p>
<p>[5]Zero Trust Architecture and Solutions, <a href="https://www.gartner.com/teamsiteanalytics/servePDF?g=/imagesrv/media-products/pdf/Qi-An-Xin/Qi-An-Xin-1-1OKONUN2.pdf">https://www.gartner.com/teamsiteanalytics/servePDF?g=/imagesrv/media-products/pdf/Qi-An-Xin/Qi-An-Xin-1-1OKONUN2.pdf</a></p>
<p>[6]Rose, S. , Borchert, O. , Mitchell, S. and Connelly, S. (2020), Zero Trust Architecture, Special Publication (NIST SP), National Institute of Standards and Technology, Gaithersburg, MD, [online], <a href="https://doi.org/10.6028/NIST.SP.800-207">https://doi.org/10.6028/NIST.SP.800-207</a>, <a href="https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=930420">https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=930420</a> (Accessed June 16, 2021)</p>
<p>[7]Embracing a Zero Trust Security Model, <a href="https://media.defense.gov/2021/Feb/25/2002588479/-1/-1/0/CSI_EMBRACING_ZT_SECURITY_MODEL_UOO115131-21.PDF">https://media.defense.gov/2021/Feb/25/2002588479/-1/-1/0/CSI_EMBRACING_ZT_SECURITY_MODEL_UOO115131-21.PDF</a></p>
<p>[8]如果土匪都懂“零信任网络”，杨子荣还能智取威虎山吗？,<a href="https://cloud.tencent.com/developer/article/1429187">https://cloud.tencent.com/developer/article/1429187</a></p>
]]></content>
      <categories>
        <category>网络空间</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode Markdown Snippet插件的使用问题备注</title>
    <url>//post/VSCode%20Markdown%20Snippet%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E5%A4%87%E6%B3%A8.html</url>
    <content><![CDATA[<h1 id="VSCode-Markdown-Snippet插件的使用问题备注"><a href="#VSCode-Markdown-Snippet插件的使用问题备注" class="headerlink" title="VSCode Markdown Snippet插件的使用问题备注"></a>VSCode Markdown Snippet插件的使用问题备注</h1><h2 id="官方给出的使用帮助"><a href="#官方给出的使用帮助" class="headerlink" title="官方给出的使用帮助"></a>官方给出的使用帮助</h2><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>
<h2 id="一个简短的示例"><a href="#一个简短的示例" class="headerlink" title="一个简短的示例"></a>一个简短的示例</h2><p><a href="https://www.jianshu.com/p/a87e9ca2d208">https://www.jianshu.com/p/a87e9ca2d208</a></p>
<p>记得在配置文件中添加相应的配置，不仅仅是相关语言的配置哦，setting中也记得</p>
<p><a href="https://blog.csdn.net/serryuer/article/details/89393760">https://blog.csdn.net/serryuer/article/details/89393760</a></p>
<h2 id="代码备注"><a href="#代码备注" class="headerlink" title="代码备注"></a>代码备注</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"hexo title"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>
		<span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token string">"---"</span><span class="token punctuation">,</span>
			<span class="token string">"title: $CLIPBOARD"</span><span class="token punctuation">,</span>
			<span class="token string">"date: $&#123;3:$CURRENT_YEAR&#125;-$&#123;4:$CURRENT_MONTH&#125;-$&#123;5:$CURRENT_DATE&#125; $&#123;6:$CURRENT_HOUR&#125;:$&#123;7:$CURRENT_MINUTE&#125;:$&#123;8:$CURRENT_SECOND&#125;"</span><span class="token punctuation">,</span>
			<span class="token comment">// "categories: $&#123;9|咨询, 编程开发, 网络空间, 学习笔记, 科普|&#125;",</span>
			<span class="token comment">// "tags: [$&#123;10:tags&#125;]",</span>
			<span class="token string">"---"</span><span class="token punctuation">,</span>
			<span class="token string">"$11"</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Front-Matter"</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>效果如下所示：</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---
title: 大家好，我是明说网络的小明同学
date: 2022-02-26 17:20:22
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>在你的hexo博客中使用nodeppt，一款迄今为止最好的网页版演示库</title>
    <url>//post/NODEPPT%E8%BF%99%E5%8F%AF%E8%83%BD%E6%98%AF%E8%BF%84%E4%BB%8A%E4%B8%BA%E6%AD%A2%E6%9C%80%E5%A5%BD%E7%9A%84%E7%BD%91%E9%A1%B5%E7%89%88%E6%BC%94%E7%A4%BA%E5%BA%93.html</url>
    <content><![CDATA[<p>大家好，我是明说网络的小明同学。</p>
<p>今天我和大家分享一个非常酷的网页PPT工具，NODEPPT</p>
<h1 id="NODEPPT这可能是迄今为止最好的网页版演示库"><a href="#NODEPPT这可能是迄今为止最好的网页版演示库" class="headerlink" title="NODEPPT这可能是迄今为止最好的网页版演示库"></a>NODEPPT这可能是迄今为止最好的网页版演示库</h1><p>一开始看到这个库的时候，我就喜欢上了。因为他效果非常的棒，而且能够非常好的和hexo结合。这样我们能够一次生成，到哪都可以演示PPT，还能配上相应的技术文档，是不是很酷啊！</p>
<h2 id="NODEPPT-Demo"><a href="#NODEPPT-Demo" class="headerlink" title="NODEPPT Demo"></a>NODEPPT Demo</h2><p>项目的演示网址在这：<a href="https://nodeppt.js.org/#slide=1">https://nodeppt.js.org/#slide=1</a></p>
<p><img src="/post/NODEPPT%E8%BF%99%E5%8F%AF%E8%83%BD%E6%98%AF%E8%BF%84%E4%BB%8A%E4%B8%BA%E6%AD%A2%E6%9C%80%E5%A5%BD%E7%9A%84%E7%BD%91%E9%A1%B5%E7%89%88%E6%BC%94%E7%A4%BA%E5%BA%93/image-20220226172518524.png" alt="image-20220226172518524"></p>
<p>主要说明了这个库包含什么样的功能</p>
<h2 id="NODE-PPT-Github"><a href="#NODE-PPT-Github" class="headerlink" title="NODE PPT Github"></a>NODE PPT Github</h2><p>官网地址：<a href="https://github.com/ksky521/nodeppt">https://github.com/ksky521/nodeppt</a></p>
<h1 id="Hexo中使用PPT-Demo"><a href="#Hexo中使用PPT-Demo" class="headerlink" title="Hexo中使用PPT Demo"></a>Hexo中使用PPT Demo</h1><p>以下是我使用官网的<a href="https://raw.githubusercontent.com/ksky521/nodeppt/master/site/index.md">demo</a>制作的一个PPT，注意它是嵌入在我这个网页中的，以下网页你可以左右滑动。</p>
<iframe src="../nodeppt/slides.html" width="100%" height="500" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe>



<p>如果你觉得这个功能很酷，想要添加到你的站点里面去，那么就和我一起往下走吧。</p>
<h2 id="如何在Hexo中添加Nodeppt"><a href="#如何在Hexo中添加Nodeppt" class="headerlink" title="如何在Hexo中添加Nodeppt"></a>如何在Hexo中添加Nodeppt</h2><p>前提，确保你的noteppt能够正常使用。这是前提，至于怎么熟练的玩好nodeppt，额…… 还是去官网吧，这里不误导人了。</p>
<p>整体的思路是，两步走：</p>
<ul>
<li>第一步先使用nodeppt在相应的public目录生成相应的文件,如html,js,img等等</li>
<li>在post中引用相应的文件</li>
</ul>
<h3 id="首先熟悉nodeppt的build方法"><a href="#首先熟悉nodeppt的build方法" class="headerlink" title="首先熟悉nodeppt的build方法"></a>首先熟悉nodeppt的build方法</h3><p>输入<code>nodeppt build --help</code></p>
<pre class="line-numbers language-none"><code class="language-none">Usage: nodeppt build [options] [entry]

build html file

Options:
  -m, --map         Release sourcemap
  -d, --dest &lt;dir&gt;  output directory
  -h, --help        output usage information
  Examples:

    nodeppt build slide.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们需要使用的就是这个<code>-d</code>参数。目的是将生成的文件放入网站的public目录下</p>
<h3 id="源文件目录说明"><a href="#源文件目录说明" class="headerlink" title="源文件目录说明"></a>源文件目录说明</h3><p>存放源文件的目录结构如下所示</p>
<pre class="line-numbers language-none"><code class="language-none">root&#x2F;public
		├──nodeppt
root&#x2F;source
├── slideshare
│   ├── another.md
│   ├── build.sh
│   ├── buildlist.txt
│   ├── makefile
│   └── slides.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>buildlist.txt 代表等待生成的ppt文件列表</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">slides.md
another.md%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><p>build.sh </p>
<p>在slideshare目录下运行本文件，作用是使用nodeppt按上面文件内容的顺序构建，输出目录为<code>public/nodeppt</code></p>
</li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">NODEPPT&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;node&#x2F;17.5.0&#x2F;bin&#x2F;nodeppt
Destination&#x3D;..&#x2F;..&#x2F;public&#x2F;nodeppt&#x2F;
build_files&#x3D;$(cat buildlist.txt | xargs)
for file in $build_files
do
    # echo $file
    $NODEPPT build .&#x2F;$file -d $Destination
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>makefile 本文件主要用于使用一个脚本完成所有的工作</li>
</ul>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token symbol">all</span><span class="token punctuation">:</span>
        bash build.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>至此，你使用在当前目录<code>make</code>就能将生成好的PPT网页放入public目录的noteppt目录中。</p>
<h3 id="那么怎么使用呢？"><a href="#那么怎么使用呢？" class="headerlink" title="那么怎么使用呢？"></a>那么怎么使用呢？</h3><p>在上一步中，我们生成了ppt文件，放在了<code>public/nodeppt/</code>中，假设文件名为<code>slides.html</code></p>
<p>那么我们可以在hexo的post中简单的使用如下命令，就可以引用我们的PPT</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../nodeppt/slides.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topFrame<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>topFrame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>需要修改的部分就是iframe中的src部分。</p>
<p>最后放下一个一键上线部署的脚本</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token symbol">all</span><span class="token punctuation">:</span>
	make nodeppt
	hexo g 
	hexo d 

<span class="token symbol">nodeppt</span><span class="token punctuation">:</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C source/slideshare/

<span class="token symbol">test</span><span class="token punctuation">:</span>
	make nodeppt
	hexo g
	hexo s

<span class="token symbol">deploy</span><span class="token punctuation">:</span>
	make nodeppt
	hexo g 
	hexo d
	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最后附上本次示例的PPT"><a href="#最后附上本次示例的PPT" class="headerlink" title="最后附上本次示例的PPT"></a>最后附上本次示例的PPT</h2><p>试试看左右滑动</p>
<iframe src="../nodeppt/use-nodeppt-in-hexo-demo.html" width="100%" height="500" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="静态压缩"><a href="#静态压缩" class="headerlink" title="静态压缩"></a>静态压缩</h2><p><a href="https://hasaik.com/posts/495d0b23.html">https://hasaik.com/posts/495d0b23.html</a></p>
<p>使用Hexo-Neat成功<a href="https://github.com/rozbo/hexo-neat">https://github.com/rozbo/hexo-neat</a></p>
<p>Hexo静态资源压缩<a href="https://www.jianshu.com/p/5e48e532ae58">https://www.jianshu.com/p/5e48e532ae58</a></p>
<p><a href="https://rye-catcher.github.io/2019/10/21/Nodeppt-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/">https://rye-catcher.github.io/2019/10/21/Nodeppt-%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/</a></p>
<p>给博客文章嵌入 PPT 演示<a href="https://hexo.fluid-dev.com/posts/hexo-nodeppt/">https://hexo.fluid-dev.com/posts/hexo-nodeppt/</a></p>
<h3 id="添加自定义网页"><a href="#添加自定义网页" class="headerlink" title="添加自定义网页"></a>添加自定义网页</h3><p><a href="https://www.jianshu.com/p/524b073f9b37">https://www.jianshu.com/p/524b073f9b37</a></p>
]]></content>
  </entry>
</search>
