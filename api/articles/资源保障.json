{"title":"Linux系统下的系统资源和网络资源控制","uid":"158651fee9d411bd24619607a126b812","slug":"资源保障","date":"2021-05-29T16:00:00.000Z","updated":"2022-02-26T04:40:08.957Z","comments":true,"path":"api/articles/资源保障.json","cover":[],"content":"<h2 id=\"今日珠宝\"><a href=\"#今日珠宝\" class=\"headerlink\" title=\"今日珠宝\"></a>今日珠宝</h2><p>宝格丽BVLGARI系列戒指</p>\n<p>18K玫瑰金材质镶嵌7颗钻石，非常经典优雅的设计风格。指圈大小63号（正品实拍）</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-a78042ef069ac261a2b24c645c26204c_720w.jpg\" alt=\"宝格丽BVLGARI系列戒指\"></p>\n<p>原文为<a href=\"https://zhuanlan.zhihu.com/p/376501404\">知乎</a>，现转移到个人博客。<br><a href=\"https://zhuanlan.zhihu.com/p/376501404\" target=\"_blank\" class=\"LinkCard\">知乎原文</a></p>\n<h1 id=\"Linux系统下的系统资源和网络资源控制\"><a href=\"#Linux系统下的系统资源和网络资源控制\" class=\"headerlink\" title=\"Linux系统下的系统资源和网络资源控制\"></a>Linux系统下的系统资源和网络资源控制</h1><p>众所周知，在互联网诞生之初都是各个高校和科研机构相互通讯，并没有网络流量控制方面的考虑和设计，IP协议的原则是尽可能好地为所有数据流服务，不同的数据流之间是平等的。然而多年的实践表明，这种原则并不是最理想的，有些数据流应该得到特别的照顾， 比如，远程登录的交互数据流应该比数据下载有更高的优先级。</p>\n<p>同样，我们希望操作系统内的资源也是不平等的，我们总是希望某些进程占用更多的资源，以满足我们当前最迫切的需求，比如看电影的时候，我们希望视频播放器更多的资源，而不希望这个时候浏览器占用过多的资源。</p>\n<p>因此细粒度的对操作系统资源的控制是我们每一个人都想做的事，自己的地盘自己做主。</p>\n<h2 id=\"限制系统资源\"><a href=\"#限制系统资源\" class=\"headerlink\" title=\"限制系统资源\"></a>限制系统资源</h2><p>在Linux上限制系统资源主要使用的工具是<code>cgroup</code>.</p>\n<p>基本语法不在赘述，相关文章很多<code>见参考资料</code>。我们想限制的系统资源主要是CPU，内存还有IO设备(例如，硬盘读写速度)。在Linux系统中，这些资源的分配和管理都由相应目录<code>/cgroup/cpu/,/cgroup/memory ,/cgroup/blkio</code>下配置。下面举例进行说明：例如你想建一个cpu控制策略，取名为<code>foo</code>,则你只需要在目录<code>/cgroup/cpu/</code>中<code>mkdir foo</code>，操作系统会为你创造一些列文件，就可以用操作文件的方式控制你的系统了。如下例：</p>\n<h3 id=\"cpu限制实例\"><a href=\"#cpu限制实例\" class=\"headerlink\" title=\"cpu限制实例\"></a><strong>cpu限制实例</strong></h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">1. [root@localhost &#x2F;]# mkdir -p &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F; \n2. [root@localhost &#x2F;]# mkdir -p &#x2F;cgroup&#x2F;cpuset&#x2F;foo&#x2F; \n3. [root@localhost &#x2F;]# echo 50000 &gt; &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F;cpu.cfs_quota_us \n4. [root@localhost &#x2F;]# echo 100000 &gt; &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F;cpu.cfs_period_us \n5. [root@localhost &#x2F;]# echo &quot;0&quot; &gt; &#x2F;cgroup&#x2F;cpuset&#x2F;foo&#x2F;cpuset.mems \n6. [root@localhost &#x2F;]# echo &quot;1&quot; &gt; &#x2F;cgroup&#x2F;cpuset&#x2F;foo&#x2F;cpuset.cpus \n7. [root@localhost &#x2F;]# echo 28819 &gt; &#x2F;cgroup&#x2F;cpu&#x2F;foo&#x2F;tasks  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"内存限制实例\"><a href=\"#内存限制实例\" class=\"headerlink\" title=\"内存限制实例\"></a><strong>内存限制实例</strong></h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">1. [root@localhost &#x2F;]# mkdir -p &#x2F;cgroup&#x2F;memory&#x2F;foo \n2. [root@localhost &#x2F;]# echo &gt; &#x2F;cgroup&#x2F;memory&#x2F;foo&#x2F;memory.limit_in_bytes \n3. [root@localhost &#x2F;]# echo 44476 &gt; &#x2F;cgroup&#x2F;memory&#x2F;foo&#x2F;tasks  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>内存参数</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cgroup.event_control       #用于eventfd的接口\nmemory.usage_in_bytes      #显示当前已用的内存\nmemory.limit_in_bytes      #设置&#x2F;显示当前限制的内存额度\nmemory.failcnt             #显示内存使用量达到限制值的次数\nmemory.max_usage_in_bytes  #历史内存最大使用量\nmemory.soft_limit_in_bytes #设置&#x2F;显示当前限制的内存软额度\nmemory.stat                #显示当前cgroup的内存使用情况\nmemory.use_hierarchy       #设置&#x2F;显示是否将子cgroup的内存使用情况统计到当前cgroup里面\nmemory.force_empty         #触发系统立即尽可能的回收当前cgroup中可以回收的内存\nmemory.pressure_level      #设置内存压力的通知事件，配合cgroup.event_control一起使用\nmemory.swappiness          #设置和显示当前的swappiness\nmemory.move_charge_at_immigrate #设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去\nmemory.oom_control         #设置&#x2F;显示oom controls相关的配置\nmemory.numa_stat           #显示numa相关的内存<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</blockquote>\n<h3 id=\"IO限制实例\"><a href=\"#IO限制实例\" class=\"headerlink\" title=\"IO限制实例\"></a><strong>IO限制实例</strong></h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">1. [root@localhost ~]# mkdir -p &#x2F;cgroup&#x2F;blkio&#x2F;foo \n2. [root@localhost ~]# echo &#39;8:0  10485760&#39; &gt; &#x2F;cgroup&#x2F;blkio&#x2F;foo&#x2F;blkio.throttle.read_bps_device \n3. [root@localhost ~]# echo 45033 &gt; &#x2F;cgroup&#x2F;blkio&#x2F;foo&#x2F;tasks \n#  注2：8:0对应主设备号和副设备号，可以通过ls -l &#x2F;dev&#x2F;sda查看<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"一个限制内存和CPU的具体例子\"><a href=\"#一个限制内存和CPU的具体例子\" class=\"headerlink\" title=\"一个限制内存和CPU的具体例子\"></a>一个限制内存和CPU的具体例子</h3><p>之前在学习cgroup的时候，较多的都是减少原理和一些简单的例子，但这对直观的取理解cgroup还是有点障碍，所以学习的过程中，参考他人的博客结合自己的理解写了一个例子，供大家参考。</p>\n<p>例子分为两个部分</p>\n<h4 id=\"0x01-被限制应用\"><a href=\"#0x01-被限制应用\" class=\"headerlink\" title=\"0x01 被限制应用\"></a>0x01 被限制应用</h4><p>被限制应用是一个CPU消耗型，具体见下面代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接编译，假如这里编译出的程序名为<code>deadloop</code>, <code>top</code>查看如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     \n31404 root  20   0    4220    656    588 R  98.7  0.0   8:45.27 deadloop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"0x02-限制规则\"><a href=\"#0x02-限制规则\" class=\"headerlink\" title=\"0x02 限制规则\"></a>0x02 限制规则</h4><p>这里我们做两个方面的工作：限制CPU使用率和限制内存。具体代码如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 增加规则代码\n#!&#x2F;bin&#x2F;bash\n# 规则集合在testdead\ngname&#x3D;&#39;testdead&#39;\nvalue&#x3D;50000\nprog&#x3D;$1\nmem_val&#x3D;1024000\n\nrmdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$&#123;gname&#125;;\nrmdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname;\n\nmkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$gname;\nmkdir &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname;\n\necho $value | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$gname&#x2F;cpu.cfs_quota_us;\necho $mem_val | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname&#x2F;memory.limit_in_bytes;\n\nfor x in $(pidof $prog)\ndo \n\techo $x  | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;$gname&#x2F;tasks;\n\techo $x | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname&#x2F;tasks\n\n\techo 0 | sudo tee &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;$gname&#x2F;memory.swappiness\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 删除规则代码\n#!&#x2F;bin&#x2F;bash\n\ndname&#x3D;testdead\n\ncgdelete cpu:$dname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述规则应用后，<code>top</code>查看如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">31404 root  20   0    4220    656    588 R  49.8  0.0   8:08.46 deadloop   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可以看出，两次的CPU使用率不一样，显示出了cgroup的限制效果。</p>\n<h2 id=\"限制网络资源\"><a href=\"#限制网络资源\" class=\"headerlink\" title=\"限制网络资源\"></a>限制网络资源</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>Linux操作系统中，报文分组从输入网卡(入口)接收进来，经过路由的查找， 以确定是发给本机的，还是需要转发的。如果是发给本机的，就直接向上递交给上层的协议，比如TCP，如果是转发的， 则会从输出网卡(出口)发出。网络流量的控制通常发生在输出网卡处。虽然在路由器的入口处也可以进行流量控制，Linux也具有相关的功能， 但一般说来， 由于我们无法控制自己网络之外的设备， 入口处的流量控制相对较难。本文将集中介绍出口处的流量控制。</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><p>流量控制（<code>Traffic Control</code>， <code>tc</code>）是<code>Linux</code>内核提供的流量限速、整形和策略控制机制。它以<code>qdisc-class-filter</code>的树形结构来实现对流量的分层控制</p>\n<p>在Linux中，流量控制都是通过TC这个工具来完成的。通常， 要对网卡进行流量控制的配置，需要进行如下的步骤:</p>\n<ul>\n<li><p>为网卡配置一个队列;</p>\n</li>\n<li><p>在该队列上建立分类;</p>\n</li>\n<li><p>根据需要建立子队列和子分类;</p>\n</li>\n<li><p>为每个分类建立过滤器。</p>\n</li>\n</ul>\n<p><img src=\"/post/%E8%B5%84%E6%BA%90%E4%BF%9D%E9%9A%9C/tc2.jpeg\" alt=\"Traffic Control\"></p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><p>从上图中可以看到，tc由<code>qdisc</code>、<code>fitler</code>和<code>class</code>三部分组成：</p>\n<ul>\n<li><p><code>qdisc</code>通过队列将数据包缓存起来，用来控制网络收发的速度</p>\n<ul>\n<li>常见的classless qdisc有：choke, codel, p&#x2F;bfifo,fq, fq_codel, gred, hhf, ingress,mqprio, multiq, netem, pfifo_fast, pie, red, rr, sfb, sfq, tbf。linux默认使用的就是fifo_fast。</li>\n<li>常见的classful qdisc有：ATM, CBQ, DRR, DSMARK, HFSC, HTB, PRIO, QFQ</li>\n</ul>\n</li>\n<li><p><code>class</code>用来表示控制策略</p>\n<ul>\n<li><p>分类只存在于可分类排队规则（classful qdisc）（例如，HTB和CBQ）中。</p>\n</li>\n<li><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>default</strong> 这是HTB排队规则的一个可选参数，默认值为0， 当值为0时意味着会绕过所有和rootqdisc相关联的分类，然后以最大的速度出队任何未分类的流量。 </p>\n<p><strong>rate</strong> 这个参数用来设置流量发送的最小期望速率。这个速率可以被当作承诺信息速率(CIR), 或者给某个叶子分类的保证带宽。 </p>\n<p><strong>ceil</strong> 这个参数用来设置流量发送的最大期望速率。租借机制将会决定这个参数的实际用处。 这个速率可以被称作“突发速率”。 </p>\n<p><strong>burst</strong> 这个参数是rate桶的大小(参见令牌桶这一节)。HTB将会在更多令牌到达之前将burst个字节的数据包出队。 </p>\n<p><strong>cburst</strong> 这个参数是ceil桶的大小（参见令牌桶这一节）。HTB将会更多令牌(ctoken)到达之前将cburst个字节的数据包出队。 </p>\n<p><strong>quantum</strong> 这个是HTB控制租借机制的关键参数。正常情况下，HTB自己会计算合适的quantum值，而不是由用户来设定。对这个值的轻微调整都会对租借和整形造成巨大的影响，因为HTB不仅会根据这个值向各个子分类分发流量(速率应高于rate，小于ceil)，还会根据此值输出各个子分类中的数据。 </p>\n<p><strong>r2q</strong> 通常,quantum 的值由HTB自己计算，用户可以通过此参数设置一个值来帮助HTB为某个分类计算一个最优的quantum值。</p></blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>filter</code>用来将数据包划分到具体的控制策略中</p>\n<ul>\n<li>包含了一个分类器实现，常见的分类器如u32，u32分类器可以允许用户基于数据包的属性来选择数据包。</li>\n</ul>\n</li>\n</ul>\n<p>语法不再赘述，相关参考资料里有。</p>\n<h3 id=\"入流量调度\"><a href=\"#入流量调度\" class=\"headerlink\" title=\"入流量调度\"></a>入流量调度</h3><p>Linux中的QoS分为入口(Ingress)部分和出口(Egress)部分，入口部分主要用于进行入口流量限速(policing)，出口部分主要用于队列调度(queuing scheduling)。</p>\n<p>大多数排队规则(qdisc)都是用于输出方向的，输入方向只有一个排队规则，即ingress qdisc。ingress qdisc本身的功能很有限，但可用于重定向incoming packets。通过Ingress qdisc把输入方向的数据包重定向到虚拟设备ifb，而ifb的输出方向可以配置多种qdisc，就可以达到对输入方向的流量做队列调度的目的。</p>\n<p><img src=\"/post/%E8%B5%84%E6%BA%90%E4%BF%9D%E9%9A%9C/1354528849_1019.png\" alt=\"输入流量调度示意\"></p>\n<p>IFB说明：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>IFB — Intermediate Functional Block device。<br>Q: How can we use qdisc (e.g., netem) on incoming traffic?<br>A: You need to use IFB. This network device allows attaching queueing disciplines to incoming packets.<br>To use an IFB, you must have IFB support in your kernel (configuration option CONFIG_IFB). Assuming that you have a modular kernel, the name of the IFB module is ifb and may be loaded using the command <code>modprobe ifb</code> (if you have modprobe installed) or <code>insmod /path/to/module/ifb</code>.</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ip link set ifb0 up\nip link set ifb1 up<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>By default, two IFB devices(ifb0 and ifb1) are created.<br>IFB allows for queueing incoming traffic for shaping instead of dropping.</p>\n<p>参考资料:<a href=\"https://blog.csdn.net/eydwyz/article/details/53392227\">https://blog.csdn.net/eydwyz/article/details/53392227</a></p></blockquote>\n<h3 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;bash\n#fb驱动并创建ifb网卡(使用ifconfig -a 如果看到已有则无需该步骤)\n#分别为出设备和入设备\noutdevice&#x3D;ens33\nindevice&#x3D;ifb0\n\nmodprobe ifb numifbs&#x3D;1\n# up网卡\nip link set dev $indevice up\n\n# ------\n\t# 清除原有的根队列(根据实际情况操作,非必要) \n\ttc qdisc del dev $outdevice root 2&gt;&#x2F;dev&#x2F;null\n\ttc qdisc del dev $outdevice ingress 2&gt;&#x2F;dev&#x2F;null\n\ttc qdisc del dev $indevice root 2&gt;&#x2F;dev&#x2F;null\n \n\t#  将$outdevice的ingress流量全部重定向到 $indevice 处理\n\ttc qdisc add dev $outdevice handle ffff: ingress\n\ttc filter add dev $outdevice parent ffff: protocol ip u32 match u32 0 0 action mirred egress redirect dev $indevice\n\t \n\t# $outdevice的出向限速:$outdevice添加根队列,使用htb,添加1:1类,使用htb \n\ttc qdisc add dev $outdevice root handle 1: htb r2q 625 default 65\n\ttc class add dev $outdevice parent 1: classid 1:1 htb rate 1000Mbit\n\t \n\t# $outdevice的入向限速:$indevice添加根队列,使用htb,添加1:1类,使用htb \n\ttc qdisc add dev $indevice root handle 1: htb r2q 625 default 65\n\ttc class add dev $indevice parent 1: classid 1:1 htb rate 1000Mbit\n\t \n\t# $outdevice的出向限速:$outdevice设备添加子类\\对应的filter配置规则和子类的队列\n\ttc class add dev $outdevice parent 1:1 classid 1:10 htb rate 10Mbit\n\ttc filter add dev $outdevice parent 1: protocol all prio 1 u32 match ip dst 192.168.0.2 classid 1:10\n\ttc qdisc add dev $outdevice parent 1:10 handle 10: sfq\n\t \n\t# $outdevice的出向限速:$outdevice设备添加子类\\对应的filter配置规则和子类的队列 \n\ttc class add dev $outdevice parent 1:1 classid 1:11 htb rate 20Mbit\n\ttc filter add dev $outdevice parent 1: protocol all prio 1 u32 match ip dst 192.168.0.3 classid 1:11\n\ttc qdisc add dev $outdevice parent 1:11 handle 11: sfq\n\t \n\t \n\t# $outdevice的入向限速:$indevice设备添加子类\\对应的filter配置规则和子类的队列\n\ttc class add dev $indevice parent 1:1 classid 1:10 htb rate 10Mbit\n\ttc filter add dev $indevice parent 1: protocol all prio 1 u32 match ip src 192.168.0.2 classid 1:10\n\ttc qdisc add dev $indevice parent 1:10 handle 10: sfq\n\t \n\t \n\t# $outdevice的入向限速:$indevice设备添加子类\\对应的filter配置规则和子类的队列 \n\ttc class add dev $indevice parent 1:1 classid 1:11 htb rate 20Mbit\n\ttc filter add dev $indevice parent 1: protocol all prio 1 u32 match ip src 192.168.0.3 classid 1:11\n\ttc qdisc add dev $indevice parent 1:11 handle 11: sfq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"网络压力测试\"><a href=\"#网络压力测试\" class=\"headerlink\" title=\"网络压力测试\"></a>网络压力测试</h3><p>压力测试工具使用<code>iperf网络测试工具</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>常用参数指南（详见附录）：</p>\n<p>-c&#x2F;s：客户端模式&#x2F;服务端模式</p>\n<p>-p：指定iperf测试端口</p>\n<p>-i：指定报告间隔</p>\n<p>-b：设置UDP的发送带宽，单位bit&#x2F;s</p>\n<p>-t：设置测试的时长，单位为秒，不设置默认10s</p>\n<p>-l：指定包大小，TCP默认8k，UDP默认1470字节</p></blockquote>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 针对TCP进行带宽性能测试\n#服务端命令：\niperf -s -i 1 -p 3389\n#\niperf -c 192.168.158.128 -p 3389 -i 1\n\n#针对UDP进行带宽性能测试\n#服务端命令\niperf -u -s -i 1 -p 3389\n#客户端命令\niperf -u -c 192.168.158.128 -p 3389 -b 1500M -i 1 \n# 参考资料：iperf网络测试工具， https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1688469<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>带宽查看使用工具<code>iftop</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre><code>TX：发送流量\nRX：接收流量\nTOTAL：总流量\nCumm：运行iftop到目前时间的总流量\npeak：流量峰值\nrates：分别表示过去 2s 10s 40s 的平均流量\n</code></pre></blockquote>\n<p>执行脚本前后，对于网络带宽进行检测，发现流量带宽明显受到TC的控制。实验成功。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文通过对Linux操作系统中<code>cgroup</code>、<code>tc</code>的使用，实现了对Linux操作系统中系统资源和网络资源的控制。本文的方法和工具在写作过程中可能还有用到，但是没有写进来的，欢迎大家留言或通过微信公众号联系我，我会尽力为大家解答。</p>\n<h2 id=\"其他补充\"><a href=\"#其他补充\" class=\"headerlink\" title=\"其他补充\"></a>其他补充</h2><h3 id=\"如何获取进程ID\"><a href=\"#如何获取进程ID\" class=\"headerlink\" title=\"如何获取进程ID\"></a>如何获取进程ID</h3><h4 id=\"根据进程名称获取pid\"><a href=\"#根据进程名称获取pid\" class=\"headerlink\" title=\"根据进程名称获取pid\"></a>根据进程名称获取pid</h4><p> 最简单的方法是使用 <strong>pidof</strong> 命令，用法：pidof  process_name，例如：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 查看初始进程的pid\npidof init\n# <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有事可能因为同一个名称的程序启动了多个进程，使用pidof时会返回多个pid，使用空格分开</p>\n<h4 id=\"查找当前激活状态的网络链接及进程ID\"><a href=\"#查找当前激活状态的网络链接及进程ID\" class=\"headerlink\" title=\"查找当前激活状态的网络链接及进程ID\"></a>查找当前激活状态的网络链接及进程ID</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lsof -i -n（不反向解析DNS）\n# eg\nlsof -i -n | awk   &#39;&#123;print $2, $9&#125;&#39;\n# 输出为\n#PID NAME\n#29646 192.168.153.129:51044-&gt;13.250.177.223:https\n#29646 192.168.153.129:52970-&gt;54.149.208.57:https\n\nlsof -i -n -P  | awk &#39;&#123;print $1, $2,$5,$9&#125;&#39;\n# 输出时，不解析端口，应该将https-&gt;443<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>Linux 资源隔离机制 – CGroup <a href=\"https://zhuanlan.zhihu.com/p/47590418\">https://zhuanlan.zhihu.com/p/47590418</a></p>\n<p><a href=\"https://www.cnblogs.com/caoxiaojian/p/5633430.html\">CGroup 介绍、应用实例及原理描述</a> <a href=\"https://www.cnblogs.com/caoxiaojian/p/5633430.html\">https://www.cnblogs.com/caoxiaojian/p/5633430.html</a></p>\n<p>流量控制 <a href=\"https://tonydeng.github.io/sdn-handbook/linux/tc.html\">https://tonydeng.github.io/sdn-handbook/linux/tc.html</a></p>\n<p>Traffic Control HOWTO <a href=\"https://tldp.org/HOWTO/Traffic-Control-HOWTO/\">https://tldp.org/HOWTO/Traffic-Control-HOWTO/</a></p>\n<p>Linux TC(Traffic Control)框架原理解析， <a href=\"https://blog.csdn.net/dog250/article/details/40483627\">https://blog.csdn.net/dog250/article/details/40483627</a></p>\n<p> <a href=\"https://www.cnblogs.com/yulia/p/10346339.html\">linux下使用tc(Traffic Control) 流量控制命令模拟网络延迟和丢包</a></p>\n<p>TC流量控制 <a href=\"https://blog.csdn.net/who538592/article/details/79483323\">https://blog.csdn.net/who538592/article/details/79483323</a></p>\n","text":"今日珠宝宝格丽BVLGARI系列戒指 18K玫瑰金材质镶嵌7颗钻石，非常经典优雅的设计风格。指圈大小63号（正品实拍） 原文为知乎，现转移到个人博客。知乎原文 Linux系统下的系统资源和网络资源控制众所周知，在互联网诞生之初都是各个高校和科研机构相互通讯，并没有网络流量控制方面...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"学习","slug":"学习","count":2,"path":"api/categories/学习.json"}],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"},{"name":"系统管理","slug":"系统管理","count":1,"path":"api/tags/系统管理.json"},{"name":"网络管理","slug":"网络管理","count":1,"path":"api/tags/网络管理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8A%E6%97%A5%E7%8F%A0%E5%AE%9D\"><span class=\"toc-text\">今日珠宝</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E5%92%8C%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">Linux系统下的系统资源和网络资源控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%90%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">限制系统资源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cpu%E9%99%90%E5%88%B6%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">cpu限制实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">内存限制实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IO%E9%99%90%E5%88%B6%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">IO限制实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E9%99%90%E5%88%B6%E5%86%85%E5%AD%98%E5%92%8CCPU%E7%9A%84%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">一个限制内存和CPU的具体例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#0x01-%E8%A2%AB%E9%99%90%E5%88%B6%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">0x01 被限制应用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#0x02-%E9%99%90%E5%88%B6%E8%A7%84%E5%88%99\"><span class=\"toc-text\">0x02 限制规则</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%90%E5%88%B6%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">限制网络资源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">相关概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90\"><span class=\"toc-text\">基本组成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E6%B5%81%E9%87%8F%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">入流量调度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">一个例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">网络压力测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">其他补充</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8BID\"><span class=\"toc-text\">如何获取进程ID</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E8%BF%9B%E7%A8%8B%E5%90%8D%E7%A7%B0%E8%8E%B7%E5%8F%96pid\"><span class=\"toc-text\">根据进程名称获取pid</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E6%BF%80%E6%B4%BB%E7%8A%B6%E6%80%81%E7%9A%84%E7%BD%91%E7%BB%9C%E9%93%BE%E6%8E%A5%E5%8F%8A%E8%BF%9B%E7%A8%8BID\"><span class=\"toc-text\">查找当前激活状态的网络链接及进程ID</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%EF%BC%9A\"><span class=\"toc-text\">参考资料：</span></a></li></ol>","author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}},"mapped":true,"prev_post":{"title":"互联网发展简史(1)ARPANET的建立","uid":"8d4902c1935b049d5d1f9b7dd1b3e316","slug":"互联网发展简史(1)","date":"2021-05-29T16:00:00.000Z","updated":"2022-02-27T03:31:33.352Z","comments":true,"path":"api/articles/互联网发展简史(1).json","cover":[],"text":"原文为知乎，现转移到个人博客。知乎原文 原文为微信公众号原文，现转移到个人博客。微信公众号原文 [toc]摘要：冷战初期，为了对抗苏联的太空计划，美国成立了ARPA来研发高新技术，以制衡苏联。ARPANET作为ARPA的一项计算机网研究项目，不经意间孕育了风靡世界的互联网。 20...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"总结","slug":"总结","count":5,"path":"api/categories/总结.json"}],"tags":[{"name":"互联网","slug":"互联网","count":5,"path":"api/tags/互联网.json"},{"name":"历史","slug":"历史","count":5,"path":"api/tags/历史.json"}],"author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}}},"next_post":{"title":"区块链中的密码学知识","uid":"4d9d98482a8c5e3d334a143c492b338d","slug":"区块链中的密码学知识","date":"2021-05-27T16:00:00.000Z","updated":"2022-02-26T04:40:08.089Z","comments":true,"path":"api/articles/区块链中的密码学知识.json","cover":[],"text":"原文为知乎，现转移到个人博客。知乎原文转发微信公众号文章微信公众号原文 Table of Contents BitCoin是什么 密码学是什么 BitCoin中的密码学知识1. 哈希(Hash) 2. 公钥密码体制 总结 Reference BitCoin是什么BitCoin，又...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"学习","slug":"学习","count":2,"path":"api/categories/学习.json"}],"tags":[{"name":"比特币","slug":"比特币","count":1,"path":"api/tags/比特币.json"},{"name":"区块链","slug":"区块链","count":1,"path":"api/tags/区块链.json"},{"name":"密码学","slug":"密码学","count":1,"path":"api/tags/密码学.json"}],"author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}}}}