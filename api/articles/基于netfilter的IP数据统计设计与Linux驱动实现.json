{"title":"基于netfilter的IP数据统计设计","uid":"8ba16520bf2f9f2afc20dc140f78edc0","slug":"基于netfilter的IP数据统计设计与Linux驱动实现","date":"2022-02-26T04:40:08.436Z","updated":"2022-02-27T16:07:50.730Z","comments":true,"path":"api/articles/基于netfilter的IP数据统计设计与Linux驱动实现.json","cover":null,"content":"<h1 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h1><ol>\n<li><a href=\"#orgab76e7a\">背景</a></li>\n<li><a href=\"#org02ac451\">IP信息统计</a><ol>\n<li><a href=\"#org62d4d73\">统计信息设计</a></li>\n<li><a href=\"#org44f97b2\">存储数据结构</a></li>\n</ol>\n</li>\n<li><a href=\"#orgde188bf\">Linux驱动</a><ol>\n<li><a href=\"#orgc0bb933\">网络型驱动设备</a></li>\n<li><a href=\"#org9e48264\">字符型设备</a></li>\n<li><a href=\"#org8ee7f64\">用户代码</a></li>\n</ol>\n</li>\n<li><a href=\"#org3f4753d\">总结</a><ol>\n<li><a href=\"#org01bad05\">Linux 驱动</a></li>\n<li><a href=\"#orgd1e6a5e\">Linux内核</a></li>\n<li><a href=\"#org4c6ff33\">其他</a></li>\n</ol>\n</li>\n<li><a href=\"#orgfe8069d\">参考资料</a></li>\n</ol>\n<p><a id=\"orgab76e7a\"></a></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>当今社会，没有都有自己的信息处理设备，如手机、计算机甚至可能是路由器。在使用这些设备的时候，我们想知道的一件事就是，我的电脑和那些设备有过通信，通信情况怎么样，以便在网络出现问题，如拥塞，或是自己主机被黑客控制出现异常数据的时候，能够通过上述统计信息快速定位问题所在。因此本文通过Linux驱动中的netfilter对IP数据报中的IP信息进行统计，通过字符型驱动实现用户态查看统计信息，达到了统计主机通信的目的，为进一步做好异常处理打下了基础。</p>\n<p><a id=\"org02ac451\"></a></p>\n<h1 id=\"IP信息统计\"><a href=\"#IP信息统计\" class=\"headerlink\" title=\"IP信息统计\"></a>IP信息统计</h1><p><a id=\"org62d4d73\"></a></p>\n<h2 id=\"统计信息设计\"><a href=\"#统计信息设计\" class=\"headerlink\" title=\"统计信息设计\"></a>统计信息设计</h2><p>统计对象为源IP地址，信息内容目前设计为：IP出现频次，最后一个IP数据包出现时的时间戳。</p>\n<pre><code>typedef struct IPData&#123;\n  int timestamp;\n  int count\n&#125;ipdata;\n</code></pre>\n<p><a id=\"org44f97b2\"></a></p>\n<h2 id=\"存储数据结构\"><a href=\"#存储数据结构\" class=\"headerlink\" title=\"存储数据结构\"></a>存储数据结构</h2><p>由于在Linux Kernel中没有C++的set，map等数据结构，因此使用其提供的红黑树实现IP信息的快速存储和读取。其中红黑树节点的信息如下所示：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">   <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">roc_node_s</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_node</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>\n    ipdata ipcount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>红黑树的实现使用Linux Kernel自带的rbtree数据结构，头文件为：</p>\n<pre><code>#include &lt;linux/rbtree.h&gt;\n</code></pre>\n<p>红黑树插入，删除等代码参考链接为：<a href=\"https://blog.csdn.net/chn475111/article/details/52594457\">https://blog.csdn.net/chn475111/article/details/52594457</a>.</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/**\n * filename: my_rbtree.h\n * @author lijk@.infosec.com.cn\n * @version 0.0.1\n * @date 2016-9-20 11:52:06\n */</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/rbtree.h></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">IPData</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> timestamp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> count\n<span class=\"token punctuation\">&#125;</span>ipdata<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">roc_node_s</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_node</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>\n    ipdata ipcount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>roc_cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">roc_node_t</span><span class=\"token operator\">*</span> <span class=\"token function\">roc_search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_root</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_node</span> <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>rb_node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">rb_entry</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> key <span class=\"token operator\">-</span> data<span class=\"token operator\">-></span>key<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>rb_left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>rb_right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">roc_insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_root</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_node</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>new <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rb_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>new<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>this <span class=\"token operator\">=</span> <span class=\"token function\">rb_entry</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>new<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> data<span class=\"token operator\">-></span>key <span class=\"token operator\">-</span> this<span class=\"token operator\">-></span>key<span class=\"token punctuation\">;</span>\n\n        parent <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>new<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            new <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>new<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rb_left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            new <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>new<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>rb_right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">rb_link_node</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token operator\">-></span>node<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rb_insert_color</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token operator\">-></span>node<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">roc_erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_root</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> roc_cb cb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">roc_search</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">rb_erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token operator\">-></span>node<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">RB_CLEAR_NODE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>data<span class=\"token operator\">-></span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">roc_destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_root</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> roc_cb cb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>pos <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_node</span> <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span> <span class=\"token function\">rb_first</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        pos <span class=\"token operator\">=</span> <span class=\"token function\">rb_entry</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_DEBUG</span></span>\n        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token string\">\"key = %d\\n\"</span><span class=\"token punctuation\">,</span> pos<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n        <span class=\"token function\">rb_erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pos<span class=\"token operator\">-></span>node<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">RB_CLEAR_NODE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pos<span class=\"token operator\">-></span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">roc_dump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_root</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_node</span> <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> sip<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//printk(\"roc_dump\");</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> MAX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span> <span class=\"token function\">rb_first</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> MAX_SIZE <span class=\"token operator\">&amp;&amp;</span> node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> node <span class=\"token operator\">=</span> <span class=\"token function\">rb_next</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n  sip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">rb_entry</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>key <span class=\"token punctuation\">;</span>   \n  count <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">rb_entry</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ipcount<span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">;</span>   \n  timestamp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">rb_entry</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ipcount<span class=\"token punctuation\">.</span>timestamp <span class=\"token punctuation\">;</span>  \n  <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s%d.%d.%d.%d|%d|%d,\"</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">,</span> <span class=\"token function\">NIPQUAD</span><span class=\"token punctuation\">(</span> sip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//printk(message);</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">roc_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">roc_node_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>ctx<span class=\"token punctuation\">)</span> <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rb_root</span> root <span class=\"token operator\">=</span> RB_ROOT<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> loop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">roc_node_t</span> <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>loop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> loop <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> loop <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">roc_node_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">roc_node_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> GFP_KERNEL <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>ctx <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> loop<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">roc_insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>loop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> loop <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> loop <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">roc_erase</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">,</span> roc_free<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n    <span class=\"token function\">roc_dump</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">roc_destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">,</span> roc_free<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a id=\"orgde188bf\"></a></p>\n<h1 id=\"Linux驱动\"><a href=\"#Linux驱动\" class=\"headerlink\" title=\"Linux驱动\"></a>Linux驱动</h1><p>考虑在内核实现的原因是目前Linux相关设备非常多，可能具有一定的参考价值和移植性。<br>笔者的内核环境为：</p>\n<pre><code>  uname -r\n4.15.0-142-generic\n</code></pre>\n<p><a id=\"orgc0bb933\"></a></p>\n<h2 id=\"网络型驱动设备\"><a href=\"#网络型驱动设备\" class=\"headerlink\" title=\"网络型驱动设备\"></a>网络型驱动设备</h2><p>netfilter的相关参考资料为：Linnux5.0.0下，基于Netlink与NetFilter对本机数据包进行筛选监控,<a href=\"https://blog.csdn.net/qq_40758751/article/details/105117750\">https://blog.csdn.net/qq_40758751/article/details/105117750</a> , netfilter数据包过滤, <a href=\"https://blog.csdn.net/specialsun/article/details/84695519\">https://blog.csdn.net/specialsun/article/details/84695519</a><br>因为本文为源Ip数据包信息统计，所以netfilter hook的层级在NF<sub>INET</sub><sub>LOCAL</sub><sub>IN</sub>.<br>Hook 函数为filter<sub>http</sub>(忽略函数名，粘贴过来，不想改了).</p>\n<p><a id=\"org9e48264\"></a></p>\n<h2 id=\"字符型设备\"><a href=\"#字符型设备\" class=\"headerlink\" title=\"字符型设备\"></a>字符型设备</h2><p>内核态数据在用户态访问需要通过字符型设备驱动进行。因此建立一个字符型设备&#x2F;dev&#x2F;IPDataSet 使得用户态能够访问内核 态的数据信息。<br>参考资料：ubuntu 添加字符设备驱动程序, <a href=\"https://blog.csdn.net/ARAFATms/article/details/79397800\">https://blog.csdn.net/ARAFATms/article/details/79397800</a><br>因为上述驱动需要自己手动添加字符设备，所以通过以下方法自动添加设备节点。<br>参考资料：linux驱动：自动创建设备节点, <a href=\"https://blog.csdn.net/u012247418/article/details/83684029\">https://blog.csdn.net/u012247418/article/details/83684029</a></p>\n<pre><code>// filename: filter_ip.c\n#ifndef __KERNEL__\n#define __KERNEL__\n#endif  /* __KERNEL__ */\n\n#include &lt;linux/module.h&gt;\n#include &lt;linux/init.h&gt;\n#include &lt;linux/types.h&gt;\n#include &lt;linux/string.h&gt;\n//#include &lt;asm/uaccess.h&gt;\n#include &lt;linux/netdevice.h&gt;\n#include &lt;linux/netfilter_ipv4.h&gt;  // ip4 netfilter,ipv6则需引入相应 linux/netfilter_ipv6.h\n#include &lt;linux/ip.h&gt;\n#include &lt;linux/tcp.h&gt;\n#include &lt;linux/sched.h&gt;\n#include &quot;linux/kernel.h&quot;\n#include &quot;linux/fs.h&quot;\n#include &quot;linux/errno.h&quot;\n#include &quot;linux/uaccess.h&quot;\n#include &quot;linux/kdev_t.h&quot;\n#include &lt;linux/device.h&gt;\n#include &lt;linux/time.h&gt;\n\n#define NIPQUAD(addr) \\  \n((unsigned char *)&amp;addr)[0], \\  \n((unsigned char *)&amp;addr)[1], \\  \n((unsigned char *)&amp;addr)[2], \\  \n((unsigned char *)&amp;addr)[3]  \n\n#define MAX_SIZE 1024 * 1024 * 8\nchar message[MAX_SIZE] = &quot;&quot;;  //打开设备时会显示的消息\n#include &quot;my_rbtree.h&quot;\n\nstruct rb_root root = RB_ROOT;\nint insert(int key, int timestamp)\n&#123;\n\n  roc_node_t *node = NULL;\n  node = roc_search(&amp;root, key);\n  if(node != NULL) &#123;\n    node-&gt;ipcount.count++;\n    node-&gt;ipcount.timestamp = timestamp;\n    return 1;\n  &#125;\n  node = (roc_node_t*)kmalloc(sizeof(roc_node_t), GFP_KERNEL );\n  node-&gt;ctx = NULL;\n  node-&gt;key = key;\n  node-&gt;ipcount.count = 1;\n  node-&gt;ipcount.timestamp = timestamp;\n  return roc_insert(&amp;root, node);\n\n&#125;\n\nstruct timeval time;\n// 过滤http数据包\nunsigned int filter_http(char *type,struct sk_buff *pskb)\n&#123;\n  __be32 sip,dip;\n  int retval = NF_ACCEPT;\n  int ret, ms;\n  struct sk_buff *skb = pskb;\n\n  struct iphdr *iph = ip_hdr(skb);  // 获取ip头\n\n  sip = iph-&gt;saddr;  \n  dip = iph-&gt;daddr;  \n  //printk(&quot;Packet for source address: %d.%d.%d.%d destination address: %d.%d.%d.%d\\n&quot;, NIPQUAD(sip), NIPQUAD(dip));  \n\n  //sprintf(message, &quot;Packet for source address: %d.%d.%d.%d destination address: %d.%d.%d.%d\\n&quot;, NIPQUAD(sip), NIPQUAD(dip));\n\n\n  do_gettimeofday(&amp;time);  /*第一次去获取时间*/  ms = time.tv_sec * 1000 + time.tv_usec / 1000;  ret = insert(sip, ms);  //if(ret == 1)&#123;      roc_dump(&amp;root);  printk(message);  //&#125;  return retval;&#125;\n\n\nunsigned int NET_HookLocalIn(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return filter_http(&quot;in&quot;,pskb);&#125;\n\n\nunsigned int NET_HookLocalOut(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  //return filter_http(&quot;out&quot;,pskb);  return NF_ACCEPT;&#125;\n\n\n\nunsigned int NET_HookPreRouting(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return NF_ACCEPT;&#125;\n\n\n\n\n\nunsigned int NET_HookPostRouting(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return NF_ACCEPT;&#125;\n\n\nunsigned int NET_HookForward(void *priv,     struct sk_buff *pskb,     const struct nf_hook_state *state)&#123;  return NF_ACCEPT;&#125;\n\n\n// 钩子数组static struct nf_hook_ops net_hooks[] = &#123;  &#123;    .hook         = NET_HookLocalIn,        // 发往本地数据包    .pf            = PF_INET,    .hooknum    =    NF_INET_LOCAL_IN,    .priority    = NF_IP_PRI_FILTER-1,  &#125;,  &#123;    .hook         = NET_HookLocalOut,        // 本地发出数据包    .pf            = PF_INET,    .hooknum    =    NF_INET_LOCAL_OUT,    .priority    = NF_IP_PRI_FILTER-1,  &#125;,  &#123;    .hook         = NET_HookForward,        // 转发的数据包    .pf            = PF_INET,    .hooknum    =    NF_INET_FORWARD,    .priority    = NF_IP_PRI_FILTER-1,  &#125;,  &#123;    .hook        = NET_HookPreRouting,    // 进入本机路由前        .pf            = PF_INET,                    .hooknum    = NF_INET_PRE_ROUTING,            .priority    = NF_IP_PRI_FILTER-1,          &#125;,  &#123;    .hook        = NET_HookPostRouting,    // 本机发出包经路由后        .pf            = PF_INET,                    .hooknum    = NF_INET_POST_ROUTING,            .priority    = NF_IP_PRI_FILTER-1,          &#125;,&#125;;\n\n\nint my_open(struct inode *inode, struct file *file);int my_release(struct inode *inode, struct file *file);ssize_t my_read(struct file *file, char __user *user, size_t t, loff_t *f);ssize_t my_write(struct file *file, const char __user *user, size_t t, loff_t *f);char* devName = &quot;IPDataSet&quot;;//设备名struct file_operations pStruct =&#123; open:my_open,      release:my_release,      read:my_read,      write:my_write, &#125;;//打开int my_open(struct inode *inode, struct file *file)&#123;  printk(&quot;open lgsDrive OK!\\n&quot;);  try_module_get(THIS_MODULE);  return 0;&#125;//关闭int my_release(struct inode *inode, struct file *file)&#123;  printk(&quot;Device released!\\n&quot;);  module_put(THIS_MODULE);  return 0;&#125;\n\n\n//读设备里的信息ssize_t my_read(struct file *file, char __user *user, size_t t, loff_t *f)&#123;  roc_dump(&amp;root);  if(copy_to_user(user,message,t))  &#123;    return -2;  &#125;  return sizeof(message);&#125;//向设备里写信息ssize_t my_write(struct file *file, const char __user *user, size_t t, loff_t *f)&#123;  if(copy_from_user(message,user,t))  &#123;    return -3;  &#125;  return sizeof(message);&#125;\n\n\nstatic struct class *drv_class = NULL;int major = 0;//设备号static int __init nf_init(void) &#123;  int ret = 0;  //char device  major = register_chrdev(0, &quot;ipdataset_drv&quot;, &amp;pStruct);  drv_class = class_create(THIS_MODULE, &quot;ipdataset_drv&quot;);  device_create(drv_class, NULL, MKDEV(major, 0), NULL, devName);  //    ret = register_chrdev(0, devName, &amp;pStruct);  //    if (ret &lt; 0)  //    &#123;  //        printk(&quot;failed to register_chrdev.\\n&quot;);  //        return -1;  //    &#125;  //    else  //    &#123;  //        printk(&quot;the lgsDrive has been registered!\\n&quot;);  //        printk(&quot;id: %d\\n&quot;, ret);  //        device_num = ret;  //   //        return 0;  //    &#125;  //net device  ret = nf_register_net_hook(&amp;init_net, net_hooks);  //ret = nf_register_hooks(net_hooks,ARRAY_SIZE(net_hooks));    // 安装钩子  if(ret)  &#123;    printk(KERN_ERR &quot;register hook failed\\n&quot;);    return -1;  &#125;  printk(&quot;Start...\\n&quot;);  return 0;&#125;void close(void)&#123;  roc_destroy(&amp;root, roc_free);&#125;static void __exit nf_exit(void)&#123;  close();  unregister_chrdev(major, &quot;ipdataset_drv&quot;);  device_destroy(drv_class, MKDEV(major, 0));  class_destroy(drv_class);  //unregister_chrdev(device_num, devName);\n\n\n  nf_unregister_net_hook(&amp;init_net, net_hooks);  //nf_unregister_hooks(net_hooks,ARRAY_SIZE(net_hooks));    // 卸载钩子  printk(&quot;Exit...\\n&quot;);&#125;\n\n\n\nmodule_init(nf_init);module_exit(nf_exit);\n\n\n\n\n\nMODULE_LICENSE(&quot;Dual BSD/GPL&quot;);MODULE_AUTHOR(&quot;dianwoshishi&quot;);MODULE_DESCRIPTION(&quot;Netfilter IP Statistic&quot;);MODULE_VERSION(&quot;1.0.1&quot;);MODULE_ALIAS(&quot;Netfilter 01&quot;);\n</code></pre>\n<p><a id=\"org8ee7f64\"></a></p>\n<h2 id=\"用户代码\"><a href=\"#用户代码\" class=\"headerlink\" title=\"用户代码\"></a>用户代码</h2><p>上述字符型设备创建了一个字符节点为：&#x2F;dev&#x2F;IPDataSet， 在用户态程序中，我们通过Linux编程中提供的read函数对驱动中的数据message进行读取。<br>代码如下：</p>\n<pre><code>   #include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;fcntl.h&gt;#define MAX_SIZE 1024 char message[MAX_SIZE] ;  //打开设备时会显示的消息int main(int num, char *arg[])&#123;    if(2 != num)&#123;        printf(&quot;Usage: %s /dev/IPDataSet\\n&quot;, arg[0]);        return -1;    &#125;    int fd = open(arg[1], O_RDWR);    if(0 &gt; fd)&#123;        perror(&quot;open&quot;);        return -1;    &#125;    int ret = read(fd, message, MAX_SIZE);    printf(&quot;read: ret = %d. %s\\n&quot;, ret, message);    memset(message, 0, MAX_SIZE);    ret = write(fd, message, MAX_SIZE);    printf(&quot;write: ret = %d.\\n&quot;, ret);    close(fd);    return 0;&#125;\n</code></pre>\n<p><a id=\"org3f4753d\"></a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a id=\"org01bad05\"></a></p>\n<h2 id=\"Linux-驱动\"><a href=\"#Linux-驱动\" class=\"headerlink\" title=\"Linux 驱动\"></a>Linux 驱动</h2><p>熟悉Linux驱动的编写流程。 了解了Linux内核代码与用户代码的不同，比较明显的就是缺少了类似C++ STL类似的好用的库，只能使用类似红黑树（rbtree)这样的数据结构来做一些set的操作，需要对红黑树有一定的了解。<br>网络设备驱动和字符型设备驱动的编写结构都差不多，但是目前也是一知半解，尤其是一些简单操作之外的特性还不了解，例如加锁？多线程？不知道</p>\n<p><a id=\"orgd1e6a5e\"></a></p>\n<h2 id=\"Linux内核\"><a href=\"#Linux内核\" class=\"headerlink\" title=\"Linux内核\"></a>Linux内核</h2><p>Linux内核的设计模式还是比较令人佩服的，虽然不懂全貌，但是也能从局部出发，贡献一些力量。再一次感受到了设计的魅力。</p>\n<p><a id=\"org4c6ff33\"></a></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>一定要在虚拟机中编写、测试驱动，不知道有什么错出现，你就要重启你的电脑，boring！</p>\n<p><a id=\"orgfe8069d\"></a></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>linux驱动编写（总结篇）,<a href=\"https://blog.csdn.net/feixiaoxing/article/details/79913476?spm=1001.2014.3001.5506\">https://blog.csdn.net/feixiaoxing/article/details/79913476?spm=1001.2014.3001.5506</a><br>智能路由器设备流量、网速统计及上下线提醒（基于netfilter编程）,<a href=\"https://blog.csdn.net/u012819339/article/details/50513387?spm=1001.2014.3001.5506\">https://blog.csdn.net/u012819339/article/details/50513387?spm=1001.2014.3001.5506</a><br>利用Linux内核模块Netfilter hook UDP报文, <a href=\"https://blog.csdn.net/qq_41791640/article/details/104933006?spm=1001.2014.3001.5506\">https://blog.csdn.net/qq_41791640/article/details/104933006?spm=1001.2014.3001.5506</a><br>Netfilter的使用和实现, <a href=\"https://blog.csdn.net/zhangskd/article/details/22678659?spm=1001.2014.3001.5506\">https://blog.csdn.net/zhangskd/article/details/22678659?spm=1001.2014.3001.5506</a></p>\n","text":"Table of Contents 背景 IP信息统计 统计信息设计 存储数据结构 Linux驱动 网络型驱动设备 字符型设备 用户代码 总结 Linux 驱动 Linux内核 其他 参考资料 背景当今社会，没有都有自己的信息处理设备，如手机、计算机甚至可能是路由器。在使用这些设...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"编程开发","slug":"编程开发","count":7,"path":"api/categories/编程开发.json"}],"tags":[{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"},{"name":"netfilter","slug":"netfilter","count":1,"path":"api/tags/netfilter.json"},{"name":"内核","slug":"内核","count":1,"path":"api/tags/内核.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Table-of-Contents\"><span class=\"toc-text\">Table of Contents</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IP%E4%BF%A1%E6%81%AF%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">IP信息统计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">统计信息设计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">存储数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">Linux驱动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E5%9E%8B%E9%A9%B1%E5%8A%A8%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">网络型驱动设备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E5%9E%8B%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">字符型设备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">用户代码</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux-%E9%A9%B1%E5%8A%A8\"><span class=\"toc-text\">Linux 驱动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux%E5%86%85%E6%A0%B8\"><span class=\"toc-text\">Linux内核</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}},"mapped":true,"prev_post":{"title":"不要让你对家人的爱，变成泄露数据隐私的“帮凶”","uid":"eb5d876b4883fd257ce36854111e3d6f","slug":"常见的安卓追踪软件应用受到漏洞的影响，可能暴露受害者的隐私和安全","date":"2022-02-26T04:40:08.595Z","updated":"2022-02-26T05:17:41.114Z","comments":true,"path":"api/articles/常见的安卓追踪软件应用受到漏洞的影响，可能暴露受害者的隐私和安全.json","cover":[],"text":"不要让你对家人的爱，变成泄露数据隐私的“帮凶”研究人员发现，常见的安卓追踪软件应用受到漏洞的影响，可能暴露受害者的隐私和安全。 手机追踪软件，也被称为spouseware，被追踪者用来监视受害者。该应用程序可以收集GPS位置，监视对话，访问浏览器历史记录、图像和存储在设备上的其他...","link":"","photos":[],"count_time":{"symbolsCount":816,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"传输层安全协议真（TLS）的安全吗？","uid":"dfc0a69891447bc4e3dfea1542d0fbf1","slug":"传输层安全协议真（TLS）的安全吗？","date":"2022-02-26T04:40:06.963Z","updated":"2022-02-26T05:18:13.550Z","comments":true,"path":"api/articles/传输层安全协议真（TLS）的安全吗？.json","cover":[],"text":"传输层安全协议真（TLS）的安全吗？随着数字通信，计算机网络，公钥密码体制等技术的迅速发展，安全网络通信已经成为了人们的日常需求。TLS 作为目前被广泛应用的安全通信协议之一，被广泛使用于日常生活中，如HTTPS，DNS over TLS等等。但是TLS真的安全吗？他能有效的保护...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}