{"title":"从hello world开始，拆解函数栈结构","uid":"422918ab17fac2b9611905dfbc28c6cc","slug":"从hello-world开始，拆解字符串常量的存储位置","date":"2022-02-26T04:40:06.930Z","updated":"2022-02-26T05:35:01.072Z","comments":true,"path":"api/articles/从hello-world开始，拆解字符串常量的存储位置.json","cover":null,"content":"<h1 id=\"从hello-world开始，拆解字符串常量的存储位置\"><a href=\"#从hello-world开始，拆解字符串常量的存储位置\" class=\"headerlink\" title=\"从hello world开始，拆解字符串常量的存储位置\"></a>从hello world开始，拆解字符串常量的存储位置</h1><h2 id=\"第一个程序helloworld\"><a href=\"#第一个程序helloworld\" class=\"headerlink\" title=\"第一个程序helloworld\"></a>第一个程序helloworld</h2><h3 id=\"编写程序\"><a href=\"#编写程序\" class=\"headerlink\" title=\"编写程序\"></a>编写程序</h3><p>首先我们有如下程序：<code>main.c</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//main.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world! %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>g_pstr <span class=\"token operator\">=</span> <span class=\"token string\">\"global_I'm a string\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> \n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pname <span class=\"token operator\">=</span> <span class=\"token string\">\"III'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringII'm a stringI'm a stringI'm a stringI'm a string\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>pname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>g_pstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"local_string_I'm a string\"</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述程序实现的功能很简单，就是输出三个字符串pname，g_pstr和name，为了便于说明，其中故意使用了一个函数调用<code>int display(char *)</code>。</p>\n<p>函数的逻辑为，main函数–&gt; display()函数(一个参数)–&gt;printf函数(两个参数)。</p>\n<p>是不是很简单！</p>\n<h3 id=\"程序编译makefile\"><a href=\"#程序编译makefile\" class=\"headerlink\" title=\"程序编译makefile\"></a>程序编译makefile</h3><p>为了便于说明，我们使用makefile文件进行编译。创建文件名为<code>makefile</code>的文件，内容如下：</p>\n<pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># makefile</span>\nOBJ<span class=\"token operator\">=</span>printf.main\n\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(OBJ)</span><span class=\"token punctuation\">:</span>\n\tgcc main.c -o <span class=\"token variable\">$@</span>\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\t-rm <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJ<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们生成的文件名为<code>printf.main</code>，这里你可以改为你喜欢的任意名称。</p>\n<p>使用<code>make</code>命令进行编译，会生成最终文件。运行后就可以看见输出。</p>\n<h2 id=\"提出问题\"><a href=\"#提出问题\" class=\"headerlink\" title=\"提出问题\"></a>提出问题</h2><p>我们想要知道字符串常量在程序运行中存储的位置</p>\n<h2 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h2><p>我们通过命令<code>objdump -d ./printf.main</code>, 查看相应的汇编代码。如下所示，定位到关键步骤，关键步骤已经使用‘#’注释</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\n.&#x2F;printf.main:     file format elf64-x86-64\n\n00000000004005d6 &lt;display&gt;:\n  4005d6:\t55                   \tpush   %rbp\n  4005d7:\t48 89 e5             \tmov    %rsp,%rbp\n  4005da:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4005de:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4005e2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4005e6:\t48 89 c6             \tmov    %rax,%rsi\n  4005e9:\tbf 48 07 40 00       \tmov    $0x400748,%edi\n  4005ee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4005f3:\te8 b8 fe ff ff       \tcallq  4004b0 &lt;printf@plt&gt;\n  4005f8:\t90                   \tnop\n  4005f9:\tc9                   \tleaveq \n  4005fa:\tc3                   \tretq   \n\n00000000004005fb &lt;main&gt;:\n  4005fb:\t55                   \tpush   %rbp\n  4005fc:\t48 89 e5             \tmov    %rsp,%rbp\n  4005ff:\t48 81 ec 20 01 00 00 \tsub    $0x120,%rsp\n  400606:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  40060d:\t00 00 \n  40060f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  400613:\t31 c0                \txor    %eax,%eax\n  400615:\t48 c7 85 e8 fe ff ff \tmovq   $0x400770,-0x118(%rbp)\t\t\t# 0x400770作为pname的地址\n  40061c:\t70 07 40 00 \n  400620:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n  400627:\t48 89 c7             \tmov    %rax,%rdi\n  40062a:\te8 61 fe ff ff       \tcallq  400490 &lt;puts@plt&gt;\n  40062f:\t48 8b 05 12 0a 20 00 \tmov    0x200a12(%rip),%rax        # 601048 &lt;g_pstr&gt;\n  400636:\t48 89 c7             \tmov    %rax,%rdi\n  400639:\te8 52 fe ff ff       \tcallq  400490 &lt;puts@plt&gt;\n  40063e:\t48 b8 6c 6f 63 61 6c \tmovabs $0x74735f6c61636f6c,%rax\t\t#‘local_st’ &quot;local_string_I&#39;m a string&quot;变量以常量整型的方式进行复制。\n  400645:\t5f 73 74 \n  400648:\t48 89 85 f0 fe ff ff \tmov    %rax,-0x110(%rbp)\n  40064f:\t48 b8 72 69 6e 67 5f \tmovabs $0x6d27495f676e6972,%rax  # ‘ring_I&#39;m’\n  400656:\t49 27 6d \n  400659:\t48 89 85 f8 fe ff ff \tmov    %rax,-0x108(%rbp)\n  400660:\t48 b8 20 61 20 73 74 \tmovabs $0x6e69727473206120,%rax\n  400667:\t72 69 6e \n  40066a:\t48 89 85 00 ff ff ff \tmov    %rax,-0x100(%rbp)\n  400671:\t48 c7 85 08 ff ff ff \tmovq   $0x67,-0xf8(%rbp)\n  400678:\t67 00 00 00 \n  40067c:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n  400683:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  400688:\tb9 1c 00 00 00       \tmov    $0x1c,%ecx\n  40068d:\t48 89 d7             \tmov    %rdx,%rdi\n  400690:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  400693:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40069a:\t48 89 c7             \tmov    %rax,%rdi\n  40069d:\te8 34 ff ff ff       \tcallq  4005d6 &lt;display&gt;\n  4006a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4006a7:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  4006ab:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n  4006b2:\t00 00 \n  4006b4:\t74 05                \tje     4006bb &lt;main+0xc0&gt;\n  4006b6:\te8 e5 fd ff ff       \tcallq  4004a0 &lt;__stack_chk_fail@plt&gt;\n  4006bb:\tc9                   \tleaveq \n  4006bc:\tc3                   \tretq   \n  4006bd:\t0f 1f 00             \tnopl   (%rax)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"第一个pname参数\"><a href=\"#第一个pname参数\" class=\"headerlink\" title=\"第一个pname参数\"></a>第一个pname参数</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">400615:\t48 c7 85 e8 fe ff ff \tmovq   $0x400770,-0x118(%rbp)\t\t\t# 0x400770作为pname的地址\n40061c:\t70 07 40 00 \n400620:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n400627:\t48 89 c7             \tmov    %rax,%rdi\n40062a:\te8 61 fe ff ff       \tcallq  400490 &lt;puts@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>![image-20210720102416074](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720102416074.png)</p>\n<p>查看地址<strong>0x400770</strong>，得到字符串。</p>\n<h3 id=\"第二个参数g-pstr\"><a href=\"#第二个参数g-pstr\" class=\"headerlink\" title=\"第二个参数g_pstr\"></a>第二个参数g_pstr</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">40062f:\t48 8b 05 12 0a 20 00 \tmov    0x200a12(%rip),%rax        # 601048 &lt;g_pstr&gt;\n400636:\t48 89 c7             \tmov    %rax,%rdi\n400639:\te8 52 fe ff ff       \tcallq  400490 &lt;puts@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>![image-20210720102733348](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720102733348.png)</p>\n<p>查看地址<strong>0x400759</strong>，得到地址</p>\n<h3 id=\"第三个参数字符串常量\"><a href=\"#第三个参数字符串常量\" class=\"headerlink\" title=\"第三个参数字符串常量\"></a>第三个参数字符串常量</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">40063e:\t48 b8 6c 6f 63 61 6c \tmovabs $0x74735f6c61636f6c,%rax\t\t#‘local_st’ &quot;local_string_I&#39;m a string&quot;变量以常量整型的方式进行复制。\n400645:\t5f 73 74 \n400648:\t48 89 85 f0 fe ff ff \tmov    %rax,-0x110(%rbp)\n40064f:\t48 b8 72 69 6e 67 5f \tmovabs $0x6d27495f676e6972,%rax  # ‘ring_I&#39;m’\n400656:\t49 27 6d \n400659:\t48 89 85 f8 fe ff ff \tmov    %rax,-0x108(%rbp)\n400660:\t48 b8 20 61 20 73 74 \tmovabs $0x6e69727473206120,%rax\n400667:\t72 69 6e \n40066a:\t48 89 85 00 ff ff ff \tmov    %rax,-0x100(%rbp)\n400671:\t48 c7 85 08 ff ff ff \tmovq   $0x67,-0xf8(%rbp)\n400678:\t67 00 00 00 \n40067c:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n400683:\tb8 00 00 00 00       \tmov    $0x0,%eax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>0x74735f6c61636f6c -&gt; 为字符串”local_st“</p>\n<p>0x6d27495f676e6972-&gt;为字符串”ring_I’m“</p>\n<p>其他等等</p>\n<p>得到字符串。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><h4 id=\"全局变量和只有引用的字符串常量，使用rodata数据区存储其值\"><a href=\"#全局变量和只有引用的字符串常量，使用rodata数据区存储其值\" class=\"headerlink\" title=\"全局变量和只有引用的字符串常量，使用rodata数据区存储其值\"></a>全局变量和只有引用的字符串常量，使用rodata数据区存储其值</h4><p>全局变量g_pstr和pname所指向的地址，均为<code>.rodata</code>，意思是read only。从以下IDA pro的结果中我们也能看出来。</p>\n<p>![image-20210720143206385](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720143206385.png)</p>\n<h4 id=\"能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间\"><a href=\"#能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间\" class=\"headerlink\" title=\"能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间\"></a>能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用<code>rodata</code>空间</h4><p>对于<code>char name[256] = &quot;local_string_I&#39;m a string&quot;; </code>实现的赋值语句，其常量是以整型的方式存储，然后赋值到栈上的name变量中。实际上，这是编译器帮助我们实现了这个步骤。</p>\n<p>为了确认这一事实，我们做如下实验：</p>\n<p>使用<code>char name[256] = &quot;llocal_string_I&#39;m a stringlocal_string_I&#39;m a stringlocal_string_I&#39;m a stringlocal_string_I&#39;m a stringocal_string_I&#39;m a string&quot;;</code>进行试验，得到如下结果。</p>\n<p>![image-20210720143749564](从hello world开始，复习C语言知识——字符串常亮&#x2F;image-20210720143749564.png)</p>\n<p>可以看出，确实是将字符串拆解为整型常量，然后赋值到栈空间上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其他的常量也可以依次类推。</p>\n<p>一般我们的理解都是字符串常量都是放在<code>rodata</code>中，但是通过汇编代码，我们可以清晰的看出，当字符串常量初始化给一个数组时，字符串常量并不会放在<code>rodata</code>中，二是将字符串常量转化为多个整型常量，然后在运行时直接复制到栈上。</p>\n","text":"从hello world开始，拆解字符串常量的存储位置第一个程序helloworld编写程序首先我们有如下程序：main.c //main.c #include &lt;stdio.h> int display(char *name)&#123; printf(\"hello wo...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8Ehello-world%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%8B%86%E8%A7%A3%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">从hello world开始，拆解字符串常量的存储位置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8Fhelloworld\"><span class=\"toc-text\">第一个程序helloworld</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">编写程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91makefile\"><span class=\"toc-text\">程序编译makefile</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%90%E5%87%BA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">提出问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">分析问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AApname%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">第一个pname参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0g-pstr\"><span class=\"toc-text\">第二个参数g_pstr</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">第三个参数字符串常量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83\"><span class=\"toc-text\">思考</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%AA%E6%9C%89%E5%BC%95%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%EF%BC%8C%E4%BD%BF%E7%94%A8rodata%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%AD%98%E5%82%A8%E5%85%B6%E5%80%BC\"><span class=\"toc-text\">全局变量和只有引用的字符串常量，使用rodata数据区存储其值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%83%BD%E5%A4%9F%E5%AE%9E%E7%8E%B0%E8%B5%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%EF%BC%8C%E7%94%B1%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%95%B4%E5%9E%8B%E5%B8%B8%E9%87%8F%E7%9A%84%E6%96%B9%E5%BC%8F%E5%A4%8D%E5%88%B6%E5%88%B0%E6%A0%88%E4%B8%8A%EF%BC%8C%E4%B8%8D%E5%8D%A0%E7%94%A8rodata%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">能够实现赋值初始化的字符串常量，由编译器优化，使用整型常量的方式复制到栈上，不占用rodata空间</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"传输层安全协议真（TLS）的安全吗？","uid":"dfc0a69891447bc4e3dfea1542d0fbf1","slug":"传输层安全协议真（TLS）的安全吗？","date":"2022-02-26T04:40:06.963Z","updated":"2022-02-26T05:18:13.550Z","comments":true,"path":"api/articles/传输层安全协议真（TLS）的安全吗？.json","cover":[],"text":"传输层安全协议真（TLS）的安全吗？随着数字通信，计算机网络，公钥密码体制等技术的迅速发展，安全网络通信已经成为了人们的日常需求。TLS 作为目前被广泛应用的安全通信协议之一，被广泛使用于日常生活中，如HTTPS，DNS over TLS等等。但是TLS真的安全吗？他能有效的保护...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"从hello world开始，拆解函数栈结构","uid":"422918ab17fac2b9611905dfbc28c6cc","slug":"从hello-world开始，拆解函数栈结构","date":"2022-02-26T04:40:06.928Z","updated":"2022-02-26T05:20:58.557Z","comments":true,"path":"api/articles/从hello-world开始，拆解函数栈结构.json","cover":[],"text":"从hello world开始，拆解函数栈结构第一个程序helloworld编写程序首先我们有如下程序：main.c //main.c #include&lt;stdio.h> int test_stack()&#123; char name[25] = &#123;0&#125;...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}