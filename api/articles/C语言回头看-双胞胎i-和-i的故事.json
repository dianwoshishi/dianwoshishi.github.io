{"title":"C语言回头看--诡异的i++和++i","uid":"cca00432e478abca505909e6f879fd41","slug":"C语言回头看-双胞胎i-和-i的故事","date":"2022-02-26T04:40:06.466Z","updated":"2022-02-26T04:40:06.468Z","comments":true,"path":"api/articles/C语言回头看-双胞胎i-和-i的故事.json","cover":[],"content":"<h1 id=\"C语言回头看–诡异的i-和-i\"><a href=\"#C语言回头看–诡异的i-和-i\" class=\"headerlink\" title=\"C语言回头看–诡异的i++和++i\"></a>C语言回头看–诡异的i++和++i</h1><p>C语言中的<code>i++</code>和<code>++i</code>使用非常的方便，简单明了。但是很多人在学习C语言的过程中，对这两个语句还是存在恐惧，因为这两条语句会引起不必要的麻烦。例如：到底是先用再加，还是先加再用？ 同时在一些程序语句中也会出现一些令人意想不到的结果，例如<code>i=1,((++i)+(++i))=6</code>的情况，非常的诡异。</p>\n<p>因此本文针对这个问题，深入到汇编层面，理解双胞胎i++和++i的故事。相信通过本文，你能够更加深刻的理解C语言中的自加自减等操作。</p>\n<h2 id=\"例子介绍\"><a href=\"#例子介绍\" class=\"headerlink\" title=\"例子介绍\"></a>例子介绍</h2><h3 id=\"本文所用程序\"><a href=\"#本文所用程序\" class=\"headerlink\" title=\"本文所用程序\"></a>本文所用程序</h3><p>C语言文件如下所示，逻辑为：分别输出<code>i++</code>和<code>++i</code>的结果。</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">#include &lt;stdio.h&gt;\n\nint main()&#123;\n\tint i &#x3D; 0;\n\tprintf(&quot;i &#x3D; 0,++i &#x3D; %d\\n&quot;, ++i);\n\ti &#x3D; 0;\n\t\n\tprintf(&quot;i &#x3D; 0,i++ &#x3D; %d\\n&quot;, i++);\n\n\n\n\ti &#x3D; 1;\n\tprintf(&quot;i &#x3D; 1,(i++)+(++i) &#x3D; %d\\n&quot;, (i++)+(++i));\n\n\n\ti &#x3D; 1;\n\tprintf(&quot;i &#x3D; 1,(++i)+(i++) &#x3D; %d\\n&quot;, (++i)+(i++));\n\n\ti &#x3D; 1;\n\tprintf(&quot;i &#x3D; 1,(++i)+(++i) &#x3D; %d\\n&quot;, (++i)+(++i));\n\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用<code>make</code>进行构建，<code>makefile</code>如下所示</p>\n<pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">OBJ<span class=\"token operator\">=</span>selfincre\n\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(OBJ)</span><span class=\"token punctuation\">:</span>\n\tg++ -Wall main.c -o <span class=\"token variable\">$@</span>\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\t-rm -rf <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJ<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>本机所用的环境如下所示：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">Ubuntu 16.04 (64位，内核版本4.15.0-142-generic）\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)\nmake：GNU Make 4.1，Built for x86_64-pc-linux-gnu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E5%A4%B4%E7%9C%8B--%E5%8F%8C%E8%83%9E%E8%83%8Ei++%E5%92%8C++i%E7%9A%84%E6%95%85%E4%BA%8B/image-20210726110945317.png\" alt=\"image-20210726110945317\"></p>\n<h2 id=\"汇编分析\"><a href=\"#汇编分析\" class=\"headerlink\" title=\"汇编分析\"></a>汇编分析</h2><p>在ubuntu中我们使用<code>objdump ~d ./selfincre &gt; objdump.txt</code>，将程序进行反汇编，我们将不重要的信息剔除，只保留<code>main</code>函数，如下所示，在部分汇编语句中进行了注释，可以结合‘餐食’。</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\n.&#x2F;selfincre:     file format elf64-x86-64\n\n0000000000400526 &lt;main&gt;:\n  400526:\t55                   \tpush   %rbp\n  400527:\t48 89 e5             \tmov    %rsp,%rbp\n  40052a:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40052e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp) # -0x4(%rbp) 是局部变量i，本操作为赋值为0\n  400535:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp) # i + 1\n  400539:\t8b 45 fc             \tmov    -0x4(%rbp),%eax # 将i放入eax\n  40053c:\t89 c6                \tmov    %eax,%esi\t\t\t\t# 将eax复制给esi，作为printf的第一个参数\n  40053e:\tbf 04 06 40 00       \tmov    $0x400604,%edi\n  400543:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  400548:\te8 b3 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;\n  40054d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\t## -0x4(%rbp) 是局部变量i，本操作为赋值为0\n  400554:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\t## i赋值给eax\n  400557:\t8d 50 01             \tlea    0x1(%rax),%edx\t\t\t\t\t## 取rax的值加一（注意：rax本身并没有+1)，并赋值给edx\n  40055a:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\t\t\t\t## 将edx赋值给局部变量i\n  40055d:\t89 c6                \tmov    %eax,%esi\t\t\t\t## 注意这里的eax并没有进行+1操作，所以值自赋值为0后并未改变，作为printf的第一个参数\n  40055f:\tbf 0e 06 40 00       \tmov    $0x40060e,%edi\n  400564:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  400569:\te8 92 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;\n  40056e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  400573:\tc9                   \tleaveq \n  400574:\tc3                   \tretq   \n  400575:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40057c:\t00 00 00 \n  40057f:\t90                   \tnop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"分析-i\"><a href=\"#分析-i\" class=\"headerlink\" title=\"分析++i\"></a>分析++i</h3><p>主要分析一下C代码</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">++i;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>汇编如下所示：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">40052e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp) # -0x4(%rbp) 是局部变量i，本操作为赋值为0\n 400535:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp) # i + 1\n 400539:\t8b 45 fc             \tmov    -0x4(%rbp),%eax # 将i放入eax\n 40053c:\t89 c6                \tmov    %eax,%esi\t\t\t\t# 将eax复制给esi，作为printf的第一个参数\n 40053e:\tbf 04 06 40 00       \tmov    $0x400604,%edi\n 400543:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 400548:\te8 b3 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>++i正如字面的意思一样，先加后用！</strong></p>\n<p>其加一汇编操作，均在<code>-0x4(%rbp)</code>进行，加一操作为<code>addl   $0x1,-0x4(%rbp)</code>，<strong>因此++i直接造成的结果就是i的改变。</strong></p>\n<h3 id=\"分析i\"><a href=\"#分析i\" class=\"headerlink\" title=\"分析i++\"></a>分析i++</h3><p>C代码如下</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>汇编如下所示：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">40054d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\t## -0x4(%rbp) 是局部变量i，本操作为赋值为0\n400554:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\t## i赋值给eax\n400557:\t8d 50 01             \tlea    0x1(%rax),%edx\t\t\t\t\t## 取rax的值加一（注意：rax本身并没有+1)，并赋值给edx\n40055a:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\t\t\t\t## 将edx赋值给局部变量i\n40055d:\t89 c6                \tmov    %eax,%esi\t\t\t\t## 注意这里的eax并没有进行+1操作，所以值自赋值为0后并未改变，作为printf的第一个参数\n40055f:\tbf 0e 06 40 00       \tmov    $0x40060e,%edi\n400564:\tb8 00 00 00 00       \tmov    $0x0,%eax\n400569:\te8 92 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>i++正如字面的意思一样，先用后加！</strong></p>\n<p>其加一汇编操作，在寄存器<code>eax</code>的值的基础上进行，加一操作为<code>lea    0x1(%rax),%edx；mov    %edx,-0x4(%rbp)</code>。</p>\n<p>我们可以如下理解i++， 拆分为两句：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">i<span class=\"token operator\">++</span> \t<span class=\"token operator\">--</span><span class=\"token operator\">></span> \ti<span class=\"token punctuation\">;</span>i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>i++</code>相当于：先使用<code>i</code>，在对<code>i</code>进行加一操作。</p>\n<ul>\n<li><p>先使用i：操作为将i的值存储在eax以便在后面使用，<code>eax</code>代表了<code>i++</code>这条语句的结果</p>\n</li>\n<li><p>对i进行加一操作：<code>lea    0x1(%rax),%edx；mov    %edx,-0x4(%rbp)</code>，加一操作并不影响eax寄存器。</p>\n</li>\n</ul>\n<p>因此<code>i++</code>的结果是<code>i</code>，使用的方法是<code>eax寄存器</code>。只不过在使用完<code>i</code>，会有一个加一的操作而已。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>++i，先加后用！</strong></p>\n<p><strong>i++，先用后加！</strong></p>\n<p>出现<code>i++</code>，<code>++i</code>这样语句的目的可能在于减少语句操作吧。通过上述字面理解，其实是最快的。</p>\n<h2 id=\"i-i-x3D-6？？？\"><a href=\"#i-i-x3D-6？？？\" class=\"headerlink\" title=\"(i++)+(++i)&#x3D;6？？？\"></a>(i++)+(++i)&#x3D;6？？？</h2><h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>使用如下代码进行分析</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">i &#x3D; 1;\nprintf(&quot;i &#x3D; 1,(i++)+(++i) &#x3D; %d\\n&quot;, (i++)+(++i));\n\n\ni &#x3D; 1;\nprintf(&quot;i &#x3D; 1,(++i)+(++i) &#x3D; %d\\n&quot;, (++i)+(++i));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"分析-i-i\"><a href=\"#分析-i-i\" class=\"headerlink\" title=\"分析(i++)+(++i)\"></a>分析(i++)+(++i)</h3><p>首先我们先进行一个简单一些的分析，<code>i = 1;(i++)+(++i)</code> 的结果是多少呢？</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\"># (i++)+(++i)\n# i &#x3D; 1\n40056e:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\t\t## -0x4(%rbp) 就是局部变量i，本操作为赋值为1,i &#x3D; 1\n# i++\n400575:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\t\t## eax &#x3D; i &#x3D; 1\n400578:\t8d 50 01             \tlea    0x1(%rax),%edx\t\t\t## 取rax的值加一，赋值给edx\n40057b:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\t\t## i &#x3D; edx, 此时i &#x3D; 2\n# ++i\n40057e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\t\t## i+ 1 &#x3D; i,此时i &#x3D; 3\n# $1 + $2\n400582:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\t\t## i的值赋给edx，也就是3\n400585:\t01 d0                \tadd    %edx,%eax\t\t\t\t\t## 执行eax + edx &#x3D; eax 也就是1 + 3 &#x3D; 4\n400587:\t89 c6                \tmov    %eax,%esi\t\t\t\t\t## eax赋给esi，作为printf的第一个参数，也就是4\n400589:\tbf 74 06 40 00       \tmov    $0x400674,%edi\n40058e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n400593:\te8 68 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过第二节的分析，我们知道，其实<code>(i++)+(++i) </code>的可以看做<code>(i_1 + (++i_2))</code>（<code>i_1</code>是因为此时<code>i_1</code>的值是eax的值，<code>i_1</code> 不等同于<code>i_2</code>，并不随<code>i</code>的值变化）， <del>再由C语言中表达式的计算是由右到左，所以会先计算<code>++i</code>，然后是</del>再相加。那么结果应该是1 + 2 &#x3D; 3。</p>\n<p>但是，实际结果却是4.为什么呢？</p>\n<p>原因就是在进行<code>++i</code>的时候，虽然后续用的是<code>eax</code>的值，但是这句话（第5行）随后进行的操作改变了<code>-0x4(%rbp)</code>的值（第6、7行）。其本意是<code>-0x4(%rbp)+1</code>，但是此时<code>-0x4(%rbp)</code>的值已经被<code>i++</code>修改过了，为2，所以<code>++i</code>的结果就成为了3。最终两式一加，结果为4.</p>\n<h3 id=\"分析-i-i-1\"><a href=\"#分析-i-i-1\" class=\"headerlink\" title=\"分析(++i)+(++i)\"></a>分析(++i)+(++i)</h3><p>下面我们分析<code>(++i)+(++i) = 6？</code></p>\n<p>汇编代码如下所示：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\n# (++i)+(++i)\n# i &#x3D; 1\n400598:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\t\t# -0x4(%rbp) &#x3D; i &#x3D; 1\n#(++i)\n40059f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\t\t# -0x4(%rbp) &#x3D; i &#x3D; 2\n#(++i)\n4005a3:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\t\t# -0x4(%rbp) &#x3D; i &#x3D; 3\n# $1 + $2\n4005a7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\t\t# -0x4(%rbp)赋值给eax， eax &#x3D; 3\n4005aa:\t01 c0                \tadd    %eax,%eax\t\t\t\t\t# eax + eax &#x3D; 6\n4005ac:\t89 c6                \tmov    %eax,%esi\n4005ae:\tbf 8c 06 40 00       \tmov    $0x40068c,%edi\n4005b3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n4005b8:\te8 43 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>经过上一小节的分析，其实这里已经非常简单了，因为两次<code>++i</code>不断的改变<code>-0x4(%rbp)</code>的值，使得<code>-0x4(%rbp)</code>在使用时变成了3，最终两式相加为6.</p>\n<h3 id=\"练手题目\"><a href=\"#练手题目\" class=\"headerlink\" title=\"练手题目\"></a>练手题目</h3><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">i &#x3D; 1;\nprintf(&quot;i &#x3D; 1,(++i)+(i++) &#x3D; %d\\n&quot;, (++i)+(i++));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">400598:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n40059f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n4005a3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n4005a6:\t8d 50 01             \tlea    0x1(%rax),%edx\n4005a9:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n4005ac:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n4005af:\t01 d0                \tadd    %edx,%eax\n4005b1:\t89 c6                \tmov    %eax,%esi\n4005b3:\tbf ac 06 40 00       \tmov    $0x4006ac,%edi\n4005b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n4005bd:\te8 3e fe ff ff       \tcallq  400400 &lt;printf@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>他的结果是5，通过上述分析，你算对了吗？</p>\n<p>关键提示：</p>\n<ul>\n<li><del>C语言中运行由右至左，所以先算<code>i++</code>，再算<code>++i</code></del></li>\n<li><code>i++</code>和<code>++i</code>的运算过程改变了<code>-0x4(%rbp)</code>的值，所以出现了非预期的结果。</li>\n</ul>\n<h2 id=\"未定义行为\"><a href=\"#未定义行为\" class=\"headerlink\" title=\"未定义行为\"></a>未定义行为</h2><p>虽然这有点复杂，感觉确定性非常的不高。但是不用担心，在C语言的编译过程中，会警告我们，这样的语句中i没有定义。如果你发现这样的问题后，就需要注意了。</p>\n<p><img src=\"/C%E8%AF%AD%E8%A8%80%E5%9B%9E%E5%A4%B4%E7%9C%8B--%E5%8F%8C%E8%83%9E%E8%83%8Ei++%E5%92%8C++i%E7%9A%84%E6%95%85%E4%BA%8B/image-20210726111037526.png\" alt=\"image-20210726111037526\"></p>\n<p>下面文章中对这个问题进行了解释，不再赘述。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>i＝1，为什么 (++i)+(++i)＝6？ - CWKSC的回答 - 知乎 <a href=\"https://www.zhihu.com/question/347864795/answer/836263029\">https://www.zhihu.com/question/347864795/answer/836263029</a></p></blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>从汇编角度理解++i和i++，可以更好的得出一些奇奇怪怪的语句的结果，让我们更好的理解C语言，理解编译器。</li>\n<li>一定不建议写这样的语句！一定不建议写这样的语句！一定不建议写这样的语句！请用<code>i += 1</code>这样代替。多写一个字符而已。如果一定要写i++或++i，请将其单独为一个语句，不要进行组合！不要进行组合！不要进行组合！这样，你好我好大家好，不然当某一天你维护的代码出现灵异事件时，就只有祷告了。</li>\n</ul>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\td <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\n0000000000400526 &lt;_Z1fv&gt;:\n  400526:\t55                   \tpush   %rbp\n  400527:\t48 89 e5             \tmov    %rsp,%rbp\n  40052a:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  400531:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  400534:\t8d 50 01             \tlea    0x1(%rax),%edx\n  400537:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40053a:\t5d                   \tpop    %rbp\n  40053b:\tc3                   \tretq   \n\n000000000040053c &lt;_Z1gv&gt;:\n  40053c:\t55                   \tpush   %rbp\n  40053d:\t48 89 e5             \tmov    %rsp,%rbp\n  400540:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  400547:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40054a:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40054d:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  400550:\t5d                   \tpop    %rbp\n  400551:\tc3                   \tretq   \n\n0000000000400552 &lt;main&gt;:\n  400552:\t55                   \tpush   %rbp\n  400553:\t48 89 e5             \tmov    %rsp,%rbp\n  400556:\t53                   \tpush   %rbx\n  400557:\t48 83 ec 28          \tsub    $0x28,%rsp\n  40055b:\te8 c6 ff ff ff       \tcallq  400526 &lt;_Z1fv&gt;\t\t#f()\n  400560:\t89 c3                \tmov    %eax,%ebx\n  400562:\te8 d5 ff ff ff       \tcallq  40053c &lt;_Z1gv&gt;\t\t#g()\n  400567:\t01 d8                \tadd    %ebx,%eax\n  400569:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  40056c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40056f:\t89 c6                \tmov    %eax,%esi\n  400571:\tbf 74 06 40 00       \tmov    $0x400674,%edi\n  400576:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40057b:\te8 80 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;\n  400580:\te8 a1 ff ff ff       \tcallq  400526 &lt;_Z1fv&gt;\t\t#f()\n  400585:\t89 c3                \tmov    %eax,%ebx\n  400587:\te8 b0 ff ff ff       \tcallq  40053c &lt;_Z1gv&gt;\t\t#g()\n  40058c:\t01 d8                \tadd    %ebx,%eax\n  40058e:\t89 c6                \tmov    %eax,%esi\n  400590:\tbf 74 06 40 00       \tmov    $0x400674,%edi\n  400595:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40059a:\te8 61 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;\n  40059f:\tc7 45 e0 01 00 00 00 \tmovl   $0x1,-0x20(%rbp) #a\n  4005a6:\tc7 45 e4 02 00 00 00 \tmovl   $0x2,-0x1c(%rbp)\t#b\n  4005ad:\tc7 45 e8 03 00 00 00 \tmovl   $0x3,-0x18(%rbp)\t#c\n  4005b4:\tc7 45 ec 04 00 00 00 \tmovl   $0x4,-0x14(%rbp) #d\n  4005bb:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  4005be:\t0f af 45 e4          \timul   -0x1c(%rbp),%eax # a * b\n  4005c2:\t8b 55 e8             \tmov    -0x18(%rbp),%edx \n  4005c5:\t01 d2                \tadd    %edx,%edx\t\t\t\t# c + c &#x3D; c*2\n  4005c7:\t01 d0                \tadd    %edx,%eax\t\t\t\t# 相加\n  4005c9:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4005cc:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4005cf:\t89 c6                \tmov    %eax,%esi\n  4005d1:\tbf 74 06 40 00       \tmov    $0x400674,%edi\n  4005d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4005db:\te8 20 fe ff ff       \tcallq  400400 &lt;printf@plt&gt;\n  4005e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4005e5:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4005e9:\t5b                   \tpop    %rbx\n  4005ea:\t5d                   \tpop    %rbp\n  4005eb:\tc3                   \tretq   \n  4005ec:\t0f 1f 40 00          \tnopl   0x0(%rax)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从汇编代码可以看出，实际上<code>f()+g()</code> 和<code>a * b + c *2</code>的顺序均为从左向右。</p>\n<p>实际上，之前自己记忆中一直是以下这句：</p>\n<ul>\n<li><strong>复合赋值运算的优先级符合C语言运算符的优先级表，结合方向为从右到左。</strong> C语言中可以进行连续赋值,如a&#x3D;b&#x3D;c&#x3D;1,“&#x3D;”运算符是从右至左结合</li>\n<li><strong>函数参数：</strong>主要是函数参数入栈的方式造成有，入栈从右向左，运算也就从右向左。 i&#x3D;1; printf(“%d%d”,i,i++);&#x2F;&#x2F;输出2 1</li>\n</ul>\n","text":"C语言回头看–诡异的i++和++iC语言中的i++和++i使用非常的方便，简单明了。但是很多人在学习C语言的过程中，对这两个语句还是存在恐惧，因为这两条语句会引起不必要的麻烦。例如：到底是先用再加，还是先加再用？ 同时在一些程序语句中也会出现一些令人意想不到的结果，例如i=1,(...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开发","slug":"开发","count":3,"path":"api/categories/开发.json"},{"name":"C语言回头看","slug":"开发/C语言回头看","count":1,"path":"api/categories/开发/C语言回头看.json"}],"tags":[{"name":"C语言","slug":"C语言","count":1,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C%E8%AF%AD%E8%A8%80%E5%9B%9E%E5%A4%B4%E7%9C%8B%E2%80%93%E8%AF%A1%E5%BC%82%E7%9A%84i-%E5%92%8C-i\"><span class=\"toc-text\">C语言回头看–诡异的i++和++i</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">例子介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E6%96%87%E6%89%80%E7%94%A8%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">本文所用程序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E5%88%86%E6%9E%90\"><span class=\"toc-text\">汇编分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-i\"><span class=\"toc-text\">分析++i</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90i\"><span class=\"toc-text\">分析i++</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#i-i-x3D-6%EF%BC%9F%EF%BC%9F%EF%BC%9F\"><span class=\"toc-text\">(i++)+(++i)&#x3D;6？？？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-i-i\"><span class=\"toc-text\">分析(i++)+(++i)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-i-i-1\"><span class=\"toc-text\">分析(++i)+(++i)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E6%89%8B%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">练手题目</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">未定义行为</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"“黑客”组织仍在积极重新调整其恶意软件库","uid":"cca119383a62ab6c2d67564c0f149f86","slug":"“黑客”组织仍在积极重新调整其恶意软件库","date":"2022-02-26T04:40:06.568Z","updated":"2022-02-26T04:40:06.571Z","comments":true,"path":"api/articles/“黑客”组织仍在积极重新调整其恶意软件库.json","cover":[],"text":"“黑客”组织仍在积极重新调整其恶意软件库 摘要臭名昭著的TrickBot恶意软件与一种名为Diavol的新勒索软件有关联。 正文根据Fortinet的FortiGuard实验室的研究人员，本月初针对其一个客户的攻击中，Diavol和Conti勒索软件的有效载荷(payloads)...","link":"","photos":[],"count_time":{"symbolsCount":664,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Watering Hole Attack 水坑攻击","uid":"913fd9265e0b9bf65f9ed30ba7a8f72d","slug":"Watering-Hole-Attack-水坑攻击","date":"2021-06-17T04:00:00.000Z","updated":"2022-02-26T06:11:39.409Z","comments":true,"path":"api/articles/Watering-Hole-Attack-水坑攻击.json","cover":[],"text":"Watering Hole Attack 水坑攻击 什么是水坑攻击水坑攻击时一种看似简单但成功率较高的网络攻击方式。攻击目标多为特定的团体（组织、行业、地区等）。攻击者首先通过猜测（或观察）确定这组目标经常访问的网站，然后入侵其中一个或多个网站，植入恶意软件。在目标访问该网站时，...","link":"","photos":[],"count_time":{"symbolsCount":713,"symbolsTime":"1 mins."},"categories":[{"name":"网络空间","slug":"网络空间","count":8,"path":"api/categories/网络空间.json"},{"name":"科普","slug":"网络空间/科普","count":1,"path":"api/categories/网络空间/科普.json"}],"tags":[{"name":"Attack","slug":"Attack","count":1,"path":"api/tags/Attack.json"}],"author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://space.bilibili.com/432126410"}}}}}}