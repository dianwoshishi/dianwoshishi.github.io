{"title":"从一个hello world说起","uid":"80d7880307bc3e28a3dae58ad9de77ec","slug":"从一个hello world说起","date":"2022-02-26T06:14:18.000Z","updated":"2022-02-26T06:14:24.236Z","comments":true,"path":"api/articles/从一个hello world说起.json","cover":[],"content":"<h1 id=\"从一个hello-world说起\"><a href=\"#从一个hello-world说起\" class=\"headerlink\" title=\"从一个hello world说起\"></a>从一个hello world说起</h1><p>大家好，我是明说网络的小明同学。今天我们从C语言的Hello World说起，和大家一起温习一下C语言中一个Hello World怎么运行起来的，以及C语言如何组织栈缓冲区等。本文不适用于C语言初学者，需要具备有一定的汇编基础。好了下面，我们开始吧。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>本文的工具为：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">操作系统：Ubuntu16.04， 4.15.0-142-generic\n\n编译器：gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)\n\nmake工具GNU Make 4.1\n\n反汇编查看器：objdump\n\nelf文件查看器：readelf\n\ngdb，pwngdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"C语言介绍\"><a href=\"#C语言介绍\" class=\"headerlink\" title=\"C语言介绍\"></a>C语言介绍</h2><p>C 语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发 UNIX 操作系统而设计的。UNIX 操作系统，C编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。</p>\n<p>同时，C语言是一门大学期间基本上都会开设的课程。作为一门入门编程课程，C语言有着独特的魅力和不可替代的作用。虽然当前python火热，C语言好像显得不那么重要了，“python难道不香吗”的疑问开始出现。但是我的观点是：每种语言有每种语言的优势，python永远也取代不了C语言。像我独爱指针，能够带来自由的感觉。</p>\n<p>下面就开始我们的探索之旅吧。</p>\n<h2 id=\"第一个程序helloworld\"><a href=\"#第一个程序helloworld\" class=\"headerlink\" title=\"第一个程序helloworld\"></a>第一个程序helloworld</h2><h3 id=\"编写程序\"><a href=\"#编写程序\" class=\"headerlink\" title=\"编写程序\"></a>编写程序</h3><p>首先我们有如下程序：<code>main.c</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//main.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world! %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> \n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a string\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述程序实现的功能很简单，就是输出一句话<code>hello world! I&#39;m a string</code>，为了便于说明，其中故意使用了一个函数调用<code>int display(char *)</code>。</p>\n<p>函数的逻辑为，main函数–&gt; display()函数(一个参数)–&gt;printf函数(两个参数)。</p>\n<p>是不是很简单！</p>\n<h3 id=\"程序编译makefile\"><a href=\"#程序编译makefile\" class=\"headerlink\" title=\"程序编译makefile\"></a>程序编译makefile</h3><p>为了便于说明，我们使用makefile文件进行编译。创建文件名为<code>makefile</code>的文件，内容如下：</p>\n<pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># makefile</span>\nOBJ<span class=\"token operator\">=</span>printf.main\n\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(OBJ)</span><span class=\"token punctuation\">:</span>\n\tgcc main.c -o <span class=\"token variable\">$@</span>\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\t-rm <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJ<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们生成的文件名为<code>printf.main</code>，这里你可以改为你喜欢的任意名称。</p>\n<p>使用<code>make</code>命令进行编译，会生成最终文件。运行后就可以看见<code>hello world! I&#39;m a string</code></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>到这里我们就完成了一个helloworld程序的编写和编译，并且运行。是不是很简单。对于初学者，其实到这里就完了，姑且可以认为main函数就是一个程序的开始和结束（我曾经就一直这么认为）。但是对于有过一定经验的人来说，就知道：main函数并不是一个程序的开始，也不是一个程序的结束。</p>\n<p>咦，这么神奇的吗？就让我们来看看吧。</p>\n<h2 id=\"Hello-world-的背后\"><a href=\"#Hello-world-的背后\" class=\"headerlink\" title=\"Hello world 的背后\"></a>Hello world 的背后</h2><p>首先让我们来认识一下我们生成的<code>printf.main。</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">file .&#x2F;printf.main \n.&#x2F;printf.main: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib64&#x2F;ld-linux-x86-64.so.2, for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;5c389a402866aaa012b8b8ab992fed778eb989b0, not stripped<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>ELF是执行和链接格式（Execurable and Linking Format）的缩略词。它是UNIX系统的几种可执行文件格式中的一种。</p>\n<p>使用命令<code>readelf -h ./printf.main &gt; elf_head.txt</code></p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">ELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2&#39;s complement, little endian\n  Version:                           1 (current)\n  OS&#x2F;ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x4004a0 &#x2F;&#x2F;注意这一行\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          6712 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         31\n  Section header string table index: 28<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里面，我们注意第11行，<code>Entry point address:               0x4004a0</code>,显示，入口点地址为address，说明操作系统在运行这个<code>printf.main</code>程序时，首先从这个地址开始运行。那么我们看看这个地址到底是什么吧</p>\n<h3 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h3><p>使用命令<code>objdump -d printf.main &gt; objdump.txt</code>将程序的汇编代码提取出来（删除了一些当前没有必要说明的内容），如下所示：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\nprintf.main:     file format elf64-x86-64\n\n\nDisassembly of section .init:\n\n0000000000400428 &lt;_init&gt;:\n  400428:\t48 83 ec 08          \tsub    $0x8,%rsp\n  40042c:\t48 8b 05 c5 0b 20 00 \tmov    0x200bc5(%rip),%rax        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;\n  400433:\t48 85 c0             \ttest   %rax,%rax\n  400436:\t74 05                \tje     40043d &lt;_init+0x15&gt;\n  400438:\te8 53 00 00 00       \tcallq  400490 &lt;__libc_start_main@plt+0x10&gt;\n  40043d:\t48 83 c4 08          \tadd    $0x8,%rsp\n  400441:\tc3                   \tretq   \n\nDisassembly of section .plt:\n\n\n0000000000400470 &lt;printf@plt&gt;:\n  400470:\tff 25 aa 0b 20 00    \tjmpq   *0x200baa(%rip)        # 601020 &lt;_GLOBAL_OFFSET_TABLE_+0x20&gt;\n  400476:\t68 01 00 00 00       \tpushq  $0x1\n  40047b:\te9 d0 ff ff ff       \tjmpq   400450 &lt;_init+0x28&gt;\n\n0000000000400480 &lt;__libc_start_main@plt&gt;:\n  400480:\tff 25 a2 0b 20 00    \tjmpq   *0x200ba2(%rip)        # 601028 &lt;_GLOBAL_OFFSET_TABLE_+0x28&gt;\n  400486:\t68 02 00 00 00       \tpushq  $0x2\n  40048b:\te9 c0 ff ff ff       \tjmpq   400450 &lt;_init+0x28&gt;\n\nDisassembly of section .plt.got:\n\n0000000000400490 &lt;.plt.got&gt;:\n  400490:\tff 25 62 0b 20 00    \tjmpq   *0x200b62(%rip)        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;\n  400496:\t66 90                \txchg   %ax,%ax\n\nDisassembly of section .text:\n\n00000000004004a0 &lt;_start&gt;:\n  4004a0:\t31 ed                \txor    %ebp,%ebp\n  4004a2:\t49 89 d1             \tmov    %rdx,%r9\n  4004a5:\t5e                   \tpop    %rsi\n  4004a6:\t48 89 e2             \tmov    %rsp,%rdx\n  4004a9:\t48 83 e4 f0          \tand    $0xfffffffffffffff0,%rsp\n  4004ad:\t50                   \tpush   %rax\n  4004ae:\t54                   \tpush   %rsp\n  4004af:\t49 c7 c0 b0 06 40 00 \tmov    $0x4006b0,%r8 &#x2F;&#x2F;00000000004006b0 &lt;__libc_csu_fini&gt;:\n  4004b6:\t48 c7 c1 40 06 40 00 \tmov    $0x400640,%rcx &#x2F;&#x2F;0000000000400640 &lt;__libc_csu_init&gt;:\n  4004bd:\t48 c7 c7 bb 05 40 00 \tmov    $0x4005bb,%rdi &#x2F;&#x2F;00000000004005bb &lt;main&gt;:\n  4004c4:\te8 b7 ff ff ff       \tcallq  400480 &lt;__libc_start_main@plt&gt;\n  4004c9:\tf4                   \thlt    \n  4004ca:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n\n0000000000400596 &lt;display&gt;:\n  400596:\t55                   \tpush   %rbp\n  400597:\t48 89 e5             \tmov    %rsp,%rbp\n  40059a:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40059e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4005a2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4005a6:\t48 89 c6             \tmov    %rax,%rsi\n  4005a9:\tbf c4 06 40 00       \tmov    $0x4006c4,%edi\n  4005ae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4005b3:\te8 b8 fe ff ff       \tcallq  400470 &lt;printf@plt&gt;\n  4005b8:\t90                   \tnop\n  4005b9:\tc9                   \tleaveq \n  4005ba:\tc3                   \tretq   \n\n00000000004005bb &lt;main&gt;:\n  4005bb:\t55                   \tpush   %rbp\n  4005bc:\t48 89 e5             \tmov    %rsp,%rbp\n  4005bf:\t48 81 ec 10 01 00 00 \tsub    $0x110,%rsp\n  4005c6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  4005cd:\t00 00 \n  4005cf:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4005d3:\t31 c0                \txor    %eax,%eax\n  4005d5:\t48 b8 49 27 6d 20 61 \tmovabs $0x74732061206d2749,%rax\n  4005dc:\t20 73 74 \n  4005df:\t48 89 85 f0 fe ff ff \tmov    %rax,-0x110(%rbp)\n  4005e6:\t48 c7 85 f8 fe ff ff \tmovq   $0x676e6972,-0x108(%rbp)\n  4005ed:\t72 69 6e 67 \n  4005f1:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n  4005f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4005fd:\tb9 1e 00 00 00       \tmov    $0x1e,%ecx\n  400602:\t48 89 d7             \tmov    %rdx,%rdi\n  400605:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  400608:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40060f:\t48 89 c7             \tmov    %rax,%rdi\n  400612:\te8 7f ff ff ff       \tcallq  400596 &lt;display&gt;\n  400617:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40061c:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  400620:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n  400627:\t00 00 \n  400629:\t74 05                \tje     400630 &lt;main+0x75&gt;\n  40062b:\te8 30 fe ff ff       \tcallq  400460 &lt;__stack_chk_fail@plt&gt;\n  400630:\tc9                   \tleaveq \n  400631:\tc3                   \tretq   \n  400632:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  400639:\t00 00 00 \n  40063c:\t0f 1f 40 00          \tnopl   0x0(%rax)\n\n0000000000400640 &lt;__libc_csu_init&gt;:\n  400640:\t41 57                \tpush   %r15\n  400642:\t41 56                \tpush   %r14\n  400644:\t41 89 ff             \tmov    %edi,%r15d\n  400647:\t41 55                \tpush   %r13\n  400649:\t41 54                \tpush   %r12\n  40064b:\t4c 8d 25 be 07 20 00 \tlea    0x2007be(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;\n  400652:\t55                   \tpush   %rbp\n  400653:\t48 8d 2d be 07 20 00 \tlea    0x2007be(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;\n  40065a:\t53                   \tpush   %rbx\n  40065b:\t49 89 f6             \tmov    %rsi,%r14\n  40065e:\t49 89 d5             \tmov    %rdx,%r13\n  400661:\t4c 29 e5             \tsub    %r12,%rbp\n  400664:\t48 83 ec 08          \tsub    $0x8,%rsp\n  400668:\t48 c1 fd 03          \tsar    $0x3,%rbp\n  40066c:\te8 b7 fd ff ff       \tcallq  400428 &lt;_init&gt;\n  400671:\t48 85 ed             \ttest   %rbp,%rbp\n  400674:\t74 20                \tje     400696 &lt;__libc_csu_init+0x56&gt;\n  400676:\t31 db                \txor    %ebx,%ebx\n  400678:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  40067f:\t00 \n  400680:\t4c 89 ea             \tmov    %r13,%rdx\n  400683:\t4c 89 f6             \tmov    %r14,%rsi\n  400686:\t44 89 ff             \tmov    %r15d,%edi\n  400689:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)\n  40068d:\t48 83 c3 01          \tadd    $0x1,%rbx\n  400691:\t48 39 eb             \tcmp    %rbp,%rbx\n  400694:\t75 ea                \tjne    400680 &lt;__libc_csu_init+0x40&gt;\n  400696:\t48 83 c4 08          \tadd    $0x8,%rsp\n  40069a:\t5b                   \tpop    %rbx\n  40069b:\t5d                   \tpop    %rbp\n  40069c:\t41 5c                \tpop    %r12\n  40069e:\t41 5d                \tpop    %r13\n  4006a0:\t41 5e                \tpop    %r14\n  4006a2:\t41 5f                \tpop    %r15\n  4006a4:\tc3                   \tretq   \n  4006a5:\t90                   \tnop\n  4006a6:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  4006ad:\t00 00 00 \n\n00000000004006b0 &lt;__libc_csu_fini&gt;:\n  4006b0:\tf3 c3                \trepz retq \n\nDisassembly of section .fini:\n\n00000000004006b4 &lt;_fini&gt;:\n  4006b4:\t48 83 ec 08          \tsub    $0x8,%rsp\n  4006b8:\t48 83 c4 08          \tadd    $0x8,%rsp\n  4006bc:\tc3                   \tretq   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>这里我们注意第45，46，47，48行，注意其中</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">4004af:\t49 c7 c0 b0 06 40 00 \tmov    $0x4006b0,%r8 &#x2F;&#x2F;00000000004006b0 &lt;__libc_csu_fini&gt;:\n4004b6:\t48 c7 c1 40 06 40 00 \tmov    $0x400640,%rcx &#x2F;&#x2F;0000000000400640 &lt;__libc_csu_init&gt;:\n4004bd:\t48 c7 c7 bb 05 40 00 \tmov    $0x4005bb,%rdi &#x2F;&#x2F;00000000004005bb &lt;main&gt;:\n4004c4:\te8 b7 ff ff ff       \tcallq  400480 &lt;__libc_start_main@plt&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>__libc_start_main@plt</code>包含了三个参数，<code>__libc_csu_fini</code>,<code>__libc_csu_init</code>,<code>main</code>显然，从名称上就可以看出这四个函数的作用。</p>\n<p>__libc_start_main是libc.so.6中的一个函数。它的原型是这样的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">extern int BP_SYM (__libc_start_main) (int (*main) (int, char **, char **),\n\t\tint argc,\n\t\tchar *__unbounded *__unbounded ubp_av,\n\t\tvoid (*init) (void),\n\t\tvoid (*fini) (void),\n\t\tvoid (*rtld_fini) (void),\n\t\tvoid *__unbounded stack_end)\n__attribute__ ((noreturn));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个函数需要做的是建立&#x2F;初始化一些数据结构&#x2F;环境然后调用我们的main()。</p>\n<p>程序启动的过程应该：<code>_start -&gt; __libc_start_main -&gt; __libc_csu_init -&gt; _init -&gt; main -&gt; _fini</code>.</p>\n<p>这篇文章有详细的说明：<a href=\"https://blog.csdn.net/gary_ygl/article/details/8506007\">linux编程之main()函数启动过程</a></p>\n<h3 id=\"栈缓冲区及结构\"><a href=\"#栈缓冲区及结构\" class=\"headerlink\" title=\"栈缓冲区及结构\"></a>栈缓冲区及结构</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"汇编基础\"><a href=\"#汇编基础\" class=\"headerlink\" title=\"汇编基础\"></a>汇编基础</h3><p>x86_64有16个64位寄存器，分别是：</p>\n<p>%rax，%rbx，%rcx，%rdx，%esi，%edi，%rbp，%rsp，%r8，%r9，%r10，%r11，%r12，%r13，%r14，%r15。</p>\n<p>其中：</p>\n<p>%rax 作为函数返回值使用。<br>%rsp 栈指针寄存器，指向栈顶<br>%rdi，%rsi，%rdx，%rcx，%r8，%r9 用作函数参数，依次对应第1参数，第2参数<br>%rbx，%rbp，%r12，%r13，%14，%15 用作数据存储，遵循被调用者使用规则，简单说就是随便用，调用子函数之前要备份它，以防他被修改<br>%r10，%r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要先保存原值</p>\n<p>64位与32位的不同在于64位不用压栈来存储下一个函数参数，而是放在了%rdi，%rsi，%rdx，%rcx，%r8，%r9六个寄存器中，超出部分再压栈。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8c6f52a7fabfb4f31464e51c3aa0e8a4_r.jpg\" alt=\"preview\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-03edf3d060b91b58698db2a58bfb3be5_r.jpg\" alt=\"preview\"></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-0cbd2ee34a6a173804028b19fe0a9167_720w.jpg\" alt=\"img\"></p></blockquote>\n<p>首先，我们将<code>main.c</code>文件进行汇编，使用命令<code>gcc -S main.c</code>，在当前目录下回生成<code>main.s</code>的汇编文件，内容如下：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\t.file\t&quot;main.c&quot;\n\t.section\t.rodata\n.LC0:\n\t.string\t&quot;hello world! %s\\n&quot;\n\t.text\n\t.globl\tdisplay\n\t.type\tdisplay, @function\ndisplay:\n.LFB0:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$16, %rsp\n\tmovq\t%rdi, -8(%rbp)\n\tmovq\t-8(%rbp), %rax\n\tmovq\t%rax, %rsi\n\tmovl\t$.LC0, %edi\n\tmovl\t$0, %eax\n\tcall\tprintf\n\tnop\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\tdisplay, .-display\n\t.globl\tmain\n\t.type\tmain, @function\nmain:\n.LFB1:\n\t.cfi_startproc\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset 6, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register 6\n\tsubq\t$272, %rsp\n\tmovq\t%fs:40, %rax\n\tmovq\t%rax, -8(%rbp)\n\txorl\t%eax, %eax\n\tmovabsq\t$8391086132249306953, %rax &#x2F;&#x2F;0x74732061206d2749 (&quot;I&#39;m a st&quot;)\n\tmovq\t%rax, -272(%rbp)\n\tmovq\t$1735289202, -264(%rbp)\n\tleaq\t-256(%rbp), %rdx\n\tmovl\t$0, %eax\n\tmovl\t$30, %ecx\n\tmovq\t%rdx, %rdi\n\trep stosq\n\tleaq\t-272(%rbp), %rax\n\tmovq\t%rax, %rdi &#x2F;&#x2F;使用%rdi寄存器压入参数\n\tcall\tdisplay &#x2F;&#x2F;调用函数\n\tmovl\t$0, %eax\n\tmovq\t-8(%rbp), %rsi\n\txorq\t%fs:40, %rsi\n\tje\t.L4\n\tcall\t__stack_chk_fail\n.L4:\n\tleave\n\t.cfi_def_cfa 7, 8\n\tret\n\t.cfi_endproc\n.LFE1:\n\t.size\tmain, .-main\n\t.ident\t&quot;GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609&quot;\n\t.section\t.note.GNU-stack,&quot;&quot;,@progbits<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h4><p>在53，54行，使用<code>rdi</code>压入了一个参数，参数的地址在<code>-272(%rbp)（即rdi）</code>, 可以看出正好是字符串”I’m a string”的地址。如下所示：![image-20210719112214862](从一个hello world说起&#x2F;image-20210719112214862.png)</p>\n<p>其中，函数调用栈缓冲区<code>backtrace</code>显示当前栈缓冲区为main，再上一层为__libc_start_main，再次印证了上一节的说法。</p>\n<h4 id=\"display函数\"><a href=\"#display函数\" class=\"headerlink\" title=\"display函数\"></a>display函数</h4><p>下面我们进入display函数，可以看出printf的两个参数分别放在<code>rdi,rsi</code>两个寄存器当中。</p>\n<p>![image-20210719112513484](从一个hello world说起&#x2F;image-20210719112513484.png)其中，函数调用栈缓冲区<code>backtrace</code>显示当前栈缓冲区为display，再上一层为main，__libc_start_main，再次印证了上一节的说法。</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>通过对main函数中display函数的参数，display函数中的printf函数的参数进行实验，说明了C语言在函数调用时的栈缓冲区的组织。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>对于一个普普通通的C语言程序，其实其背后是一堆复杂的操作系统预备好的操作，执行完毕之后，就开始执行我们的main函数。main函数并不是程序执行的第一个函数，当然也不是最后一个。我们编写的程序的main函数，仅仅是操作系统在加载elf文件时候调用的函数而已，仅仅是函数而已。</p>\n<p>栈缓冲区的组织，一定要动手自己调一调，理解栈缓冲区，有助于理解pwn题中的栈缓冲的利用。</p>\n<p>这就是我喜欢C语言的原因，因为他能让我更加清晰的看到程序运行的背后，而像python这类语言，我也使用，因为真的方便，但是对于理解计算机、理解背后的故事非常的不利。</p>\n<p>关注我，学习更多系统的知识！</p>\n","text":"从一个hello world说起大家好，我是明说网络的小明同学。今天我们从C语言的Hello World说起，和大家一起温习一下C语言中一个Hello World怎么运行起来的，以及C语言如何组织栈缓冲区等。本文不适用于C语言初学者，需要具备有一定的汇编基础。好了下面，我们开始吧...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E4%B8%80%E4%B8%AAhello-world%E8%AF%B4%E8%B5%B7\"><span class=\"toc-text\">从一个hello world说起</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">C语言介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8Fhelloworld\"><span class=\"toc-text\">第一个程序helloworld</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">编写程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91makefile\"><span class=\"toc-text\">程序编译makefile</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hello-world-%E7%9A%84%E8%83%8C%E5%90%8E\"><span class=\"toc-text\">Hello world 的背后</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96\"><span class=\"toc-text\">汇编</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88%E7%BC%93%E5%86%B2%E5%8C%BA%E5%8F%8A%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">栈缓冲区及结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">汇编基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#main%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">main函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#display%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">display函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol></li></ol>","author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}},"mapped":true,"prev_post":{"title":"一个github快速建站主题推荐GitHub+Hexo+AURORA","uid":"bc80ff236e2a1555d11b2ba09309eece","slug":"一个github快速建站主题推荐","date":"2022-02-26T07:22:13.000Z","updated":"2022-02-26T09:23:50.522Z","comments":true,"path":"api/articles/一个github快速建站主题推荐.json","cover":[],"text":" title: 大家好，我是明说网络的小明同学date: 2022-02-26 17:20:22 大家好，我是明说网络的小明同学 今天给大家推荐一块非常快速的建站工具Github + AURORA Github建站github免费建站就不说了，网上有很多教程。 Hexo快速生成可...","link":"","photos":[],"count_time":{"symbolsCount":719,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}}},"next_post":{"title":"IT、制造业和医疗卫生部门成为网络攻击的重点目标","uid":"9807e6187d5c7b84b8bf1e1617776da6","slug":"IT、制造业和医疗卫生部门成为网络攻击的重点目标","date":"2022-02-26T06:11:30.000Z","updated":"2022-02-26T06:12:56.758Z","comments":true,"path":"api/articles/IT、制造业和医疗卫生部门成为网络攻击的重点目标.json","cover":[],"text":"IT、制造业和医疗卫生部门成为网络攻击的重点目标 医疗保健和制造业受到主动的网络攻击，这已经不是什么秘密。威胁形势已经发生了巨大的变化，而且事情正在变得越来越糟糕。除了这两个行业，IT行业也已成为网络攻击的最主要目标之一。 一些统计数字Avanan公司最近的一份报告对今年上半年的...","link":"","photos":[],"count_time":{"symbolsCount":592,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}}}}