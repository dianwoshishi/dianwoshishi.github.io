{"title":"传输层安全协议真（TLS）的安全吗？","uid":"dfc0a69891447bc4e3dfea1542d0fbf1","slug":"传输层安全协议真（TLS）的安全吗？","date":"2022-02-26T04:40:06.963Z","updated":"2022-02-26T05:18:13.550Z","comments":true,"path":"api/articles/传输层安全协议真（TLS）的安全吗？.json","cover":[],"content":"<h1 id=\"传输层安全协议真（TLS）的安全吗？\"><a href=\"#传输层安全协议真（TLS）的安全吗？\" class=\"headerlink\" title=\"传输层安全协议真（TLS）的安全吗？\"></a>传输层安全协议真（TLS）的安全吗？</h1><p>随着数字通信，计算机网络，公钥密码体制等技术的迅速发展，安全网络通信已经成为了人们的日常需求。TLS 作为目前被广泛应用的安全通信协议之一，被广泛使用于日常生活中，如HTTPS，DNS over TLS等等。但是TLS真的安全吗？他能有效的保护我们的隐私吗？</p>\n<h2 id=\"TLS基础\"><a href=\"#TLS基础\" class=\"headerlink\" title=\"TLS基础\"></a>TLS基础</h2><h3 id=\"TLS是什么？\"><a href=\"#TLS是什么？\" class=\"headerlink\" title=\"TLS是什么？\"></a>TLS是什么？</h3><p>传输层安全协议（Transport Layer Security，TLS）：TLS标准由互联网工程任务组（IETF）TLS工作组制定和维护。TLS在TCP&#x2F;IP协议栈上运行，用于保护web流量（使用HTTPS）、文件传输、电子邮件传输和许多其他应用程序。迄今为止，已有两个版本的SSL（SSL v2和SSL v3）和三个版本的TLS（TLS 1.0、TLS 1.1和TLS 1.2）；下一个版本TLS 1.3已于2018年8月发布。</p>\n<p>TLS用于保护许多应用程序。很多人最为熟悉的TLS使用场景是用于保护通过超文本传输协议（HTTP）传输的web流量。在HTTPS中，建立SSL&#x2F;TLS连接（通常在TCP端口443上，与不安全网站的端口80不同），然后HTTP数据通过安全连接传输。TLS还可用于保护电子邮件传输协议（IMAP和POP，用于客户端从邮件服务器下载邮件，SMTP用于发送邮件），以及文件传输（FTP）。在这些场景中，不安全连接被“升级”为安全连接，用于保护人们的隐私和通信数据安全。</p>\n<h3 id=\"TLS历史\"><a href=\"#TLS历史\" class=\"headerlink\" title=\"TLS历史\"></a>TLS历史</h3><p>SSL协议由Netscape公司开发，历史可以追溯到Netscape Navigator浏览器统治互联网的时代。协议的第一个版本从未发布过，</p>\n<p>第二版则于1994年11月发布。第一次部署是在Netscape Navigator 1.1浏览器上，发行于1995年3月。SSL 2的开发基本上没有与Netscape以外的安全专家进行过商讨，所以有严重的弱点，被认为是失败的协议，最终退出了历史的舞台。</p>\n<p>这次失败使Netscape专注于SSL 3，并于1995年年底发布。虽然名称与早先的协议版本相同，但SSL 3是完全重新设计的协议。该设计一直沿用到今天。</p>\n<p>1996年5月，TLS工作组成立，开始将SSL从Netscape迁移至IETF。由于Microsoft和Netscape当时正在为Web的统治权争得不可开交，整个迁移过程进行得非常缓慢、艰难。最终，TLS 1.0于1999年1月问世，见RFC 2246。尽管与SSL 3相比，版本修改并不大，但是为了取悦Microsoft，协议还是进行了更名[插图]。</p>\n<p>直到2006年4月，下一个版本TLS 1.1才问世，仅仅修复了一些关键的安全问题。然而，协议的重要更改是作为TLS扩展于2003年6月发布的，并被集成到了协议中，这比大家的预期早了好几年。</p>\n<p>2008年8月，TLS 1.2发布。该版本添加了对已验证加密的支持，并且基本上删除了协议说明中所有硬编码的安全基元，使协议完全弹性化。</p>\n<p>当前最新版本的TLS协议为TLSv1.3，已于2018年有IETF正式发布。</p>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Published</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>——–</td>\n<td>———–</td>\n<td>————————————————————</td>\n</tr>\n<tr>\n<td>SSL 1.0</td>\n<td>Unpublished</td>\n<td>Unpublished</td>\n</tr>\n<tr>\n<td>SSL 2.0</td>\n<td>1995</td>\n<td>Deprecated in 2011</td>\n</tr>\n<tr>\n<td>SSL 3.0</td>\n<td>1996</td>\n<td>Deprecated in 2015</td>\n</tr>\n<tr>\n<td>TLS 1.0</td>\n<td>1999</td>\n<td>Deprecated in 2020</td>\n</tr>\n<tr>\n<td>TLS 1.1</td>\n<td>2006</td>\n<td>Deprecated in 2020, in 2021 Chrome will not load websites with TLS 1.0 or 1.1.</td>\n</tr>\n<tr>\n<td>TLS 1.2</td>\n<td>2008</td>\n<td></td>\n</tr>\n<tr>\n<td>TLS 1.3</td>\n<td>2018</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"TLS组成协议\"><a href=\"#TLS组成协议\" class=\"headerlink\" title=\"TLS组成协议\"></a>TLS组成协议</h2><p>TLS的主规格说明书定义了四个核心子协议：握手协议（handshake protocol）、密钥规格变更协议（change cipher spec protocol）、应用数据协议（application data protocol）和警报协议（alert protocol）。</p>\n<p>出于加密目的，<strong>两个最重要的子协议是握手协议和记录层协议</strong>。</p>\n<h3 id=\"SSL握手协议\"><a href=\"#SSL握手协议\" class=\"headerlink\" title=\"SSL握手协议\"></a>SSL握手协议</h3><p>握手是TLS协议中最精密复杂的部分。在握手协议中，客户机和服务器商定一组称为密码套件的加密参数，交换身份验证凭据，建立共享机密，执行显式身份验证，并派生用于批量加密和消息验证的密钥。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-01034aebce9c000921518e2642021910_b.jpg\" alt=\"img\"></p>\n<p>Figure 1.3.1: 握手协议</p>\n<p><strong>握手过程</strong>分为4个阶段：</p>\n<ul>\n<li>初始化逻辑连接，客户方先发出ClientHello消息，服务器方也应返回一个ServerHello消息，这两个消息用来协商双方的安全能力，包括协议版本、随机参数、会话ID、交换密钥算法、对称加密算法、压缩算法等。</li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/80/v2-f0b52f06689b5433fa911315a0327c36_720w.png\" alt=\"img\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><img src=\"/post/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E7%9C%9F%EF%BC%88TLS%EF%BC%89%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F/image-20210626173638179.png\" alt=\"密码套件名称构成\"></p></blockquote>\n<p>clienthello消息示例</p>\n<ul>\n<li>服务器方应发送服务器证书Certificate（包含了服务器的公钥等）和服务端会话密钥(Serverkeyexchange)，如果服务器要求验证客户方，则要发送CertificateRequest消息。最后服务器方发送ServerHelloDone消息，表示hello阶段结束，服务器等待客户方的响应。</li>\n<li>如果服务器要求验证客户方，则客户方先发送客户端证书Certificate消息，然后产生客户端会话密钥，并用服务器的公钥加密，封装在ClientKeyExchange消息中，如果客户方发送了自己的证书，则再发送一个数字签名CertificateVerify来对证书进行校验。</li>\n<li>客户方发送一个ChangeCipherSpec消息，通知服务器以后发送的消息将采用先前协商好的安全参数加密，最后再发送一个加密后的Finished消息。服务器在收到上述两个消息后，也发送自己的ChangeCipherSpec消息和Finished消息。至此，握手全部完成，双方可以开始传输应用数据。</li>\n</ul>\n<p><strong>会话恢复</strong></p>\n<p>完整的握手协议非常复杂，需要很多握手消息和两次网络往返才能开始发送客户端应用数据。此外，握手执行的密钥学操作通常需要密集的CPU处理。因此建立一次握手的代价很昂贵，于是短时间中断的连接可以使用会话恢复快速恢复。</p>\n<p>最初的会话恢复机制是，在一次完整协商的连接断开时，客户端和服务器都会将会话的安全参数保存一段时间。希望使用会话恢复的服务器为会话指定唯一的标识，称为会话ID。服务器在ServerHello消息中将会话ID发回客户端。希望恢复早先会话的客户端将适当的会话ID放入ClientHello消息，然后提交。服务器如果愿意恢复会话，就将相同的会话ID放入ServerHello消息返回，接着使用之前协商的主密钥生成一套新的密钥，再切换到加密模式，发送Finished消息。客户端收到会话已恢复的消息以后，也进行相同的操作。这样的结果是握手只需要一次网络往返。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-dc5ad8417d475fe79ab74e70d727cfb6_720w.png\" alt=\"img\"></p>\n<p>简短握手，用于恢复已经建立的会话</p>\n<h4 id=\"TLS中的密码交换算法\"><a href=\"#TLS中的密码交换算法\" class=\"headerlink\" title=\"TLS中的密码交换算法\"></a>TLS中的密码交换算法</h4><p><img src=\"https://pic1.zhimg.com/80/v2-11d842dc5d5177774c9f1cb2f0483082_720w.png\" alt=\"img\"></p>\n<p>最常用的密钥交换算法概览</p>\n<p>使用哪一种密钥交换由协商的套件所决定。</p>\n<h3 id=\"记录层协议\"><a href=\"#记录层协议\" class=\"headerlink\" title=\"记录层协议\"></a>记录层协议</h3><p>记录层协议提供TLS中所有消息的传递，包括握手协议消息和应用程序数据，但特别是记录层协议可以选择使用身份验证和加密来保护消息。还有一个附加的警报协议，用于通知对等方错误或关闭连接。 SSL记录协议从高层接收到数据后要经过分段、压缩和加密处理，最后由传输层发送出去。在SSL协议中，所有的传输数据都被封装在记录中，SSL记录协议规定了记录头和记录数据的格式。</p>\n<p>总之，经过上述两个协议，客户端和服务器通过公钥密码体制协商通信时使用的对称加密体制秘钥，然后使用对称加密体制对通信数据进行加密处理。这样，通信数据就可以“安全”的在网络中进行传输。</p>\n<h3 id=\"其他协议\"><a href=\"#其他协议\" class=\"headerlink\" title=\"其他协议\"></a>其他协议</h3><p>当然了，除了上述最重要的两个协议之外，还有一些其他的协议，例如警告协议，心跳协议等等。</p>\n<p>警报的目的是以简单的通知机制告知对端通信出现异常状况。发送警告通知的一端不会主动终止连接，而是交由接收端通过发送它自己的严重警报对该警告自行作出反应。</p>\n<p>心跳（Heartbeat）是一个协议扩展，添加了支持连接保活的功能（检查对端是否仍然可用），以及为TLS和DTLS发现路径最大传输单元（path maximumtransmission unit, PMTU）</p>\n<h2 id=\"SSL-x2F-TLS安全吗？\"><a href=\"#SSL-x2F-TLS安全吗？\" class=\"headerlink\" title=\"SSL&#x2F;TLS安全吗？\"></a>SSL&#x2F;TLS安全吗？</h2><p>TLS 的发展有 20 多年的历史，在之前的版本中，TLS 1.2 是高度可配置的，为了更好的兼容旧版本的浏览器，这意味着那些易受攻击的站点始终在运行着不安全的加密算法，这让互联网黑客有可乘之机。</p>\n<h3 id=\"协议漏洞\"><a href=\"#协议漏洞\" class=\"headerlink\" title=\"协议漏洞\"></a>协议漏洞</h3><h4 id=\"经典攻击\"><a href=\"#经典攻击\" class=\"headerlink\" title=\"经典攻击\"></a>经典攻击</h4><p>以下是TLS&#x2F;SSL协议中的主要漏洞。它们都会影响协议的旧版本（TLSv1.2及更早版本）。</p>\n<ul>\n<li>POODLE（Padding Oracle On Downgraded Legacy Encryption）,(CVE-2014-3566)</li>\n<li>BEAST（Browser Exploit Against SSL&#x2F;TLS ）(CVE-2011-3389)</li>\n<li>CRIME (Compression Ratio Info-leak Made Easy) (CVE-2012-4929)</li>\n<li>BREACH（Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext） (CVE-2013-3587.)</li>\n<li>Heartbleed (CVE-2014-0160.)</li>\n</ul>\n<p>详细的一些介绍看这里[这里[<a href=\"https://zhuanlan.zhihu.com/write#footnote-1\">1]</a>]:<a href=\"https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/\">https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/</a></p>\n<h3 id=\"不安全因素\"><a href=\"#不安全因素\" class=\"headerlink\" title=\"不安全因素\"></a>不安全因素</h3><p>这些主要漏洞中，的一些不安全的因素：</p>\n<ul>\n<li>RSA 密钥传输 —— 不支持前向安全性</li>\n<li>CBC 模式密码 —— 易受 BEAST 和 Lucky 13 攻击</li>\n<li>RC4 流密码 —— 在 HTTPS 中使用并不安全</li>\n<li>SHA-1 哈希函数 —— 建议以 SHA-2 取而代之</li>\n<li>任意 Diffie-Hellman 组—— CVE-2016-0701 漏洞</li>\n<li>输出密码 —— 易受 FREAK 和 LogJam 攻击</li>\n</ul>\n<h3 id=\"部署安全\"><a href=\"#部署安全\" class=\"headerlink\" title=\"部署安全\"></a>部署安全</h3><p>虽然SSL&#x2F;TLS协议用于保护数据传输，但配置不当的服务器可能会暴露数据而不是保护数据。</p>\n<ul>\n<li>中间人攻击：如middlebox（如部分杀毒软件会作为中间人，解密用户数据，进行恶意审查；不安全的CA及不可验证的数字证书链等）的广泛部署</li>\n<li>误配置：如使用已经被证明不安全的协议（TLSv1.1之前的版本），支持不安全的密码套件（RC4，MD5等）等。</li>\n</ul>\n<p>根据<a href=\"https://www.ssllabs.com/ssl-pulse/\">SSL Labs</a>的统计信息，如下图所示，即使许多的SSL&#x2F;TLS已经被证明不安全，但是由于各种原因，例如管理员疏忽、配置错误、机器升级障碍等问题，目前仍然存在大量不安全的SSL&#x2F;TLS协议在使用当中。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-880b162f7b655e34f735bde9665f6e7c_b.jpg\" alt=\"img\"></p>\n<p>Figure 2.2.1: SSL Labs统计信息</p>\n<h3 id=\"防御方法\"><a href=\"#防御方法\" class=\"headerlink\" title=\"防御方法\"></a>防御方法</h3><p>在大多数情况下，保护自己免受SSL&#x2F;TLS相关攻击的最佳方法是禁用旧的协议版本。这甚至是一些行业的标准要求。例如看看下面几个业界的动态就知道低版本 TLS 的现状了。</p>\n<ul>\n<li>GitHub 于 2018 年 2 月 1 日起，禁用 TLSv1 和 TLSv1.1。</li>\n<li>Salesforce 于 2018 年 3 月 逐步禁用 TLSv1。</li>\n<li>微信小程序要求的 TLS 版本必须大于等于 1.2。</li>\n<li>为了符合支付卡行业数据安全标准（PCI DSS）并符合行业最佳实践，GlobalSign 将在 2018 年 6 月 21 日禁用 TLS 1 和 TLS 1.1 。</li>\n</ul>\n<p>选择的协议级别越高，相应的也就更安全。</p>\n<p>同时，将目前计算机上部署的TLS版本更新到最新，可有效防止此类问题，目前安全的版本为TLSv1.3。</p>\n<h2 id=\"TLSv1-3\"><a href=\"#TLSv1-3\" class=\"headerlink\" title=\"TLSv1.3\"></a>TLSv1.3</h2><p>下图是TLS完整的握手过程</p>\n<p><img src=\"https://pic1.zhimg.com/v2-461dceb7158b0941c3e1a5237b3b3e28_b.jpg\" alt=\"img\"></p>\n<p>Figure 3.1: SSL Labs统计信息</p>\n<p>与TLSv1.2主要的不同，TLSv1.3进行了很多改进，改进力度还是比较大。如上图所示，握手过程明显比TLS之前版本更少的握手次数，，甚至是0次（zero round trip time (0-RTT)）可以更快的建联，简化了握手机制。</p>\n<p>同时，不再兼容一些不安全的密码算法，甚至是不安全的前向兼容.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说，当前TLS是广泛使用的安全通信协议，安全性在整个互联网界的共同努力下，逐步提升，可以保证用户数据和隐私的安全。但是由于其历史、兼容性、实现以及部署等原因，在实际使用过程中产生了一些安全的问题，但是很快就会被打上补丁。因此，只要能够及时打上TLS的补丁，升级支持最新版的协议，禁用旧的版本，就能够有效地保护数据隐私和通信安全。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>《HTTPS权威指南：在服务器和Web应用上部署SSL&#x2F;TLS和PKI》</p>\n","text":"传输层安全协议真（TLS）的安全吗？随着数字通信，计算机网络，公钥密码体制等技术的迅速发展，安全网络通信已经成为了人们的日常需求。TLS 作为目前被广泛应用的安全通信协议之一，被广泛使用于日常生活中，如HTTPS，DNS over TLS等等。但是TLS真的安全吗？他能有效的保护...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E7%9C%9F%EF%BC%88TLS%EF%BC%89%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">传输层安全协议真（TLS）的安全吗？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TLS%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">TLS基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TLS%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">TLS是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TLS%E5%8E%86%E5%8F%B2\"><span class=\"toc-text\">TLS历史</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TLS%E7%BB%84%E6%88%90%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">TLS组成协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSL%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">SSL握手协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TLS%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E4%BA%A4%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">TLS中的密码交换算法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95%E5%B1%82%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">记录层协议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">其他协议</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSL-x2F-TLS%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">SSL&#x2F;TLS安全吗？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">协议漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%8F%E5%85%B8%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">经典攻击</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%AE%89%E5%85%A8%E5%9B%A0%E7%B4%A0\"><span class=\"toc-text\">不安全因素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">部署安全</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%B2%E5%BE%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">防御方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TLSv1-3\"><span class=\"toc-text\">TLSv1.3</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol>","author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于netfilter的IP数据统计设计","uid":"8ba16520bf2f9f2afc20dc140f78edc0","slug":"基于netfilter的IP数据统计设计与Linux驱动实现","date":"2022-02-26T04:40:08.436Z","updated":"2022-02-26T05:09:28.282Z","comments":true,"path":"api/articles/基于netfilter的IP数据统计设计与Linux驱动实现.json","cover":null,"text":"Table of Contents 背景 IP信息统计 统计信息设计 存储数据结构 Linux驱动 网络型驱动设备 字符型设备 用户代码 总结 Linux 驱动 Linux内核 其他 参考资料 背景当今社会，没有都有自己的信息处理设备，如手机、计算机甚至可能是路由器。在使用这些设...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"开发","slug":"开发","count":3,"path":"api/categories/开发.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"},{"name":"netfilter","slug":"netfilter","count":1,"path":"api/tags/netfilter.json"},{"name":"内核","slug":"内核","count":1,"path":"api/tags/内核.json"}],"author":{"name":"明说网络","slug":"blog-author","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"/","description":"和你去看网络空间","socials":{"github":"https://github.com/dianwoshishi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2119505607","zhihu":"https://www.zhihu.com/people/dianwoshishi","csdn":"https://blog.csdn.net/wanglihongwm","juejin":"","customs":{"bilibili":{"link":"https://space.bilibili.com/432126410"}}}}},"next_post":{"title":"从hello world开始，拆解函数栈结构","uid":"422918ab17fac2b9611905dfbc28c6cc","slug":"从hello world开始，拆解字符串常量的存储位置","date":"2022-02-26T04:40:06.930Z","updated":"2022-02-26T05:35:01.072Z","comments":true,"path":"api/articles/从hello world开始，拆解字符串常量的存储位置.json","cover":null,"text":"从hello world开始，拆解字符串常量的存储位置第一个程序helloworld编写程序首先我们有如下程序：main.c //main.c #include &lt;stdio.h> int display(char *name)&#123; printf(\"hello wo...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"明说网络","slug":"明说网络","avatar":"https://pic3.zhimg.com/v2-7803c8223e2c425aea4fc530975ee5f2_xl.jpg","link":"https://github.com/dianwoshshi","description":"A Jewllery Lover.","socials":{"github":"https://github.com/dianwoshshi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}